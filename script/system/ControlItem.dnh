//Item Script, also handles shot deletion
#include "./lib/lib_SystemCommon.dnh"
#include "./lib/lib_AsciiNum.dnh"
#include "./../lib/effectlib/lib_EffectCancel.dnh"

int _baseScore = [12800, 12800, 25600, 51200, 12800, 25600, 51200][GetDifficulty()];
int _pointLine = 128;
bool _autoCollect = false;
bool _resetScoreExtend = false;

@Initialize {
    System_Init();
    SetAreaCommonData(AREA_SYSTEM, "SCRIPT_ITEM", GetOwnScriptID());
    SetAreaCommonData(AREA_SYSTEM, "PointLine", _pointLine);
    SetItemAutoDeleteClip(32, 256, 32, 64);
    SetDefaultBonusItemEnable(false);
    SetPlayerAutoItemCollectLine(-1);
    LoadItemData(GetModuleDirectory() ~ "script/system/lib/dat_ItemData.dnh");
    Cancel_Init();
    Ascii_Init();
    TCheckThrillGauge();
    TCheckScoreExtend();
}

@MainLoop { yield; }

@Event {
    alternative (GetEventType())
    case (EV_DELETE_SHOT_IMMEDIATE) { //triggered by player bomb/death
        int obj = GetEventArgument(0);
        float[] pos = GetEventArgument(1);
        int score = Obj_GetValueDI(obj, SHOT_SCORE, 0); //assume no score

        //Delete effects
        if (Obj_GetType(obj) == OBJ_SHOT) Cancel_Shot(obj);
        else if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) Cancel_Laser(obj);
        //score
        AddScore(score);
    }
    case (EV_DELETE_SHOT_TO_ITEM) { //triggered by clearing a boss spell, creates score text
        int obj = GetEventArgument(0);
        float[] pos = GetEventArgument(1);
        int score = Obj_GetValueDI(obj, SHOT_SCORE, 0); //assume no score

        //create item in place of bullet
        if (Obj_GetValueDI(obj, SHOT_DROP_ITEM, false)) NotifyEventOwn(EV_CREATE_ITEM, pos[0], pos[1], ITEM_SCORE);
        //Text and delete effects
        if (Obj_GetType(obj) == OBJ_SHOT) {
            if (Obj_GetValueDI(obj, SHOT_SCORE_TEXT, 0)) Ascii_ScoreNum(pos[0], pos[1], score);
            Cancel_Shot(obj);
        } else if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) Cancel_Laser(obj);
        //score
        AddScore(score);
    }
    case (EV_CREATE_ITEM) {
        int obj = CreateItemU1(GetEventArgument(2), GetEventArgument(0), GetEventArgument(1), 0);
        ObjMove_AddPatternB2(obj, 0, 0, -3.2, 0, 0.06, 0, 2.8);
        ObjMove_SetAngle(obj, 270);
        ObjItem_SetAutoCollectEnableFlags(obj, ITEM_AUTOCOLLECT_PLAYER_SCOPE | ITEM_AUTOCOLLECT_COLLECT_ALL);
        Obj_SetValueI(obj, ITEM_AUTOCOLLECT, _autoCollect); //give max score value?
        ObjItem_SetDefaultCollectMovement(obj, false);
        ObjItem_SetRenderScoreEnable(obj, false);
    }
    case (EV_COLLECT_ITEM) {
        int obj = GetEventArgument(0);
        int type = GetEventArgument(1);
        int colType = GetEventArgument(2);

        alternative (colType)
        case (0) {      //player item scope
            TScopeCollect(obj);
        }
        case (1) {}     //autocollect line
        case (2) {}     //CollectItemsInCircle()
        case (3) {      //CollectAllItems() i.e. thrill gauge
            Obj_SetValueI(obj, ITEM_AUTOCOLLECT, true); //give max score value
            TThrillCollect(obj);
        }
        case (4) {}     //ObjItem_SetMoveToPlayer()
    }
    case (EV_CANCEL_ITEM) {
        int obj = GetEventArgument(0);
        int type = GetEventArgument(1);
        int cancelType = GetEventArgument(2);

        Obj_SetValueI(obj, ITEM_AUTOCOLLECT, false); //cancel autocollect
    }
    case (EV_GET_ITEM) {
        int type = GetEventArgument(0);
        int obj = GetEventArgument(1);
        int score = 10; //default
        int color = COLOR_WHITE;

        alternative (type)
        case (ITEM_POW) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_SCORE) {
            AddPoint(1);
            if (ObjRender_GetY(obj) < _pointLine || Obj_GetValueDI(obj, ITEM_AUTOCOLLECT, false)) {
                score = _baseScore;
                color = COLOR_YELLOW_L;
            } else {
                score = (_baseScore / 2) - (_baseScore / 2) * ((ObjRender_GetY(obj) - _pointLine) / GetStgFrameHeight());
                score -= score % 10; //cuts off last digit, rounds down
            }
            CallSFX(SND_ITEM);
        }
        case (ITEM_DREAM) {
            WriteLog("No Dream Bonus System");
            //PLAY SFX
        }
        case (ITEM_POW_L) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_POW_FULL) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_BOMB) {
            score = 1000;
            SetPlayerSpell(GetPlayerSpell() + 1);
            CallSFX(SND_EXTEND);
            System_CallBanner(BANNER_EXTEND_SPELL, 0);
        }
        case (ITEM_EXTEND) {
            score = 1000;
            SetPlayerLife(GetPlayerLife() + 1);
            CallSFX(SND_EXTEND);
            System_CallBanner(BANNER_EXTEND, 0);
        }
        AddScore(score);
        Ascii_ScoreNum(ObjRender_GetX(obj), ObjRender_GetY(obj), score, color);
    }
    case (EV_SCORE_EXTEND) {
        SetPlayerLife(GetPlayerLife() + 1);
        CallSFX(SND_EXTEND);
        System_CallBanner(BANNER_EXTEND, 0);
    }
    case (EV_CONTINUE) {
        _resetScoreExtend = true;
        TCheckScoreExtend();
    }
}

task TScopeCollect(int item_) { //player item scope autocollect
    ObjMove_CancelMovement(item_);

    while (!Obj_IsDeleted(item_) && GetPlayerState() == STATE_NORMAL) {
        float angle = GetAngleToPlayer(item_);
        ObjMove_SetSpeed(item_, 5.5);
        ObjMove_SetAngle(item_, angle);
        yield;
    }

    if (!Obj_IsDeleted(item_)) ObjMove_AddPatternB2(item_, 0, 0, 0, 0, 0.06, 0, 2.8); //resume normal movement
}

task TThrillCollect(int item_) { //thrill gauge fill item autocollect
    while (sin(ObjMove_GetAngle(item_)) < 0) { //item is rising
        if (!Obj_GetValueDI(item_, ITEM_AUTOCOLLECT, false)) break;
        yield;
    }

    ObjMove_CancelMovement(item_);

    //accelerate toward player
    float speed = 0;
    float accel = 0.15;
    float maxSpeed = 10;
    while (!Obj_IsDeleted(item_) && Obj_GetValueDI(item_, ITEM_AUTOCOLLECT, false)) {
        float angle = GetAngleToPlayer(item_);
        ObjMove_SetSpeed(item_, speed);
        ObjMove_SetAngle(item_, angle);

        speed = min(speed + accel, maxSpeed);
        yield;
    }

    if (!Obj_IsDeleted(item_)) ObjMove_AddPatternB2(item_, 0, 0, 0, 0, 0.06, 0, 2.8); //resume normal movement
}

task TCheckThrillGauge() {
    int thrillMax = -1;
    while (thrillMax == -1) { //waiting for player script to determine a default thrillmax
        thrillMax = GetAreaCommonData(AREA_SYSTEM, "Thrill Max", -1);
        yield;
    }
    
    int thrillPtr = LoadAreaCommonDataValuePointer(AREA_SYSTEM, "Thrill Level", 0);

    loop {
        int thrillLevel = GetCommonDataPtr(thrillPtr, 0);
        _autoCollect = thrillLevel == thrillMax;
        yield;
    }
}

task TCheckScoreExtend() {
    if (GetGameMode() == GAME_SPELL) return; //no score extends in spell practice

    while (_resetScoreExtend == true) yield;

    int extendThreshold = 010_000_000;
    loop {
        while (GetScore() < extendThreshold && !_resetScoreExtend) yield;
        if (_resetScoreExtend) break;
        NotifyEventOwn(EV_SCORE_EXTEND, 0);
        extendThreshold *= 2;
    }

    _resetScoreExtend = false;
}