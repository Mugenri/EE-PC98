//Item Script, also handles shot deletion
#include "./lib/lib_SystemCommon.dnh"
#include "./lib/lib_AsciiNum.dnh"
#include "./../lib/effect/lib_EffectCancel.dnh"

@Initialize {
    System_Init();
    SetAreaCommonData(AREA_SYSTEM, "SCRIPT_ITEM", GetOwnScriptID());
    SetItemAutoDeleteClip(32, 256, 32, 64);
    SetDefaultBonusItemEnable(false);
    LoadItemData(GetCurrentScriptDirectory() ~ "/lib/dat_ItemData.dnh");
    Cancel_Init();
    Ascii_Init();
}

@MainLoop {yield;}

@Event {
    alternative (GetEventType())
    case (EV_DELETE_SHOT_TO_ITEM) { //triggered by clearing a boss spell, creates score text
        int obj = GetEventArgument(0);
        real[] pos = GetEventArgument(1);
        int score = Obj_GetValueDI(obj, SHOT_SCORE, 0); //assume all shots without an assigned score are no score

        //create item in place of bullet
        if (Obj_GetValueDI(obj, SHOT_DROP_ITEM, false)) NotifyEvent(GetOwnScriptID(), EV_CREATE_ITEM, pos[0], pos[1], ITEM_SCORE);
        //Text and delete effects
        if (Obj_GetType(obj) == OBJ_SHOT) {
            if (score != 0) Ascii_ScoreNum(pos[0], pos[1], score);
            Cancel_Shot(obj);
        } else if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) Cancel_Laser(obj);
        //score
        if (score == 0) score = 100; //minimum shot score
        AddScore(score);
    }
    case (EV_CREATE_ITEM) {
        int obj = CreateItemU1(GetEventArgument(2), GetEventArgument(0), GetEventArgument(1), 0);
        ObjMove_AddPatternB2(obj, 0, 0, -3.2, 0, 0.06, 0, 2.8);
        ObjItem_SetAutoCollectEnable(obj, false);
        ObjItem_SetRenderScoreEnable(obj, false);
    }
    case (EV_GET_ITEM) {
        int type = GetEventArgument(0);
        int obj = GetEventArgument(1);
        int score = 10;
        int color = COLOR_WHITE;

        alternative (type)
        case (ITEM_POW) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_SCORE) {
            AddPoint(1);
            if (ObjRender_GetY(obj) < 128) {
                score = 51200;
                color = COLOR_YELLOW_L;
            } else {
                score = 25600 - 25600*((ObjRender_GetY(obj) - 128)/GetStgFrameHeight());
                score -= score % 10; //cuts off last digit, rounds down
            }
            CallSFX(SND_ITEM);
        }
        case (ITEM_DREAM) {
            WriteLog("No Dream Bonus System");
            //PLAY SFX
        }
        case (ITEM_POW_L) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_POW_FULL) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_BOMB) {
            score = 1000;
            SetPlayerSpell(GetPlayerSpell() + 1);
            CallSFX(SND_EXTEND);
            ScrollText(false);
        }
        case (ITEM_EXTEND) {
            score = 1000;
            SetPlayerLife(GetPlayerLife() + 1);
            CallSFX(SND_EXTEND);
            ScrollText(true);
        }
        AddScore(score);
        Ascii_ScoreNum(ObjRender_GetX(obj), ObjRender_GetY(obj), score, color);
    }
}

function<void> ScrollText(bool isExtend_) { //life/bomb extend notification
    int objText = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objText, IMG_SYSTEM_UI);
    Obj_SetRenderPriorityI(objText, RP_STG_MAX);
    ObjRender_SetY(objText, isExtend_ ? 24 : 40); //32 + 8 accounts for setdestcenter

    if (isExtend_) ObjSprite2D_SetSourceRect(objText, 47, 432, 116, 448);
    else ObjSprite2D_SetSourceRect(objText, 0, 432, 116, 448);
    ObjSprite2D_SetDestCenter(objText);

    async {
        //move text
        for (int i = 39; i >= 0; i--) { 
            ObjRender_SetX(objText, MID_X + i * 8);
            yield;
        }
        //hold position
        loop (60) {
            yield;
        }
        //move text
        for (int i = 0; i < 40; i++) {
            ObjRender_SetX(objText, MID_X - i * 8);
            yield;
        }
        Obj_Delete(objText);
    }
}