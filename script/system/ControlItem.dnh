//Item Script, also handles shot deletion
#include "./lib/lib_SystemCommon.dnh"
#include "./lib/lib_AsciiNum.dnh"
#include "./../lib/effectlib/lib_EffectCancel.dnh"
//TODO adjust item score based on difficulty
@Initialize {
    System_Init();
    SetAreaCommonData(AREA_SYSTEM, "SCRIPT_ITEM", GetOwnScriptID());
    SetItemAutoDeleteClip(32, 256, 32, 64);
    SetDefaultBonusItemEnable(false);
    SetPlayerAutoItemCollectLine(-1);
    LoadItemData(GetCurrentScriptDirectory() ~ "/lib/dat_ItemData.dnh");
    Cancel_Init();
    Ascii_Init();
    TCheckScoreExtend();
}

@MainLoop { yield; }

@Event {
    alternative (GetEventType())
    case (EV_DELETE_SHOT_IMMEDIATE) { //triggered by player bomb/death
        int obj = GetEventArgument(0);
        float[] pos = GetEventArgument(1);
        int score = Obj_GetValueDI(obj, SHOT_SCORE, 0); //assume no score

        //Delete effects
        if (Obj_GetType(obj) == OBJ_SHOT) Cancel_Shot(obj);
        else if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) Cancel_Laser(obj);
        //score
        AddScore(score);
    }
    case (EV_DELETE_SHOT_TO_ITEM) { //triggered by clearing a boss spell, creates score text
        int obj = GetEventArgument(0);
        float[] pos = GetEventArgument(1);
        int score = Obj_GetValueDI(obj, SHOT_SCORE, 0); //assume all shots without an assigned score are no score

        //create item in place of bullet
        if (Obj_GetValueDI(obj, SHOT_DROP_ITEM, false)) NotifyEvent(GetOwnScriptID(), EV_CREATE_ITEM, pos[0], pos[1], ITEM_SCORE);
        //Text and delete effects
        if (Obj_GetType(obj) == OBJ_SHOT) {
            if (score != 0) Ascii_ScoreNum(pos[0], pos[1], score);
            Cancel_Shot(obj);
        } else if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) Cancel_Laser(obj);
        //score
        if (score == 0) score = 100; //minimum shot score
        AddScore(score);
    }
    case (EV_CREATE_ITEM) {
        int obj = CreateItemU1(GetEventArgument(2), GetEventArgument(0), GetEventArgument(1), 0);
        ObjMove_AddPatternB2(obj, 0, 0, -3.2, 0, 0.06, 0, 2.8);
        ObjItem_SetAutoCollectEnableFlags(obj, ITEM_AUTOCOLLECT_PLAYER_SCOPE | ITEM_AUTOCOLLECT_COLLECT_ALL);
        ObjItem_SetRenderScoreEnable(obj, false);
    }
    case (EV_COLLECT_ITEM) {
        int obj = GetEventArgument(0);
        int type = GetEventArgument(1);
        int colType = GetEventArgument(2);

        if (colType == 3) { //via collect all items through thrill gauge
            Obj_SetValueI(obj, ITEM_AUTOCOLLECT, true);
        }
    }
    case (EV_CANCEL_ITEM) {
        int obj = GetEventArgument(0);
        int type = GetEventArgument(1);
        int cancelType = GetEventArgument(2);

        Obj_SetValueI(obj, ITEM_AUTOCOLLECT, false); //cancel autocollect
    }
    case (EV_GET_ITEM) {
        int type = GetEventArgument(0);
        int obj = GetEventArgument(1);
        int score = 10;
        int color = COLOR_WHITE;

        alternative (type)
        case (ITEM_POW) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_SCORE) {
            SetPoint(GetPoint() + 1);
            if (ObjRender_GetY(obj) < 128 || Obj_GetValueDI(obj, ITEM_AUTOCOLLECT, false)) {
                score = 25600;
                color = COLOR_YELLOW_L;
            } else {
                score = 12800 - 12800*((ObjRender_GetY(obj) - 128)/GetStgFrameHeight());
                score -= score % 10; //cuts off last digit, rounds down
            }
            CallSFX(SND_ITEM);
        }
        case (ITEM_DREAM) {
            WriteLog("No Dream Bonus System");
            //PLAY SFX
        }
        case (ITEM_POW_L) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_POW_FULL) {
            WriteLog("No Power System");
            CallSFX(SND_ITEM);
        }
        case (ITEM_BOMB) {
            score = 1000;
            SetPlayerSpell(GetPlayerSpell() + 1);
            CallSFX(SND_EXTEND);
            System_CallBanner(BANNER_EXTEND_SPELL, 0);
        }
        case (ITEM_EXTEND) {
            score = 1000;
            SetPlayerLife(GetPlayerLife() + 1);
            CallSFX(SND_EXTEND);
            System_CallBanner(BANNER_EXTEND, 0);
        }
        AddScore(score);
        Ascii_ScoreNum(ObjRender_GetX(obj), ObjRender_GetY(obj), score, color);
    }
    case (EV_SCORE_EXTEND) {
        SetPlayerLife(GetPlayerLife() + 1);
        CallSFX(SND_EXTEND);
        System_CallBanner(BANNER_EXTEND, 0);
    }
}

task TCheckScoreExtend() {
    if (GetGameMode() == GAME_SPELL) return; //no score extends in spell practice
    while (GetScore() < 010_000_000) yield;
    NotifyEventOwn(EV_SCORE_EXTEND, 0);
    while (GetScore() < 020_000_000) yield;
    NotifyEventOwn(EV_SCORE_EXTEND, 0);
    while (GetScore() < 040_000_000) yield;
    NotifyEventOwn(EV_SCORE_EXTEND, 0);
    while (GetScore() < 080_000_000) yield;
    NotifyEventOwn(EV_SCORE_EXTEND, 0);
}