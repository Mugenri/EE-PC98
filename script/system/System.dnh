//System Script
#include "./lib/lib_SystemCommon.dnh"
#include "./lib/lib_AsciiNum.dnh"
#include "./lib/lib_Display.dnh"
#include "./../lib/lib_Spell.dnh"

@Initialize {
    InitFrame();
    System_Init();
    System_InitCommonData();
    Display_Init();
    Ascii_Init();
    Ascii_InitSpell();
    SetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", GetOwnScriptID());
    SetItemRenderPriorityI(RP_STG_ITEM);
	SetShotRenderPriorityI(RP_STG_SHOT);
    SetInvalidRenderPriorityA1(22, 26);

    SetPauseScriptPath(GetCurrentScriptDirectory() ~ "Pause.dnh");
    StartItemScript(GetCurrentScriptDirectory() ~ "ControlItem.dnh");
    StartShotScript(GetCurrentScriptDirectory() ~ "ControlShot.dnh");
}

@Event {
	alternative (GetEventType())
	case (EV_START_BOSS_SPELL) { //Spell_SetCurrent() should be used in the single to declare a spell
        int currentSpell = Spell_GetCurrent(); //current spell ID
        int currentStage = GetStageIndex(); //current stage index
        Spell_Seen(currentStage, currentSpell); //increment spell seen counter
        TSpellDisplay(currentStage, currentSpell); //spell display
	}
	case (EV_GAIN_SPELL) { //This returns the score value set in the single, not affected by time.
        int currentSpell = Spell_GetCurrent();
        int currentStage = GetStageIndex();
        Spell_Captured(currentStage, currentSpell);
        int score = NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_SINGLE", 0), EV_REQUEST_SPELL_SCORE, 0);
        score -= score % 10; //round to nearest 10
		TSpellBonus(score);
	}
    case (EV_CANCEL_BONUS) {
        int score = GetEventArgument(0);
        TCancelBonus(score);
    }
}

@MainLoop {
        _objScene = GetEnemyBossSceneObjectID();
        yield;
    }

//----------------------------------------------------
//Common Data
//----------------------------------------------------
function<void> System_InitCommonData() {
	if (IsReplay()) {
		LoadCommonDataAreaFromReplayFile(AREA_STAGE);
		LoadCommonDataAreaFromReplayFile(AREA_SYSTEM);
	} else {
		SaveCommonDataAreaToReplayFile(AREA_STAGE);
		SaveCommonDataAreaToReplayFile(AREA_SYSTEM);
	}
}