//STG window display setup library
//TODO #include high score library at some point

int _displayList; //UI display numbers/icons
int _scoreBonusList; //Spell bonus/cancel bonus numbers
bool _bonusIsReady = false; //used to sync the appearance of the spell bonus/cancel bonus effects

//----------------------------------------------------
//Initialize Display
//----------------------------------------------------
function<void> InitDisplay() {
    _displayList = InitParticleList(IMG_SYSTEM_UI, RP_UI_TEXT, 0, 0, 16, 16);
    ParticleListShader(_displayList, 16/256, 16/512);
    ObjSprite2D_SetDestRect(_displayList, 0, 0, 16, 16);
    _scoreBonusList = InitParticleList(IMG_SYSTEM_UI, RP_STG_MAX, 0, 0, 16, 16);
    ParticleListShader(_scoreBonusList, 16/256, 16/512);
    ObjSprite2D_SetDestRect(_scoreBonusList, 0, 0, 16, 16);
    TIntro();   
    Difficulty();
    THighScore();
    TScore();
    TBossLife();
    TBossTimer();
    TPlayerLife();
    TPlayerSpell();
    TGraze();
    TPointItem();
    if (!IsReplay()) TFPS();
    else TReplayFPS();
}

//----------------------------------------------------
//STG Frame Display
//----------------------------------------------------
function<void> InitFrame() {
	int obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_FRAME);
	Obj_SetRenderPriorityI(obj, RP_UI_BG);
	ObjSprite2D_SetSourceRect(obj, 0, 0, GetScreenWidth(), GetScreenHeight());
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth(), GetScreenHeight());
    SetStgFrame(32, 16, 416, 384, RP_STG_MIN, RP_STG_MAX);
}

//----------------------------------------------------
//Stage Fade in
//----------------------------------------------------
task TIntro() {
    int objBG = ObjPrim_Create(OBJ_SPRITE_2D); //black rectangle so the particle list doesn't have to be processed before it's animating
    ObjSprite2D_SetSourceRect(objBG, 0, 0, MAX_X, MAX_Y);
    ObjSprite2D_SetDestRect(objBG, 0, 0, MAX_X, MAX_Y);
    Obj_SetRenderPriorityI(objBG, RP_STG_MAX);
    ObjRender_SetColor(objBG, COLOR_BLACK);

    //Fade square particle list
    int objFade = InitParticleList(IMG_SYSTEM_UI, RP_STG_MAX, 0, 256, 16, 272);
    ObjParticleList_SetColor(objFade, COLOR_BLACK);

    int frames = 8; //number of animation frames

    int objLogo = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objLogo, IMG_SYSTEM_LOGO);
    ObjSprite2D_SetSourceRect(objLogo, 0, 0, 323, 108);
    ObjSprite2D_SetDestCenter(objLogo);
    Obj_SetRenderPriorityI(objLogo, RP_STG_MAX);
    ObjRender_SetPosition(objLogo, 192, 184, 1); //MID_Y constant doesnt work here for some reason, don't care enough to figure out why
    ObjRender_SetAlpha(objLogo, 0);

    //Stop player movement while screen is black
    SetForbidPlayerShot(true);
    SetForbidPlayerSpell(true);
    real[] tempSpeed = GetPlayerSpeed();
    SetPlayerSpeed(0, 0);

    wait(60);

    ascent (i in 1..4) {
        real alpha = 255/3 * i;
        ObjRender_SetAlpha(objLogo, alpha);
        wait(10);
    }
    wait(60);
    ascent (i in 1..4) {
        real alpha = 255 - (255/3 * i);
        ObjRender_SetAlpha(objLogo, alpha);
        wait(10);
    }
    Obj_Delete(objLogo);

    wait(10);

    //Transition begin event
    NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_STAGE", -1), EV_STAGE_INTRO_START, 0);

    //resume player movement when the transition begins
    SetForbidPlayerShot(false);
    SetForbidPlayerSpell(false);
    SetPlayerSpeed(tempSpeed[0], tempSpeed[1]);

    //delete black rectangle
    Obj_Delete(objBG);

    //intro animation (80 frames)
    int frame = 0;
    loop (frames) {
        ObjSprite2D_SetSourceRect(objFade, 112 - (frame * 16), 256, 128 - (frame * 16), 272); //animation is drawn right to left in the file
        ObjSprite2D_SetDestRect(objFade, 0, 0, 16, 16);
        loop (10) { //number of frames to hold each animation frame
            AddParticles();
            yield;
        }
        frame++;
    }
    
    Obj_Delete(objFade);

    NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_STAGE"), EV_STAGE_START, 0); //used by stage script to start plurals/dialogue

    function<void> AddParticles() { //creates matrix of black squares
        int x = 0;
        int y = 0;
        loop (23) { //vertical
            loop (24) { //horizontal
                ObjParticleList_SetPosition(objFade, x, y, 1);
                ObjParticleList_AddInstance(objFade);
                x += 16;
            }
            x = 0;
            y += 16;
        }
    }
}

//----------------------------------------------------
//Selected Difficulty Display
//----------------------------------------------------
function<void> Difficulty() {
    string[] texts = ["Easy", "Normal", "Hard", "Unreal", "Extra", "Ab-Ex"];
    int[] colors = [COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_RED, COLOR_WHITE];
    int diff = GetAreaCommonData(AREA_TITLE, "Difficulty", 0);
    int objText = ObjText_Create();
	ObjText_SetText(objText, texts[diff]);
	ObjText_SetFontSize(objText, 16);
    ObjText_SetFontType(objText, HEADER_FONT);
	ObjText_SetVertexColor(objText, 0xFF000000 + colors[diff]);
	ObjText_SetFontBorderType(objText, BORDER_NONE);
	Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
	ObjRender_SetPosition(objText, 448, 20, 1);
    ObjText_SetMaxWidth(objText, 128);
    ObjText_SetHorizontalAlignment(objText, ALIGNMENT_CENTER);
}

//----------------------------------------------------
//High Score Display
//----------------------------------------------------
task THighScore() { //TODO make this the actual high score
	//High Score Text
	int objScore = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objScore, IMG_SYSTEM_UI);
	ObjSprite2D_SetSourceRect(objScore, 0, 272, 53, 288);
    ObjSprite2D_SetDestRect(objScore, 0, 0, 53, 16);
    ObjRender_SetColor(objScore, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objScore, RP_UI_TEXT);
    ObjRender_SetPosition(objScore, 486, 48, 1);

	// Digits
	int count = 8;
    int scoreRender = 0;
    loop {
        int score = GetScore();
		score = min(score, 99999999);
		int[] numList = DigitToArray(scoreRender, count);

        for (int i = 0; i < count; i++) {
            ObjParticleList_SetPosition(_displayList, 448 + i * 16, 64, 1);
            ObjParticleList_SetExtraData(_displayList, numList[i], 1, 0);
            ObjParticleList_AddInstance(_displayList);
        }
        //Gradual increase of score counter
        if (scoreRender < score) {
            scoreRender += round((score - scoreRender)/10);
            if (score - scoreRender <= 10) scoreRender = score;
            scoreRender = min(scoreRender, score);
        }
        yield;
    }
}

//----------------------------------------------------
//Score Display
//----------------------------------------------------
task TScore() { //TODO add support for scores > 100_000_000
	//Score Text
	int objScore = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objScore, IMG_SYSTEM_UI);
	ObjSprite2D_SetSourceRect(objScore, 16, 272, 53, 288);
    ObjSprite2D_SetDestRect(objScore, 0, 0, 37, 16);
    ObjRender_SetColor(objScore, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objScore, RP_UI_TEXT);
    ObjRender_SetPosition(objScore, 493, 80, 1);

	// Digits
	int count = 8;
    int scoreRender = 0;
    loop {
        int score = GetScore();
		score = min(score, 99999999);
		int[] numList = DigitToArray(scoreRender, count);

        for (int i = 0; i < count; i++) {
            ObjParticleList_SetPosition(_displayList, 448 + i * 16, 96, 1);
            ObjParticleList_SetExtraData(_displayList, numList[i], 1, 0);
            ObjParticleList_AddInstance(_displayList);
        }
        //Gradual increase of score counter
        if (scoreRender < score) {
            scoreRender += round((score - scoreRender)/10);
            if (score - scoreRender <= 10) scoreRender = score;
            scoreRender = min(scoreRender, score);
        }
        yield;
    }
}

//----------------------------------------------------
//Bosss Life Display
//----------------------------------------------------
task TBossLife() {
    //Enemy!! text
    int objText = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objText, IMG_SYSTEM_UI);
    ObjSprite2D_SetSourceRect(objText, 0, 288, 48, 304);
    ObjSprite2D_SetDestRect(objText, 0, 0, 48, 16);
    ObjRender_SetColor(objText, COLOR_YELLOW);
    Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
    ObjRender_SetPosition(objText, 456, 129, 1);
    Obj_SetVisible(objText, false);

    //Lifebar
    int objLife = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 4, RP_UI_TEXT);
    ObjRender_SetPosition(objLife, 448, 148, 1);

    //Lifebar underline
    int objLine = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_UI_TEXT);
    ObjRender_SetPosition(objLine, 448, 156, 1);
    ObjPrim_SetVertexPosition(objLine, 0, 0, 0, 1);
    ObjPrim_SetVertexPosition(objLine, 1, 128, 0, 1);
    Obj_SetVisible(objLine, false);

    //lifebar heart icon
    int objIcon = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objIcon, IMG_SYSTEM_UI);
    ObjSprite2D_SetSourceRect(objIcon, 52, 339, 62, 348);
    ObjSprite2D_SetDestRect(objIcon, 0, 0, 10, 9);
    Obj_SetRenderPriorityI(objIcon, RP_UI_TEXT);
    ObjRender_SetPosition(objIcon, 567, 147, 1);
    Obj_SetVisible(objIcon, false);

    //Max Life Text
    int objMax = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objMax, IMG_SYSTEM_UI);
    ObjSprite2D_SetSourceRect(objMax, 0, 336, 52, 349);
    ObjSprite2D_SetDestRect(objMax, 0, 0, 52, 13);
    Obj_SetRenderPriorityI(objMax, RP_UI_TEXT);
    ObjRender_SetPosition(objMax, 526, 144, 1);
    Obj_SetVisible(objMax, false);

	int lastRemStep = -1;
	real lifeRateRender = 0;

	loop {
		_objScene = GetEnemyBossSceneObjectID();
		if (_objScene != ID_INVALID) RenderLife();
		yield;
	}


	function<void> RenderLife() {
        int[] bossID = GetEnemyBossObjectID();
        if (length(bossID) == 0) return;

		//Remaining Steps
		int countRemStep = ObjEnemyBossScene_GetInfo(_objScene, INFO_REMAIN_STEP_COUNT);
		if (lastRemStep != countRemStep) {
			//Step Change, refill boss bar
			lifeRateRender = 0;
		}

        //Remaining Step Display
        if (countRemStep > 4) {
            //icon
            ObjParticleList_SetPosition(_displayList, 512, 128, 1);
            ObjParticleList_SetExtraData(_displayList, 9, 17, 0);
            ObjParticleList_SetColor(_displayList, COLOR_INDIGO_L);
            ObjParticleList_AddInstance(_displayList);
            ObjParticleList_SetColor(_displayList, COLOR_WHITE);
            //x
            ObjParticleList_SetPosition(_displayList, 528, 128, 1);
            ObjParticleList_SetExtraData(_displayList, 10, 0, 0);
            ObjParticleList_AddInstance(_displayList);
            //num
            int tempStep = clamp(countRemStep, 0, 9);
            ObjParticleList_SetPosition(_displayList, 560, 128, 1);
            ObjParticleList_SetExtraData(_displayList, tempStep, 1, 0);
            ObjParticleList_AddInstance(_displayList);
        } else {
            for (int i = 0; i < countRemStep; i++) {
                ObjParticleList_SetPosition(_displayList, 496 + 4 * 16 - i * 16, 128, 1);
                ObjParticleList_SetExtraData(_displayList, 9, 17, 0);
                ObjParticleList_SetColor(_displayList, COLOR_INDIGO_L);
                ObjParticleList_AddInstance(_displayList);
                ObjParticleList_SetColor(_displayList, COLOR_WHITE);
            }
        }

		//Life Display
		real lifeTotalMax = ObjEnemyBossScene_GetInfo(_objScene, INFO_ACTIVE_STEP_TOTAL_MAX_LIFE); //step max health
		real lifeTotal = round(ObjEnemyBossScene_GetInfo(_objScene, INFO_ACTIVE_STEP_TOTAL_LIFE)); //step current health (rounded because of how invincibility is handled)
		real lifeRatio = min(lifeTotal / lifeTotalMax, lifeRateRender); //display the lower of the two
		ObjPrim_SetVertexPosition(objLife, 0, 0, 0, 1);
        ObjPrim_SetVertexPosition(objLife, 1, 0, 8, 1);
        ObjPrim_SetVertexPosition(objLife, 2, 128 * lifeRatio, 0, 1);
        ObjPrim_SetVertexPosition(objLife, 3, 128 * lifeRatio, 8, 1);

        //Max Text
        Obj_SetVisible(objMax, lifeRatio >= 1);

        //Life Color
        int color = COLOR_WHITE;
        if (lifeRatio <= 0.25) color = COLOR_RED;
        else if (lifeRatio <= 0.5) color = COLOR_MAGENTA_L;
        else if (lifeRatio <= 0.75) color = COLOR_TEAL;
        else if (lifeRatio < 1) color = COLOR_YELLOW;

        ascent (i in 0..4) ObjPrim_SetVertexColor(objLife, i, color);
        ascent (i in 0..2) ObjPrim_SetVertexColor(objLine, i, color);
        ObjRender_SetColor(objIcon, color);

        //attempt to increase health render bar until it reaches max
		lifeRateRender += 0.01;
		lifeRateRender = min(lifeRateRender, 1);
		lastRemStep = countRemStep;

        //if no boss present, hide Enemy!! text and life underline
        bool visible = lifeTotal > 0 || countRemStep != 0;
        Obj_SetVisible(objText, visible);
        Obj_SetVisible(objLine, visible);
        Obj_SetVisible(objIcon, visible);
	}
}

//----------------------------------------------------
//Timer Display
//----------------------------------------------------
task TBossTimer() {
    int obj = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_UI_TEXT);
    ObjRender_SetPosition(obj, 448, 162, 1);

    int icon = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(icon, IMG_SYSTEM_UI);
    ObjSprite2D_SetSourceRect(icon, 192, 336, 199, 343);
    ObjSprite2D_SetDestRect(icon, 0, 0, 7, 7);
    ObjRender_SetPosition(icon, 572, 158, 0);
    Obj_SetRenderPriorityI(icon, RP_UI_TEXT);
    Obj_SetVisible(icon, false);

	loop {
		_objScene = GetEnemyBossSceneObjectID();
		if (_objScene != ID_INVALID) RenderTimer();
		yield;
	}

	function<void> RenderTimer() {
		real timer = ObjEnemyBossScene_GetInfo(_objScene, INFO_TIMERF);
        real timerTotal = ObjEnemyBossScene_GetInfo(_objScene, INFO_ORGTIMERF);

        if (ObjEnemyBossScene_GetInfo(_objScene, INFO_CURRENT_LIFE) <= 0) timer = 0;

        ObjPrim_SetVertexPosition(obj, 0, 0, 0, 1);
        ObjPrim_SetVertexPosition(obj, 1, 128 * (timer/timerTotal) , 0, 1);
        ObjPrim_SetVertexColor(obj, 0, COLOR_WHITE);
        ObjPrim_SetVertexColor(obj, 1, COLOR_WHITE);

        //icon stuff
        ObjRender_SetPosition(icon, 445 + 128 * (timer/timerTotal), 158, 0);
        real lifeTotal = round(ObjEnemyBossScene_GetInfo(_objScene, INFO_ACTIVE_STEP_TOTAL_LIFE));
        int countRemStep = ObjEnemyBossScene_GetInfo(_objScene, INFO_REMAIN_STEP_COUNT);
        Obj_SetVisible(icon, lifeTotal > 0 || countRemStep != 0 && timer > 0);
	}
}

//----------------------------------------------------
//Player Lives Display
//----------------------------------------------------
task TPlayerLife() {
	//life Text
	int objText = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objText, IMG_SYSTEM_UI);
	ObjSprite2D_SetSourceRect(objText, 0, 306, 32, 320);
    ObjSprite2D_SetDestRect(objText, 0, 0, 32, 14);
    ObjRender_SetColor(objText, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
    ObjRender_SetPosition(objText, 456, 178, 1);

    loop {
        int lives = GetPlayerLife();
        lives = clamp(lives, 0, 9);

        if (lives > 5) {
            //icon
            ObjParticleList_SetPosition(_displayList, 512, 177, 1);
            ObjParticleList_SetExtraData(_displayList, 8, 17, 0);
            ObjParticleList_SetColor(_displayList, COLOR_RED_L);
            ObjParticleList_AddInstance(_displayList);
            ObjParticleList_SetColor(_displayList, COLOR_WHITE);
            //x
            ObjParticleList_SetPosition(_displayList, 528, 177, 1);
            ObjParticleList_SetExtraData(_displayList, 10, 0, 0);
            ObjParticleList_AddInstance(_displayList);
            //num
            ObjParticleList_SetPosition(_displayList, 560, 177, 1);
            ObjParticleList_SetExtraData(_displayList, lives, 1, 0);
            ObjParticleList_AddInstance(_displayList);
        } else {
            //icons
            for (int i = 0; i < lives; i++) {
                ObjParticleList_SetPosition(_displayList, 496 + i * 16, 177, 1);
                ObjParticleList_SetExtraData(_displayList, 8, 17, 0);
                ObjParticleList_SetColor(_displayList, COLOR_RED_L);
                ObjParticleList_AddInstance(_displayList);
                ObjParticleList_SetColor(_displayList, COLOR_WHITE);
            }
        }
        yield;
    }
}

//----------------------------------------------------
//Player Spell Display
//----------------------------------------------------
task TPlayerSpell() {
	//Spell Text
	int objText = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objText, IMG_SYSTEM_UI);
	ObjSprite2D_SetSourceRect(objText, 0, 322, 31, 335);
    ObjSprite2D_SetDestRect(objText, 0, 0, 31, 13);
    ObjRender_SetColor(objText, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
    ObjRender_SetPosition(objText, 456, 210, 1);

	loop {
        int spell = GetPlayerSpell();
        spell = clamp(spell, 0, 9);

        if (spell > 5) {
            //icon
            ObjParticleList_SetPosition(_displayList, 512, 209, 1);
            ObjParticleList_SetExtraData(_displayList, 7, 17, 0);
            ObjParticleList_SetColor(_displayList, COLOR_GREEN);
            ObjParticleList_AddInstance(_displayList);
            ObjParticleList_SetColor(_displayList, COLOR_WHITE);
            //x
            ObjParticleList_SetPosition(_displayList, 528, 209, 1);
            ObjParticleList_SetExtraData(_displayList, 10, 0, 0);
            ObjParticleList_AddInstance(_displayList);
            //num
            ObjParticleList_SetPosition(_displayList, 560, 209, 1);
            ObjParticleList_SetExtraData(_displayList, spell, 1, 0);
            ObjParticleList_AddInstance(_displayList);
        } else {
            //icons
            for (int i = 0; i < spell; i++) {
                ObjParticleList_SetPosition(_displayList, 496 + i * 16, 209, 1);
                ObjParticleList_SetExtraData(_displayList, 7, 17, 0);
                ObjParticleList_SetColor(_displayList, COLOR_GREEN);
                ObjParticleList_AddInstance(_displayList);
                ObjParticleList_SetColor(_displayList, COLOR_WHITE);
            }
        }
        yield;
    }
}

//----------------------------------------------------
//Graze Display
//----------------------------------------------------
task TGraze() {
	//Graze Text
	int objGraze = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objGraze, IMG_SYSTEM_UI);
	ObjSprite2D_SetSourceRect(objGraze, 64, 289, 96, 304);
    ObjSprite2D_SetDestRect(objGraze, 0, 0, 32, 15);
    ObjRender_SetColor(objGraze, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objGraze, RP_UI_TEXT);
    ObjRender_SetPosition(objGraze, 456, 242, 1);

	//Digits
	int maxCount = 4;
    loop {
        int graze = GetGraze();
        graze = min(graze, 9999);
        //length of digit
        int numLength = 0;
        int tempGraze = graze;
        while (tempGraze >= 1) {
            tempGraze /= 10;
            numLength++;
        }
        int[] numList = DigitToArray(graze, min(numLength, maxCount));
        //draws from right to left
        for (int i = 0; i < length(numList); i++) {
            int num = numList[length(numList) - i - 1];
            ObjParticleList_SetPosition(_displayList, 560 - i * 16, 242, 1);
            ObjParticleList_SetExtraData(_displayList, num, 1, 0);
            ObjParticleList_AddInstance(_displayList);
        }
        yield;
    }
}

//----------------------------------------------------
//Point Item Display
//----------------------------------------------------
task TPointItem() {
    int maxCount = 4;
    loop {
        //Icon
        ObjParticleList_SetPosition(_displayList, 464, 267, 1);
        ObjParticleList_SetExtraData(_displayList, 4, 17, 0);
        ObjParticleList_SetColor(_displayList, COLOR_YELLOW);
        ObjParticleList_AddInstance(_displayList);
        ObjParticleList_SetColor(_displayList, COLOR_WHITE);

        //Digits
        int point = GetPoint();
        point = min(point, 9999);
        //length of digit
        int numLength = 0;
        int tempPoint = point;
        while (tempPoint >= 1) {
            tempPoint /= 10;
            numLength++;
        }
        int[] numList = DigitToArray(point, min(numLength, maxCount));
        //draws from right to left
        for (int i = 0; i < length(numList); i++) {
            int num = numList[length(numList) - i - 1];
            ObjParticleList_SetPosition(_displayList, 560 - i * 16, 267, 1);
            ObjParticleList_SetExtraData(_displayList, num, 1, 0);
            ObjParticleList_AddInstance(_displayList);
        }
        yield;
    }
}

//----------------------------------------------------
//Spell Bonus Display
//----------------------------------------------------
task TSpellBonus(int score_) {
    while (!_bonusIsReady) yield; //has to yield until bonusReady for multiple things (ascii score text position esp.)
    _bonusIsReady = false; 
    AddScore(score_);
    //Ascii numbers around boss
    int tempScore = score_;
    real[] pos = GetAreaCommonData(AREA_STAGE, "Pos_Bonus", [0, 0]);
    while (tempScore > 10000) {
        AsciiScoreNum(pos[0] + prand_int(-64, 64), pos[1] + prand_int(-64, 64), 10000, COLOR_YELLOW);
        tempScore -= 10000;
    }
    if (tempScore > 0) AsciiScoreNum(pos[0] + prand_int(-64, 64), pos[1] + prand_int(-64, 64), tempScore, COLOR_YELLOW);

    //Spell Bonus Text
    int objText = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objText, IMG_SYSTEM_UI);
    ObjSprite2D_SetSourceRect(objText, 39, 368, 148, 384);
    ObjSprite2D_SetDestRect(objText, 0, 0, 109, 16);
    Obj_SetRenderPriorityI(objText, RP_STG_MAX);
    ObjRender_SetY(objText, 32);

    //get length of score number
    int numLength = 0;
    tempScore = score_;
    while (tempScore >= 10) {
        tempScore /= 10;
        numLength++;
    }
    int[] numList = DigitToArray(score_, min(numLength, 9));

    //move text
    for (int i = 39; i >= 0; i--) { 
        ObjRender_SetX(objText, (97 + i * 8) - 47); //align with cancel bonus text
        yield;
    }
    //hold position
    loop (120) {
        UpdateList(304);
        yield;
    }
    //move text
    for (int i = 0; i < 40; i++) {
        ObjRender_SetX(objText, (97 - i * 8) - 47);
        UpdateList(304 + i * 8);
        yield;
    }
    Obj_Delete(objText);

    function<void> UpdateList(int x_) {
        //draws from right to left
        for (int i = 0; i < length(numList); i++) {
            int num = numList[length(numList) - i - 1];
            ObjParticleList_SetPosition(_scoreBonusList, x_ - i * 16, 32, 1);
            ObjParticleList_SetExtraData(_scoreBonusList, num, 1, 0);
            ObjParticleList_AddInstance(_scoreBonusList);
        }
    }
}

//----------------------------------------------------
//Bullet Cancel Score Total Display
//----------------------------------------------------
task TCancelBonus(int score_) {
    _bonusIsReady = true;
    if (ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_DURABLE_SPELL) && score_ != -1) return; //no shot cancel bonus on survival spells (still need bonus fail text)
    //Bonus!! Text
    int objText = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objText, IMG_SYSTEM_UI);
    ObjSprite2D_SetSourceRect(objText, 65, 352, 127, 368);
    ObjSprite2D_SetDestRect(objText, 0, 0, 62, 16);
    Obj_SetRenderPriorityI(objText, RP_STG_MAX);
    ObjRender_SetY(objText, 16);
    //Bonus fail text & no score
    if (score_ == -1) {
        ObjSprite2D_SetSourceRect(objText, 0, 384, 127, 400);
        ObjSprite2D_SetDestRect(objText, 0, 0, 127, 16);
    }
    
    //get length of score number
    int numLength = score_ == -1 ? 0 : 1;
    int tempScore = score_;
    while (tempScore >= 10) {
        tempScore /= 10;
        numLength++;
    }
    int[] numList = [];
    if (numLength > 0) numList = DigitToArray(score_, min(numLength, 9));

    //move text
    for (int i = 39; i >= 0; i--) { 
        ObjRender_SetX(objText, 97 + i * 8);
        yield;
    }
    //hold position
    loop (120) {
        UpdateList(304);
        yield;
    }
    //move text
    for (int i = 0; i < 40; i++) {
        ObjRender_SetX(objText, 97 - i * 8);
        UpdateList(304 + i * 8);
        yield;
    }
    Obj_Delete(objText);

    function<void> UpdateList(int x_) {
        //draws from right to left
        for (int i = 0; i < length(numList); i++) {
            int num = numList[length(numList) - i - 1];
            ObjParticleList_SetPosition(_scoreBonusList, x_ - i * 16, 16, 1);
            ObjParticleList_SetExtraData(_scoreBonusList, num, 1, 0);
            ObjParticleList_AddInstance(_scoreBonusList);
        }
    }
}

//----------------------------------------------------
//FPS Display
//----------------------------------------------------
task TFPS() {
	int objText = ObjText_Create();
	ObjText_SetFontSize(objText, 16);
	ObjText_SetFontType(objText, SYS_FONT);
	ObjText_SetVertexColor(objText, 0xFF000000 + COLOR_WHITE);
	ObjText_SetHorizontalAlignment(objText, ALIGNMENT_RIGHT);
	ObjText_SetMaxWidth(objText, GetScreenWidth() - 8);
	Obj_SetRenderPriorityI(objText, RP_UI_MAX);
	ObjRender_SetX(objText, 0);
	ObjRender_SetY(objText, GetScreenHeight() - 20);

	loop {
		real fps = GetCurrentFps();
		string text = vtos("1.2f", fps) ~ "fps";
		ObjText_SetText(objText, text);
		yield;
	}
}

task TReplayFPS() {
	if (!IsReplay()) return;

	int objText = ObjText_Create();
	ObjText_SetFontSize(objText, 12);
	ObjText_SetFontBold(objText, true);
	ObjText_SetVertexColor(objText, 0xFF000000 + COLOR_WHITE);
	ObjText_SetFontBorderType(objText, BORDER_FULL);
	ObjText_SetFontBorderColor(objText, 255, 255, 255);
	ObjText_SetFontBorderWidth(objText, 1);
	Obj_SetRenderPriorityI(objText, RP_UI_MAX);

	int px = GetStgFrameLeft() + GetStgFrameWidth() - 18;
	int py = GetStgFrameTop() + GetScreenHeight() - 14;
	ObjRender_SetX(objText, px);
	ObjRender_SetY(objText, py);

	loop {
		real fps = GetReplayFps();
		string text = vtos("02d", fps);
		ObjText_SetText(objText, text);
		yield;
	}
}