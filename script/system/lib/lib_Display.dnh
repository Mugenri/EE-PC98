//STG window display setup library
//TODO #include high score library at some point

//----------------------------------------------------
//STG Frame Display
//----------------------------------------------------
function<void> InitFrame() {
	int obj = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_FRAME);
	Obj_SetRenderPriorityI(obj, RP_UI_BG);
	ObjSprite2D_SetSourceRect(obj, 0, 0, GetScreenWidth(), GetScreenHeight());
	ObjSprite2D_SetDestRect(obj, 0, 0, GetScreenWidth(), GetScreenHeight());
    SetStgFrame(32, 16, 416, 384, 20, 80);
}

//----------------------------------------------------
//Stage Fade in
//----------------------------------------------------
task TIntro() {
    int objBG = ObjPrim_Create(OBJ_SPRITE_2D); //black rectangle so the particle list doesn't have to be processed before it's animating
    ObjSprite2D_SetSourceRect(objBG, 0, 0, 384, 368);
    ObjSprite2D_SetDestRect(objBG, 0, 0, 384, 368);
    Obj_SetRenderPriorityI(objBG, RP_STG_MAX);
    ObjRender_SetColor(objBG, COLOR_BLACK);

    //Fade square particle list
    int objFade = InitParticleList(IMG_SYSTEM_FADE, RP_STG_MAX, 0, 16, 16, 32);
    ObjParticleList_SetColor(objFade, COLOR_BLACK);

    int frames = 9; //number of animation frames

    //TODO Game logo when i get it
    int objLogo = ObjPrim_Create(OBJ_SPRITE_2D);
    Obj_SetRenderPriorityI(objLogo, RP_STG_MAX);
    ObjSprite2D_SetDestRect(objLogo, -40, -40, 40, 40);
    ObjRender_SetPosition(objLogo, MID_X, MID_Y - 40, 1);
    ObjRender_SetAlpha(objLogo, 0);

    //Stop player movement while screen is black
    SetForbidPlayerShot(true);
    SetForbidPlayerSpell(true);
    real[] tempSpeed = GetPlayerSpeed();
    SetPlayerSpeed(0, 0);

    wait(60);

    ascent (i in 1..4) {
        real alpha = 255/3 * i;
        ObjRender_SetAlpha(objLogo, alpha);
        wait(10);
    }
    wait(60);
    ascent (i in 1..4) {
        real alpha = 255 - (255/3 * i);
        ObjRender_SetAlpha(objLogo, alpha);
        wait(10);
    }
    Obj_Delete(objLogo);

    wait(10);

    //Transition begin event
    NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_STAGE", -1), EV_STAGE_INTRO_START, 0);

    //resume player movement when the transition begins
    SetForbidPlayerShot(false);
    SetForbidPlayerSpell(false);
    SetPlayerSpeed(tempSpeed[0], tempSpeed[1]);

    //delete black rectangle
    Obj_Delete(objBG);

    //intro animation
    int frame = 0;
    loop (frames) {
        ObjSprite2D_SetSourceRect(objFade, 0 + (frame * 16), 16, 16 + (frame * 16), 32);
        ObjSprite2D_SetDestRect(objFade, 0, 0, 16, 16);
        loop (10) { //number of frames to hold each animation frame
            AddParticles();
            yield;
        }
        frame++;
    }
    
    Obj_Delete(objFade);

    wait(30);

    NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_STAGE"), EV_START_STAGE, 0); //used by stage script

    function<void> AddParticles() { //creates matrix of black squares
        int x = 0;
        int y = 0;
        loop (23) { //vertical
            loop (24) { //horizontal
                ObjParticleList_SetPosition(objFade, x, y, 1);
                ObjParticleList_AddInstance(objFade);
                x += 16;
            }
            x = 0;
            y += 16;
        }
    }
}

//----------------------------------------------------
//Selected Difficulty Display
//----------------------------------------------------
function<void> Difficulty() {
    string[] texts = ["Easy", "Normal", "Hard", "Unreal", "Extra", "Ab-Ex"];
    int[] colors = [COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_RED, COLOR_WHITE];
    int diff = GetAreaCommonData(AREA_TITLE, "Difficulty", 0);
    int objText = ObjText_Create();
	ObjText_SetText(objText, texts[diff]);
	ObjText_SetFontSize(objText, 16);
    ObjText_SetFontType(objText, HEADER_FONT);
	ObjText_SetVertexColor(objText, 0xFF000000 + colors[diff]);
	ObjText_SetFontBorderType(objText, BORDER_NONE);
	Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
	ObjRender_SetPosition(objText, 420, 20, 1);
    ObjText_SetMaxWidth(objText, 186);
    ObjText_SetHorizontalAlignment(objText, ALIGNMENT_CENTER);
}

//----------------------------------------------------
//High Score Display
//----------------------------------------------------
task THighScore() { //TODO make this the actual high score
	//High Score Text
	int objScore = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objScore, IMG_SYSTEM_TEXT);
	ObjSprite2D_SetSourceRect(objScore, 0, 272, 53, 288);
    ObjSprite2D_SetDestRect(objScore, 0, 0, 53, 16);
    ObjRender_SetColor(objScore, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objScore, RP_UI_TEXT);
    ObjRender_SetPosition(objScore, 480, 48, 1);

	// Digits
	int count = 8;

	int obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_TEXT);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, RP_UI_TEXT);
	ObjRender_SetY(obj, 64);

    int scoreRender = 0;
	while (true) {
		int score = GetScore();
		score = min(score, 99999999);
		int[] listNum = DigitToArray(scoreRender, count);

		ObjSpriteList2D_ClearVertexCount(obj);
		ascent (i in 0..count) {
			int num = listNum[i];
			ObjRender_SetX(obj, 448 + i * 16);
			ObjSpriteList2D_SetSourceRect(obj, num * 16, 16, (num + 1) * 16, 32);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
			ObjSpriteList2D_AddVertex(obj);
		}
        //Gradual increase of score counter
        if (scoreRender < score) {
            scoreRender += round((score - scoreRender)/10);
            if (score - scoreRender <= 10) scoreRender = score;
            scoreRender = min(scoreRender, score);
        }
		yield;
	}
}

//----------------------------------------------------
//Score Display
//----------------------------------------------------
task TScore() {
	//Score Text
	int objScore = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objScore, IMG_SYSTEM_TEXT);
	ObjSprite2D_SetSourceRect(objScore, 16, 272, 53, 288);
    ObjSprite2D_SetDestRect(objScore, 0, 0, 37, 16);
    ObjRender_SetColor(objScore, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objScore, RP_UI_TEXT);
    ObjRender_SetPosition(objScore, 488, 80, 1);

	//Digits
	int count = 8;

	int obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_TEXT);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, RP_UI_TEXT);
	ObjRender_SetY(obj, 96);

    int scoreRender = 0;
	while (true) {
		int score = GetScore();
		score = min(score, 99999999);
		int[] listNum = DigitToArray(scoreRender, count);

		ObjSpriteList2D_ClearVertexCount(obj);
		ascent (iObj in 0 .. count) {
			int num = listNum[iObj];
			ObjRender_SetX(obj, 448 + iObj * 16);
			ObjSpriteList2D_SetSourceRect(obj, num * 16, 16, (num + 1) * 16, 32);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
			ObjSpriteList2D_AddVertex(obj);
		}
        //Gradual increase of score counter
        if (scoreRender < score) {
            scoreRender += round((score - scoreRender)/10);
            if (score - scoreRender <= 10) scoreRender = score;
            scoreRender = min(scoreRender, score);
        }
		yield;
	}
}

//----------------------------------------------------
//Bosss Life Display
//----------------------------------------------------
task TBossLife() {
    //Enemy!! text
    int objText = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objText, IMG_SYSTEM_TEXT);
    ObjRender_SetBlendType(objText, BLEND_ALPHA);
    ObjSprite2D_SetSourceRect(objText, 0, 289, 46, 305);
    ObjSprite2D_SetDestRect(objText, 0, 0, 46, 16);
    ObjRender_SetColor(objText, COLOR_YELLOW);
    Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
    ObjRender_SetPosition(objText, 456, 129, 1);
    Obj_SetVisible(objText, false);

    //Lifebar
	int objLife = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(objLife, PRIMITIVE_TRIANGLESTRIP);
    ObjRender_SetBlendType(objLife, BLEND_ALPHA);
	Obj_SetRenderPriorityI(objLife, RP_UI_TEXT);
    ObjPrim_SetVertexCount(objLife, 4);
    ObjRender_SetPosition(objLife, 448, 148, 1);

    //Max Text
    int maxText = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(maxText, IMG_SYSTEM_TEXT);
    ObjRender_SetBlendType(maxText, BLEND_ALPHA);
    ObjSprite2D_SetSourceRect(maxText, 16, 337, 64, 348);
    ObjSprite2D_SetDestRect(maxText, 0, 0, 48, 11);
    Obj_SetRenderPriorityI(maxText, RP_UI_TEXT);
    ObjRender_SetPosition(maxText, 529, 145, 1);
    Obj_SetVisible(maxText, false);

    //Boss Step Counter
    int objStep = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(objStep, IMG_SYSTEM_TEXT);
	ObjRender_SetBlendType(objStep, BLEND_ALPHA);
	Obj_SetRenderPriorityI(objStep, RP_UI_TEXT);
	ObjRender_SetY(objStep, 128);

	int lastRemStep = -1;
	real lifeRateRender = 0;

	loop {
		_objScene = GetEnemyBossSceneObjectID();
		if (_objScene != ID_INVALID) RenderLife();
		yield;
	}


	function<void> RenderLife() {
        int[] bossID = GetEnemyBossObjectID();
        if (length(bossID) == 0) return;

		//Remaining Steps
		int countRemStep = ObjEnemyBossScene_GetInfo(_objScene, INFO_REMAIN_STEP_COUNT);
		if (lastRemStep != countRemStep) {
			//Step Change, refill boss bar
			lifeRateRender = 0;
		}

        //Remaining Step Display
		ObjSpriteList2D_ClearVertexCount(objStep);
        if (countRemStep > 4) { //display remaining steps
            //icon
            ObjRender_SetX(objStep, 496 + 1 * 16);
            ObjSpriteList2D_SetSourceRect(objStep, 160, 272, 176, 288);
            ObjSpriteList2D_SetDestRect(objStep, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(objStep);
            //x
            ObjRender_SetX(objStep, 496 + 2 * 16);
            ObjSpriteList2D_SetSourceRect(objStep, 160, 0, 176, 16);
            ObjSpriteList2D_SetDestRect(objStep, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(objStep);
            //num
            int tempStep = clamp(countRemStep, 0, 9);
            ObjRender_SetX(objStep, 496 + 4 * 16);
            ObjSpriteList2D_SetSourceRect(objStep, countRemStep * 16, 16, (countRemStep + 1) * 16, 32);
            ObjSpriteList2D_SetDestRect(objStep, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(objStep);
        } else {
            ascent (i in 0..countRemStep) {
                ObjRender_SetX(objStep, 496 + 4 * 16 - i * 16);
                ObjSpriteList2D_SetSourceRect(objStep, 160, 272, 176, 288);
                ObjSpriteList2D_SetDestRect(objStep, 0, 0, 16, 16);
                ObjSpriteList2D_AddVertex(objStep);
            }
        }

		//Life Display
		real lifeTotalMax = ObjEnemyBossScene_GetInfo(_objScene, INFO_ACTIVE_STEP_TOTAL_MAX_LIFE); //step max health
		real lifeTotal = ObjEnemyBossScene_GetInfo(_objScene, INFO_ACTIVE_STEP_TOTAL_LIFE); //step current health
		real lifeRatio = min(lifeTotal / lifeTotalMax, lifeRateRender); //display the lower of the two
		ObjPrim_SetVertexPosition(objLife, 0, 0, 0, 1);
        ObjPrim_SetVertexPosition(objLife, 1, 0, 8, 1);
        ObjPrim_SetVertexPosition(objLife, 2, 129 * lifeRatio, 0, 1);
        ObjPrim_SetVertexPosition(objLife, 3, 129 * lifeRatio, 8, 1);

        //Max Text
        Obj_SetVisible(maxText, lifeRatio >= 1);

        //Life Color
        int color = COLOR_WHITE;
        if (lifeRatio <= 0.25) color = COLOR_RED;
        else if (lifeRatio <= 0.5) color = COLOR_MAGENTA_L;
        else if (lifeRatio <= 0.75) color = COLOR_TEAL;
        else if (lifeRatio < 1) color = COLOR_YELLOW;

        ascent (i in 0..4) ObjPrim_SetVertexColor(objLife, i, color);

        //attempt to increase health render bar until it reaches max
		lifeRateRender += 0.01;
		lifeRateRender = min(lifeRateRender, 1);
		lastRemStep = countRemStep;

        //if no boss present, hide Enemy!! text
        Obj_SetVisible(objText, lifeTotal > 0 || countRemStep != 0);
	}
}

//----------------------------------------------------
//Timer Display
//----------------------------------------------------
task TBossTimer() {
	int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(obj, PRIMITIVE_LINESTRIP);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, RP_UI_TEXT);
    ObjPrim_SetVertexCount(obj, 2);
    ObjRender_SetPosition(obj, 448, 159, 1);

	loop {
		_objScene = GetEnemyBossSceneObjectID();
		if (_objScene != ID_INVALID) RenderTimer();
		yield;
	}

	function<void> RenderTimer() {
		real timer = ObjEnemyBossScene_GetInfo(_objScene, INFO_TIMERF);
        real timerTotal = ObjEnemyBossScene_GetInfo(_objScene, INFO_ORGTIMERF);

        if (ObjEnemyBossScene_GetInfo(_objScene, INFO_CURRENT_LIFE) <= 0) timer = 0;

        ObjPrim_SetVertexPosition(obj, 0, 0, 0, 1);
        ObjPrim_SetVertexPosition(obj, 1, 129 * (timer/timerTotal) , 0, 1);
        ObjPrim_SetVertexColor(obj, 0, COLOR_WHITE);
        ObjPrim_SetVertexColor(obj, 1, COLOR_WHITE);

	}
}

//----------------------------------------------------
//Player Lives Display
//----------------------------------------------------
task TPlayerLife() {
	//life Text
	int objText = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objText, IMG_SYSTEM_TEXT);
    ObjRender_SetBlendType(objText, BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(objText, 0, 306, 32, 320);
    ObjSprite2D_SetDestRect(objText, 0, 0, 32, 14);
    ObjRender_SetColor(objText, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
    ObjRender_SetPosition(objText, 456, 178, 1);

	//Amount
	int obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_TEXT);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, RP_UI_TEXT);
	ObjRender_SetY(obj, 177);

	while (true) {
		int lives = GetPlayerLife();
        lives = clamp(lives, 0, 9);

		ObjSpriteList2D_ClearVertexCount(obj);
        if (lives > 5) { //lives x num
            //x
            ObjRender_SetX(obj, 496 + 2 * 16);
            ObjSpriteList2D_SetSourceRect(obj, 160, 0, 176, 16);
            ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(obj);
            //num
            ObjRender_SetX(obj, 496 + 4 * 16);
            ObjSpriteList2D_SetSourceRect(obj, lives * 16, 16, (lives + 1) * 16, 32);
            ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(obj);
        } else { //life icons
            ascent (i in 0..lives) {
                ObjRender_SetX(obj, 496 + i * 16);
                ObjSpriteList2D_SetSourceRect(obj, 97, 272, 113, 288);
                ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
                ObjSpriteList2D_AddVertex(obj);
            }
        }
		yield;
	}
}

//----------------------------------------------------
//Player Spell Display
//----------------------------------------------------
task TPlayerSpell() {
	//Spell Text
	int objText = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objText, IMG_SYSTEM_TEXT);
    ObjRender_SetBlendType(objText, BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(objText, 0, 322, 31, 335);
    ObjSprite2D_SetDestRect(objText, 0, 0, 31, 13);
    ObjRender_SetColor(objText, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objText, RP_UI_TEXT);
    ObjRender_SetPosition(objText, 456, 210, 1);

	//Amount
	int obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_TEXT);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, RP_UI_TEXT);
	ObjRender_SetY(obj, 210);

	while (true) {
		int spell = GetPlayerSpell();
        spell  = clamp(spell, 0, 9);

		ObjSpriteList2D_ClearVertexCount(obj);
        if (spell > 5) { //spell x num
            //x
            ObjRender_SetX(obj, 496 + 2 * 16);
            ObjSpriteList2D_SetSourceRect(obj, 160, 0, 176, 16);
            ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(obj);
            //num
            ObjRender_SetX(obj, 496 + 4 * 16);
            ObjSpriteList2D_SetSourceRect(obj, spell * 16, 16, (spell + 1) * 16, 32);
            ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
            ObjSpriteList2D_AddVertex(obj);
        } else { //spell icons
            ascent (i in 0..spell) {
                ObjRender_SetX(obj, 496 + i * 16);
                ObjSpriteList2D_SetSourceRect(obj, 81, 272, 97, 288);
                ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
                ObjSpriteList2D_AddVertex(obj);
            }
        }
		yield;
	}
}

//----------------------------------------------------
//Graze Display
//----------------------------------------------------
task TGraze() {
	//Graze Text
	int objGraze = ObjPrim_Create(OBJ_SPRITE_2D);
	ObjPrim_SetTexture(objGraze, IMG_SYSTEM_TEXT);
    ObjRender_SetBlendType(objGraze, BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(objGraze, 64, 289, 96, 304);
    ObjSprite2D_SetDestRect(objGraze, 0, 0, 32, 15);
    ObjRender_SetColor(objGraze, COLOR_YELLOW);
	Obj_SetRenderPriorityI(objGraze, RP_UI_TEXT);
    ObjRender_SetPosition(objGraze, 456, 242, 1);

	//Digits
	int count = 4;

	int obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
	ObjPrim_SetTexture(obj, IMG_SYSTEM_TEXT);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	Obj_SetRenderPriorityI(obj, RP_UI_TEXT);
	ObjRender_SetY(obj, 242);

	while (true) {
		int graze = GetGraze();
		graze = min(graze, 9999);
		int[] listNum = DigitToArray(graze, count);

		ObjSpriteList2D_ClearVertexCount(obj);
		ascent (iObj in 0 .. count) {
			int num = listNum[iObj];
			ObjRender_SetX(obj, 496 + iObj * 16);
			ObjSpriteList2D_SetSourceRect(obj, num * 16, 16, (num + 1) * 16, 32);
			ObjSpriteList2D_SetDestRect(obj, 0, 0, 16, 16);
			ObjSpriteList2D_AddVertex(obj);
		}
		yield;
	}
}

//----------------------------------------------------
//Spell Aquisition Display
//----------------------------------------------------
task TGainSpell(int score_) { //TODO refactor/change this
	int objText = ObjText_Create();
	ObjText_SetText(objText, "Spell Card Bonus!");
	ObjText_SetFontSize(objText, 16);
    ObjText_SetFontType(objText, SYS_FONT);
	ObjText_SetVertexColor(objText, 0xFF000000 + COLOR_WHITE);
	ObjText_SetFontBorderType(objText, BORDER_NONE);
	Obj_SetRenderPriorityI(objText, RP_STG_TEXT);
	ObjRender_SetX(objText, 32);
	ObjRender_SetY(objText, 98);

	string strScore = "+" ~ IntToString(score_);
	int objScore = ObjText_Create();
	ObjText_SetText(objScore, strScore);
	ObjText_SetFontSize(objScore, 32);
	ObjText_SetFontBold(objScore, true);
	ObjText_SetVertexColor(objText, 0xFF000000 + COLOR_WHITE);
	ObjText_SetFontBorderType(objScore, BORDER_NONE);
	Obj_SetRenderPriorityI(objScore, RP_STG_TEXT);
	ObjRender_SetX(objScore, 180);
	ObjRender_SetY(objScore, 140);

	wait(120);
	Obj_Delete(objText);
	Obj_Delete(objScore);
}

//----------------------------------------------------
//FPS Display
//----------------------------------------------------
task TFPS() {
	int objText = ObjText_Create();
	ObjText_SetFontSize(objText, 16);
	ObjText_SetFontType(objText, SYS_FONT);
	ObjText_SetVertexColor(objText, 0xFF000000 + COLOR_WHITE);
	ObjText_SetHorizontalAlignment(objText, ALIGNMENT_RIGHT);
	ObjText_SetMaxWidth(objText, GetScreenWidth() - 8);
	Obj_SetRenderPriorityI(objText, RP_UI_MAX);
	ObjRender_SetX(objText, 0);
	ObjRender_SetY(objText, GetScreenHeight() - 20);

	loop {
		real fps = GetCurrentFps();
		string text = vtos("1.2f", fps) ~ "fps";
		ObjText_SetText(objText, text);
		yield;
	}
}

task TReplayFPS() {
	if (!IsReplay()) return;

	int objText = ObjText_Create();
	ObjText_SetFontSize(objText, 12);
	ObjText_SetFontBold(objText, true);
	ObjText_SetVertexColor(objText, 0xFF000000 + COLOR_WHITE);
	ObjText_SetFontBorderType(objText, BORDER_FULL);
	ObjText_SetFontBorderColor(objText, 255, 255, 255);
	ObjText_SetFontBorderWidth(objText, 1);
	Obj_SetRenderPriorityI(objText, RP_UI_MAX);

	int px = GetStgFrameLeft() + GetStgFrameWidth() - 18;
	int py = GetStgFrameTop() + GetScreenHeight() - 14;
	ObjRender_SetX(objText, px);
	ObjRender_SetY(objText, py);

	loop {
		real fps = GetReplayFps();
		string text = vtos("02d", fps);
		ObjText_SetText(objText, text);
		yield;
	}
}