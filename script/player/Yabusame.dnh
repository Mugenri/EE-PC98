#TouhouDanmakufu[Player]
#ScriptVersion[3]
#Title["Yabusame Houren"]
#ID["Yabusame"]
#Text["Flawless Thoughtlessness"]
#ReplayName["Yabusame"]

#include "./lib/lib_player.dnh"

int _count = 0; //shot type spread effect
int _countShot = 0; //shot type stagger

@Initialize {
    string imageFile = IMG_PLR_YABUSAME;
    string shotData = DIR_PLR ~ "YabuShot.dnh";
    InitPlayer(imageFile, shotData, 3, 1.53, 16, 64);

    TShot();
    TOption(1);
    TOption(-1);
}

@MainLoop {
    _count++;
    if (Shooting() && !IsPlayerSpellActive() && Alive()) _countShot++;
    else _countShot = -1;
    if (Alive()) SetPlayerItemScope(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD ? _focusScope : _itemScope);
    yield;
}

@Event { PlayerEvent(); }

@Finalize {}

task TShot() {
    loop {
        if (Shooting() && !IsPlayerSpellActive() && Alive() && _countShot % 10 == 0) {
            if (GetVirtualKeyState(VK_SLOWMOVE) != KEY_HOLD && GetVirtualKeyState(VK_SLOWMOVE) != KEY_PUSH) {
                loop (3) { //unfocus shot
                    int offset = 80;
                    for (int i = 1; i <= 6; i++) {
                        int shot = CreatePlayerShotA1(GetPlayerX(), GetPlayerY(), 28, 270 + 13 * i * (sin(_count + i * offset)), 1, 1, 1);
                        int shot2 = CreatePlayerShotA1(GetPlayerX(), GetPlayerY(), 28, 270 - 13 * i * (sin(_count + i * offset)), 1, 1, 1);
                        Obj_SetRenderPriorityI(shot, RP_STG_PLAYER);
                        Obj_SetRenderPriorityI(shot2, RP_STG_PLAYER);
                    }
                    CallSFX(SND_PL_SHOT);
                    wait(3);
                }
            } else {
                loop (3) { //focus shot
                    float modifier = 15 * sin(_count);
                    for (int i = -5; i <= 5; i++) {
                        int shot = CreatePlayerShotA1(GetPlayerX(), GetPlayerY(), 28, 270 + modifier * i, 1, 1, 1);
                        Obj_SetRenderPriorityI(shot, RP_STG_PLAYER);
                    }
                    CallSFX(SND_PL_SHOT);
                    wait(3);
                }
            }
        }
        yield;
    }
}

task TOption(int dir_) {
    int distUnfocus = 32;
    int distFocus = 20;
    int distCurrent = distUnfocus;

    int objOption = InitSprite2D(64, 48, 80, 64, _pathImg, RP_STG_PLAYER-1i);
    ObjSprite2D_SetDestCenter(objOption);

    TOptionShot();

    loop {
        float rotationX = cos(_count * 4);
        distCurrent = (GetVirtualKeyState(VK_SLOWMOVE) != KEY_HOLD && GetVirtualKeyState(VK_SLOWMOVE) != KEY_PUSH) ? distUnfocus : distFocus;

        ObjRender_SetPosition(objOption, GetPlayerX() + distCurrent * dir_*rotationX, GetPlayerY() + distCurrent * dir_*sin(_count * 5), 1);

        //Render over player as if rotating around them
        if (rotationX == dir_) Obj_SetRenderPriorityI(objOption, RP_STG_EFF_PLR_LO);
        else if (rotationX == -dir_) Obj_SetRenderPriorityI(objOption, RP_STG_EFF_PLR_HI);

        Obj_SetVisible(objOption, Alive());
        yield;
        
    }

    task TOptionShot() {
        loop {
            if (Shooting() && Alive() && !IsPlayerSpellActive() && _countShot % 10 == 0) {
                loop (3) {
                    float optionX = ObjRender_GetX(objOption);
                    float optionY = ObjRender_GetY(objOption);
                    float[][] enemy = GetEnemyIntersectionPosition(GetPlayerX(), GetPlayerY(), 1);
                    float angle = 270;
                    if (length(enemy) > 0) angle = atan2(enemy[0][1] - optionY, enemy[0][0] - optionX);
                    int shot = CreatePlayerShotA1(optionX, optionY, 28, angle, 3, 1, 2);
                    Obj_SetRenderPriorityI(shot, Obj_GetRenderPriorityI(objOption));
                    wait(3);
                }
            }
            yield;
        }
    }
}

task TShotCancel(int obj_, float x_, float y_, int graphic_) { //Player shot deletion effect
    float angle = ObjMove_GetAngle(obj_);
    float speed = ObjMove_GetSpeed(obj_);
    x_ -= speed * cos(angle);
    y_ -= speed * sin(angle);
    float xStep = cos(angle);
    float yStep = sin(angle);
    float angleZ = graphic_ == 1 ? angle + 90 : 0;
    if (rand_int(1, 8) == 1) TShotParticle(x_, y_);
    
    int frame = 0;
    int frameRate = 2;
    while (frame < 4 * frameRate) {
        ObjParticleList_SetPosition(_particleShot, x_, y_, 1);
        ObjParticleList_SetAngleZ(_particleShot, angleZ);
        ObjParticleList_SetExtraData(_particleShot, graphic_ + 5, frame / frameRate, 0);
        ObjParticleList_AddInstance(_particleShot);

        frame++;
        x_ += xStep;
        y_ += yStep;
        yield;
    }
}

task TSpell() {
    int objManage = GetSpellManageObject();

    SetForbidPlayerShot(true);
    SetPlayerInvincibilityFrame(420);
    ObjRender_SetColor(_objPlayer, COLOR_WHITE);
    SetPlayerSpeed(1.53, 1.53);

    TEffect();

    wait(320);

    SetForbidPlayerSpell(true);
    SetForbidPlayerShot(false);
    SetPlayerSpeed(3, 1.53);
    Obj_Delete(objManage);
    wait(40);

    //vulnerability indicator
    CallSFX(SND_PL_VULNERABLE);
    SetForbidPlayerSpell(false);
    float radius = 28;
    int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
    ObjRender_SetColor(circle, COLOR_ICE);
    loop (20) {
        ascent (i in 0..17) {
            float angleT = 360 / 16 * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
        }
        radius -= 28 / 20;
        yield;
    }

    Obj_Delete(circle);

    task TEffect() {
        int flash = InitSprite2D(0, 0, MAX_X, MAX_Y, RP_STG_EFF_MAX);
        CallSFX(SND_PL_SPELL);

        int frames = 20;
        for (int i = 1; i <= frames; i++) {
            ObjRender_SetAlpha(flash, Interpolate_Linear(196, 0, i / as_float(frames)));
            yield;
        }

        int circle = ObjSpell_Create();
        ObjPrim_SetPrimitiveType(circle, PRIMITIVE_TRIANGLESTRIP);
        ObjSpell_SetEraseShot(circle, true);
        ObjPrim_SetVertexCount(circle, 34);
        Obj_SetRenderPriorityI(circle, RP_STG_EFF_SPELL);
        ObjRender_SetColor(circle, COLOR_BLACK);
        ObjSpell_Regist(circle);

        int vertices = ObjPrim_GetVertexCount(circle);

        int lines = InitPrim2D(PRIMITIVE_LINELIST, vertices, RP_STG_EFF_SPELL); //spokes
        ObjRender_SetColor(lines, COLOR_GREEN_L);

        int cRim = InitPrim2D(PRIMITIVE_LINESTRIP, (vertices / 2), RP_STG_EFF_SPELL); //edge highliight
        ObjRender_SetColor(cRim, COLOR_GREEN_L);

        float angleT = 0;
        float rad = 275;
        frames = 90;
        for (int i = 0; i < vertices; i += 2) { //init
            ObjPrim_SetVertexPosition(circle, i, MID_X + rad * cos(angleT), MID_Y + rad * sin(angleT), 1);
            ObjPrim_SetVertexPosition(lines, i, MID_X + rad * cos(angleT), MID_Y + rad * sin(angleT), 1);
            angleT += 360 / ((vertices / 2) - 1);
        }

        CallSFX(SND_TRANSITION);

        for (int i = 1; i <= frames; i++) { //close anim (90 frames)
            rad = Interpolate_Accelerate(300, 0, i / as_float(frames));
            angleT = 0;
            for (int j = 0; j < vertices; j += 2) {
                float xPos = MID_X + rad * cos(angleT);
                float yPos = MID_Y + rad * sin(angleT);
                ObjPrim_SetVertexPosition(circle, j + 1, xPos, yPos, 1);
                if (rad > 48) {
                    ObjPrim_SetVertexPosition(lines, j + 1, xPos, yPos, 1);
                    ObjPrim_SetVertexPosition(cRim, j ~/ 2, xPos, yPos, 1);
                }
                ObjSpell_SetIntersectionLine(circle, xPos, yPos, MID_X + 300 * cos(angleT), MID_Y + 300 * sin(angleT), 100);
                angleT += 360 / ((vertices / 2) - 1);
            }
            yield;
        }


        async {
            loop (15) {
                TCircle();
                wait(10);
            }
        }

        async {
            ObjSpell_SetDamage(circle, 9);
            loop (190) {
                ObjSpell_SetIntersectionCircle(circle, MID_X, MID_Y, 270);
                yield;
            }
        }

        wait(40);

        TParticles(150); //remaining frames in animaion
        TLines(150);

        wait(30);
        CallSFX(SND_CHARGE1);
        wait(30);
        for (int i = 1; i <= frames; i++) { //color shift
            int color = Interpolate_Linear(0, 255, i / as_float(frames));
            ObjRender_SetColor(circle, color, color, color);
            yield;
        }

        CallSFX(SND_BANG2);

        Obj_Delete(circle);
        Obj_Delete(lines);
        Obj_Delete(cRim);

        frames = 20;
        for (int i = 1; i <= frames; i++) { //screen flash
            ObjRender_SetAlpha(flash, Interpolate_Linear(255, 0, i / as_float(frames)));
            yield;
        }

        Obj_Delete(flash);

        task TCircle() {
            int circle2 = InitPrim2D(PRIMITIVE_LINESTRIP, (vertices / 2), RP_STG_EFF_SPELL);
            ObjRender_SetColor(circle2, COLOR_GREEN_L);

            float angleT = 0;
            int frames = 40;
            for (int i = 1; i <= frames; i++) {
                for (int j = 0; j < ObjPrim_GetVertexCount(circle2); j++) {
                    int rad = Interpolate_Accelerate(300, 54, i / as_float(frames));
                    ObjPrim_SetVertexPosition(circle2, j, MID_X + rad * cos(angleT), MID_Y + rad * sin(angleT), 1);
                    angleT += 360 / (ObjPrim_GetVertexCount(circle2) - 1);
                }
                yield;
            }
            Obj_Delete(circle2);
        }

        task TParticles(int frames_) {
            float[][] particleData = [];
            int frameRate = 15;
            loop (frames_) {
                loop (3){
                    particleData ~= [[MID_X, MID_Y, rand(-5, 5), rand(-5, 5), 0]];
                }
                for (int i = 0; i < length(particleData); i++) {
                    if (particleData[i][4] > 40) continue;
                    ObjParticleList_SetPosition(_particleEffect, particleData[i][0], particleData[i][1], 1);
                    ObjParticleList_SetExtraData(_particleEffect, 3 - particleData[i][4] ~/ frameRate, 0, 0);
                    ObjParticleList_SetColor(_particleEffect, COLOR_WHITE);
                    ObjParticleList_AddInstance(_particleEffect);
                    particleData[i][0] += particleData[i][2];
                    particleData[i][1] += particleData[i][3];
                    particleData[i][4]++;
                }
                CallSFX(SND_SHOT2);
                yield;
            }
        }

        task TLines(int frames_) {
            int lines2 = InitPrim2D(PRIMITIVE_LINELIST, 10, RP_STG_EFF_SPELL);
            int vertices = ObjPrim_GetVertexCount(lines2);
            ObjRender_SetColor(lines2, COLOR_BLACK);

            for (int i = 1; i <= frames_; i++) {
                int rad = Interpolate_Linear(0, 300, i / as_float(frames_));
                for (int i = 0; i < vertices; i += 2) {
                    float angleT = rand(0, 360);
                    ObjPrim_SetVertexPosition(lines2, i, MID_X + rad * cos(angleT), MID_Y + rad * sin(angleT), 1);
                    ObjPrim_SetVertexPosition(lines2, i + 1, MID_X - (rad * cos(angleT) / 2), MID_Y - (rad * sin(angleT) / 2), 1);
                }
                yield;
            }

            Obj_Delete(lines2);
        }
    }
}