//Player Common functions
#include "../../lib/lib_Common.dnh"

string _pathImg; //player sprite passed by player script
string _pathShot; //player shot data passed by player script
int _itemScope; //Player unfocused item collection radius
int _focusScope; //Player focused item collection radius

int _particleEffect; //graze, death, shot hit, player bomb particle list
int _particleShot; //player shot deletion particle list

int thrillLevel = 0; //# of bullets grazed in period of time

function<void> InitPlayer(string imageFile_, string shotFile_, float speed_, float focusSpeed_, int itemScope_, int focusScope_) {
    Common_Init();
    _pathImg = imageFile_;
    _pathShot = shotFile_;
    _itemScope = itemScope_;
    _focusScope = focusScope_;
    TRender();
    TThrillGauge();
    LoadPlayerShotData(_pathShot);

    _particleEffect = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_PLAYER, [0, 0, 16, 16]);
    ParticleListShader(_particleEffect, 16 / 512, 16 / 512);
    
    _particleShot = InitParticleList(_pathImg, RP_STG_PLAYER, [0, 0, 16, 16]);
    ParticleListShader(_particleShot, 16 / 256, 16 / 64);

    ObjPlayer_AddIntersectionCircleA1(_objPlayer, 0, 0, 1, 15);
    SetPlayerDownStateFrame(0);
    SetPlayerRebirthFrame(18);
    SetPlayerClip(4, 8, GetStgFrameWidth() - 4, GetStgFrameHeight() - 8);
    SetPlayerInvincibleGraze(false);
    SetPlayerIntersectionEraseShot(false);

    SetPlayerSpeed(speed_, focusSpeed_);
}

function<void> PlayerEvent() {
    alternative (GetEventType())
	case (EV_REQUEST_SPELL) {
		int spell = GetPlayerSpell();
		if (spell >= 1) {
			SetScriptResult(true);
			SetPlayerSpell(spell - 1);
            //increment total bomb count for stage (for scoring and fun stats)
            SetAreaCommonData(AREA_STAGE, "Player_Bomb", GetAreaCommonData(AREA_STAGE, "Player_Bomb", 0) + 1);
            SetPlayerInvincibilityFrame(0);
			TSpell(); //THIS MUST BE DEFINED BY THE PLAYER SCRIPT
		} else SetScriptResult(false);
	}
	case (EV_HIT) THit();
    case (EV_PLAYER_SHOOTDOWN) {
        //increment total miss count for stage (for scoring and fun stats)
        SetAreaCommonData(AREA_STAGE, "Player_Miss", GetAreaCommonData(AREA_STAGE, "Player_Miss", 0) + 1);
        SetPlayerRebirthPosition(GetPlayerX(), GetPlayerY());
        thrillLevel = 0;
        if (GetPlayerLife() >= 0) TMiss();
    }
	case (EV_PLAYER_REBIRTH) {
        TRebirth();
    }
    case (EV_GRAZE) {
        int[] objList = GetEventArgument(1); //list of bullets grazed in last frame
        thrillLevel += length(objList); //increase thrill gauge by number of bullets grazed
        
        for each (obj in objList) {
            int num = 0;
            float x = GetEventArgument(2)[num][0];
            float y = GetEventArgument(2)[num][1];
            if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) { //Get closest point to laser
                float angleLaser = ObjStLaser_GetAngle(obj);
                float anglePlayer = GetAngleToPlayer(obj);
                float distPlayer = distance(x, y, GetPlayerX(), GetPlayerY());

                if (distPlayer > ObjLaser_GetLength(obj)) { //Player is beyond tip of laser
                    float len = ObjLaser_GetLength(obj);
                    x += len * cos(angleLaser);
                    y += len * sin(angleLaser);
                } else if (absolute(anglePlayer - angleLaser) <= 90) { //Player not behind base of laser
                    float distNearest = distPlayer * cos(anglePlayer - angleLaser);
                    x += distNearest * cos(angleLaser);
                    y += distNearest * sin(angleLaser);
                } //else player is behind the base of the laser, particle spawns at original (x, y)
            }
            num++;
            TGraze(x, y);
        }
    }
    case (EV_DELETE_SHOT_PLAYER) {
        TShotCancel(GetEventArgument(0), GetEventArgument(1)[0], GetEventArgument(1)[1], GetEventArgument(2)); //THIS MUST BE DEFINED BY THE PLAYER SCRIPT
    }
}

task TRender() {
    //player
	ObjPrim_SetTexture(_objPlayer, _pathImg);
    ObjRender_SetTextureFilter(_objPlayer, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    ObjSprite2D_SetSourceRect(_objPlayer, 0, 0, 32, 48);
    ObjSprite2D_SetDestCenter(_objPlayer);
    Obj_SetRenderPriorityI(_objPlayer, RP_STG_PLAYER);
    //hitbox
    int objHitbox = InitSprite2D(0, 0, 8, 8, IMG_PLR_HITBOX, RP_STG_HITBOX);
    ObjSprite2D_SetDestCenter(objHitbox);
    int frame = 0;
    int frameRate = 6;

	while (!Obj_IsDeleted(_objPlayer)) {
        int leftState = GetVirtualKeyState(VK_LEFT);
        int rightState = GetVirtualKeyState(VK_RIGHT);
		if (leftState == KEY_PUSH || leftState == KEY_HOLD && rightState == KEY_FREE) ObjSprite2D_SetSourceRect(_objPlayer, 64, 0, 96, 48);
		else if (rightState == KEY_PUSH || rightState == KEY_HOLD && leftState == KEY_FREE) ObjSprite2D_SetSourceRect(_objPlayer, 32, 0, 64, 48);
		else ObjSprite2D_SetSourceRect(_objPlayer, 0, 0, 32, 48);
        ObjSprite2D_SetDestCenter(_objPlayer);

        ObjSprite2D_SetSourceRect(objHitbox, 0 + 8 * (frame / frameRate), 0, 8 + 8 * (frame / frameRate), 8);
        ObjSprite2D_SetDestCenter(objHitbox);
        Obj_SetVisible(objHitbox, GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE && Alive());
        ObjRender_SetPosition(objHitbox, GetPlayerX(), GetPlayerY(), 1);
        frame++;
        if (frame >= 6 * frameRate) frame = 0;
		yield;
	}
}

task TThrillGauge() {
    int thrillPrevious = 0; //thrill level previous frame
    int thrillMax = 50; //number of bullets to fill the gauge
    int timer = 0; //time until thrillLevel is reset
    int timerMax = 180; //max timer level upon grazing

    SetAreaCommonData(AREA_SYSTEM, "Thrill Max", thrillMax);
    SetAreaCommonData(AREA_SYSTEM, "Thrill Timer Max", timerMax);

    int thrillPtr = LoadAreaCommonDataValuePointer(AREA_SYSTEM, "Thrill Level", 0);
    int timerPtr = LoadAreaCommonDataValuePointer(AREA_SYSTEM, "Thrill Timer", 0);

    while (!Obj_IsDeleted(_objPlayer)) {
        if (thrillLevel > thrillPrevious) timer = timerMax; //grazed
        thrillLevel = clamp(thrillLevel, 0, thrillMax);
        
        if (thrillLevel == thrillMax) {
            CollectAllItems(); //gauge max
            if (thrillPrevious < thrillLevel) CallSFX(SND_GAUGE_FULL); //just filled
        }
        if (timer > 0) {
            if (thrillLevel == 0) timer = 0;
            else timer--;
        }
        if (timer == 0 && thrillLevel > 0) thrillLevel = 0; //ran out of time
        thrillPrevious = thrillLevel;

        SetCommonDataPtr(thrillPtr, thrillLevel);
        SetCommonDataPtr(timerPtr, timer);
        yield;
    }
}

task THit() { //Player deathbomb window
    SetForbidPlayerShot(true);
    ObjRender_SetColor(_objPlayer, COLOR_BLACK);
    CallSFX(SND_PL_HIT);
    
    //Closing circle
    float radius = 28;
    int circle = InitPrim2D(PRIMITIVE_TRIANGLEFAN, 18, RP_STG_EFF_MAX);
    ObjRender_SetColor(circle, COLOR_ICE);
    int frames = 14;
    for (int frame = 0; frame <= frames; frame++) {
        ObjPrim_SetVertexPosition(circle, 0, GetPlayerX(), GetPlayerY(), 1);
        radius = Interpolate_Accelerate(28, 0, frame / as_float(frames));
        for (int i = 1; i < ObjPrim_GetVertexCount(circle); i++) {
            float angleT = 360 / (ObjPrim_GetVertexCount(circle) - 2) * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
        }
        if (IsPlayerSpellActive()) break;
        yield;
    }
    Obj_Delete(circle);
}

task TMiss() { //Player died
    SetForbidPlayerSpell(true);
    CancelCollectItems();
    ObjRender_SetColor(_objPlayer, COLOR_WHITE);
    float xPos = GetPlayerX();
    float yPos = GetPlayerY();
    CallSFX(SND_PL_MISS);

    TMissGlass();
    TMissCircle();
    
    task TMissGlass() {
        loop (7) {
            loop (10) TGlassMovement();
            yield;
        }

        task TGlassMovement() {
            float x = xPos;
            float y = yPos;
            float angle = rand_int(0, 360);
            float speed = rand(1.2, 2.8);
            float xStep = speed * cos(angle);
            float yStep = speed * sin(angle);

            int frame = 0;
            int frameRate = 2;
            loop (140) {
                ObjParticleList_SetPosition(_particleEffect, x, y, 1);
                ObjParticleList_SetExtraData(_particleEffect, frame / frameRate, 2, 0);
                ObjParticleList_SetColor(_particleEffect, COLOR_WHITE);
                ObjParticleList_AddInstance(_particleEffect);

                frame++;
                if (frame >= 7 * frameRate) frame = 0;
                x += xStep;
                y += yStep;
                yield;
            }
        }
    }

    task TMissCircle() {
        float radius = 0;
        int frames = 60;
        int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
        ObjRender_SetColor(circle, COLOR_ICE);
        for (int frame = 1; frame <= frames; frame++) {
            radius = Interpolate_Decelerate(0, 72, frame / as_float(frames));
            for (int i = 0; i < ObjPrim_GetVertexCount(circle); i++) {
                float angleT = 360 / (ObjPrim_GetVertexCount(circle) - 1) * i;
                ObjPrim_SetVertexPosition(circle, i, xPos + radius * cos(angleT), yPos + radius * sin(angleT), 1);
            }
            yield;
        }
        Obj_Delete(circle);
    }
}

task TRebirth() { //Player respawn
    SetPlayerSpell(3);
    SetForbidPlayerShot(false);
    SetForbidPlayerSpell(true);
    SetPlayerInvincibilityFrame(240);

    DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);

    TRebirthEffect();
    wait(60);
    SetForbidPlayerSpell(false);
    wait(180);

    task TRebirthEffect() {
        loop (55) { //blink red
            if (IsPlayerSpellActive()) return;
            ObjRender_SetColor(_objPlayer, COLOR_RED);
            yield;
            ObjRender_SetColor(_objPlayer, COLOR_WHITE);
            wait(3);
        }

        //blue circle indicating vulnerability
        CallSFX(SND_PL_VULNERABLE);
        float radius = 28;
        int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
        ObjRender_SetColor(circle, COLOR_ICE);
        loop (20) {
            ascent (i in 0..17) {
                float angleT = 360 / 16 * i;
                ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
            }
            radius -= 28 / 20;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TGraze(float x_, float y_) { //Summon graze particle, add to particle list
    float speed = rand(1.2, 2.8);
    float angle = rand_int(0, 360);
    float xStep = speed * cos(angle);
    float yStep = speed * sin(angle);

    CallSFX(SND_PL_GRAZE);
    AddScore(1000);

    int frame = 0;
    int frameRate = 2;
    loop (43) {
        ObjParticleList_SetPosition(_particleEffect, x_, y_, 1);
        ObjParticleList_SetExtraData(_particleEffect, frame / frameRate, 2, 0);
        ObjParticleList_SetColor(_particleEffect, COLOR_TAN);
        ObjParticleList_AddInstance(_particleEffect);

        frame++;
        if (frame >= 8 * frameRate) frame = 0;
        x_ += xStep;
        y_ += yStep;
        yield;
    }
}

task TShotParticle(float x_, float y_) { //shot hit something, spawn shot flake particle
    float speed = rand(4.5, 10);
    float angle = rand(0, 360);
    float xStep = speed * cos(angle);
    float yStep = speed * sin(angle);

    int frame = 0;
    int frameRate = 2;
    loop (40) {
        ObjParticleList_SetPosition(_particleEffect, x_, y_, 1);
        ObjParticleList_SetExtraData(_particleEffect, frame / frameRate, 2, 0);
        ObjParticleList_SetColor(_particleEffect, COLOR_GRAY_L);
        ObjParticleList_AddInstance(_particleEffect);

        frame++;
        if (frame >= 8 * frameRate) frame = 0;
        x_ += xStep;
        y_ += yStep;
        yStep += 0.05;
        yield;
    }
}

function<bool> Alive() {
	return GetPlayerState == STATE_NORMAL;
}

function<bool> Shooting() {
    return (GetVirtualKeyState(VK_SHOT) != KEY_FREE) && IsPermitPlayerShot();
}