//Player Common functions
#include "../../lib/lib_Common.dnh"

string _pathImg; //player sprite passed by player script
string _pathShot; //player shot data passed by player script

int _particleList;

function<void> InitPlayer(string imageFile_, string shotFile_, real speed_, real focusSpeed_) {
    InitCommon();
    _pathImg = imageFile_;
    _pathShot = shotFile_;
    TRender(GetPlayerObjectID());
    LoadPlayerShotData(_pathShot);

    _particleList = InitParticleList(IMG_EFFECT_GRAZE, RP_STG_PLAYER, 0, 0, 7, 7);
    ParticleListShader(_particleList, 7/64, 1);

    ObjPlayer_AddIntersectionCircleA1(_objPlayer, 0, 0, 1, 15);
    SetPlayerDownStateFrame(0);
    SetPlayerRebirthFrame(15);
    SetPlayerClip(4, 8, GetStgFrameWidth() - 4, GetStgFrameHeight() - 8);
    SetPlayerInvincibleGraze(false);
    SetPlayerIntersectionEraseShot(false);

    SetPlayerSpeed(speed_, focusSpeed_);

    NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_PLAYER_LOADED, 0);
    //Starts the stage intro
}

function<void> PlayerEvent() {
    alternative (GetEventType())
	case (EV_REQUEST_SPELL) {
		int spell = GetPlayerSpell();
		if (spell >= 1) {
			SetScriptResult(true);
			SetPlayerSpell(spell - 1);
			TSpell();
		}
		else {
			SetScriptResult(false);
		}
	}
	case (EV_HIT) {
		THit();
	}
    case (EV_PLAYER_SHOOTDOWN) {
        TMiss();
    }
	case (EV_PLAYER_REBIRTH) {
        TRebirth();
	}
    case (EV_GRAZE) {
        //TODO properly set x and y values for lasers
        TGraze(GetEventArgument(2)[0][0], GetEventArgument(2)[0][1]);
    }
}

task TRender(int ParentID_) {
	ObjPrim_SetTexture(_objPlayer, _pathImg);
    Obj_SetRenderPriorityI(_objPlayer, RP_STG_PLAYER);

    int objHitbox = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objHitbox, _pathImg);
    ObjSprite2D_SetSourceRect(objHitbox, 198, 6, 202, 10);
    ObjSprite2D_SetDestCenter(objHitbox);
    Obj_SetRenderPriorityI(objHitbox, RP_STG_HITBOX);

	while (!Obj_IsDeleted(ParentID_)) {
		if (GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD) {
			ObjSprite2D_SetSourceRect(_objPlayer, 48, 0, 96, 48);
		} else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD) {
			ObjSprite2D_SetSourceRect(_objPlayer, 96, 0, 144, 48);
		} else {
			ObjSprite2D_SetSourceRect(_objPlayer, 0, 0, 48, 48);
		}

        if (GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE && Alive()) {
            Obj_SetVisible(objHitbox, true);
        } else {
            Obj_SetVisible(objHitbox, false);
        }

		ObjSprite2D_SetDestCenter(_objPlayer);
        ObjRender_SetPosition(objHitbox, GetPlayerX(), GetPlayerY(), 1);
		yield;
	}
}

task THit() { //Player deathbomb window
    SetForbidPlayerShot(true);
    ObjRender_SetColor(_objPlayer, 0x000000);
    CallSFX(SND_PL_HIT);
    
    //Closing circle
    real radius = 28;
    int circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
    ObjPrim_SetVertexCount(circle, 17);
    ascent (i in 0..17) {
        ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
    }
    loop (14) {
        ascent (i in 0..17) {
            real angleT = 360/16 * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
        }
        radius -= 2;
        if (IsPlayerSpellActive()) {
            break;
        }
        yield;
    }
    Obj_Delete(circle);
}

task TMiss() { //Player died
    SetForbidPlayerSpell(true);
    ObjRender_SetColor(_objPlayer, 0xFFFFFF);
    SetPlayerRebirthPosition(GetPlayerX(), GetPlayerY());
    real xPos = GetPlayerX();
    real yPos = GetPlayerY();
    CallSFX(SND_PL_MISS);

    DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);

    TMissGlass();
    TMissCircle();
    
    task TMissGlass() {
        loop (7) {
            loop (10) {
                TGlassMovement();
            }
            yield;
        }

        task TGlassMovement() {
            real x = xPos;
            real y = yPos;
            real angle = rand_int(0, 360);
            real speed = rand(2, 3.2);
            real xStep = speed * cos(angle);
            real yStep = speed * sin(angle);
            int frame = 0;
            loop (70) {
                loop (2) {
                    ObjParticleList_SetPosition(_particleList, x, y, 1);
                    ObjParticleList_SetExtraData(_particleList, frame, 0, 0);
                    ObjParticleList_SetColor(_particleList, 0xFFFFFF);
                    
                    ObjParticleList_AddInstance(_particleList);
                    yield;
                }
                frame++;
                if (frame >= 7) frame = 0;
                x += xStep;
                y += yStep;
            }
        }
    }

    task TMissCircle() {
        real radius = 0;
        real decayRate = 3.5;
        int circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
        ObjPrim_SetVertexCount(circle, 17);
        ascent (i in 0..17) {
            ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
        }
        loop (120) {
            ascent (i in 0..17) {
                real angleT = 360/16 * i;
                ObjPrim_SetVertexPosition(circle, i, xPos + radius*cos(angleT), yPos + radius*sin(angleT), 1);
            }
            radius += decayRate;
            decayRate /= 1.05;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TRebirth() { //Player respawn
    if (GetPlayerState() == STATE_END) {
        Obj_SetVisible(_objPlayer, false);
        SetForbidPlayerShot(true);
        return;
    }
    SetPlayerSpell(3);
    SetForbidPlayerShot(false);
    SetForbidPlayerSpell(true);
    SetPlayerInvincibilityFrame(240);

    TRebirthEffect();
    wait(240);
    SetForbidPlayerSpell(false);

    task TRebirthEffect() {
        loop (55) { //blink red
            ObjRender_SetColor(_objPlayer, 0xFF0000);
            yield;
            ObjRender_SetColor(_objPlayer, 0xFFFFFF);
            wait(3);
        }

        //blue circle indicating vulnerability
        CallSFX(SND_PL_VULNERABLE);
        real radius = 28;
        int circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
        ObjPrim_SetVertexCount(circle, 17);
        ascent (i in 0..17) {
            ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
        }
        loop (20) {
            ascent (i in 0..17) {
                real angleT = 360/16 * i;
                ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
            }
            radius -= 28/20;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TGraze(real x_, real y_) { //Summon graze particle, add to particle list
    real speed = rand(2, 3.2);
    real angle = rand_int(0, 360);
    real xStep = speed * cos(angle);
    real yStep = speed * sin(angle);

    CallSFX(SND_PL_GRAZE);
    AddScore(1000);

    int frame = 0;
    loop (43) {
        loop (2) {
            ObjParticleList_SetPosition(_particleList, x_, y_, 1);
            ObjParticleList_SetExtraData(_particleList, frame, 0, 0);
            ObjParticleList_SetColor(_particleList, 0xEEBBAA);

            ObjParticleList_AddInstance(_particleList);
            yield;
        }
        frame++;
        if (frame >= 7) {
            frame = 0;
        }
        x_ += xStep;
        y_ += yStep;
    }
}

function<bool> Alive() {
	return GetPlayerState == STATE_NORMAL || GetPlayerState == STATE_HIT;
}

function<bool> Shooting() {
    return (GetVirtualKeyState(VK_SHOT) != KEY_FREE) && IsPermitPlayerShot();
}