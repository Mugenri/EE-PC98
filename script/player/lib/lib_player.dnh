//Player Common functions
#include "../../lib/lib_Common.dnh"

string _pathImg; //player sprite passed by player script
string _pathShot; //player shot data passed by player script

int _particleFlake;
int _particleShot;

function<void> InitPlayer(string imageFile_, string shotFile_, real speed_, real focusSpeed_) {
    InitCommon();
    _pathImg = imageFile_;
    _pathShot = shotFile_;
    TRender(GetPlayerObjectID());
    LoadPlayerShotData(_pathShot);

    _particleFlake = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_PLAYER, 0, 32, 16, 48);
    ParticleListShader(_particleFlake, 16/512, 1);
    
    _particleShot = InitParticleList(_pathImg, RP_STG_PLAYER, 0, 0, 16, 16);
    ParticleListShader(_particleShot, 16/256, 16/64);

    ObjPlayer_AddIntersectionCircleA1(_objPlayer, 0, 0, 1, 15);
    SetPlayerDownStateFrame(0);
    SetPlayerRebirthFrame(15);
    SetPlayerClip(4, 8, GetStgFrameWidth() - 4, GetStgFrameHeight() - 8);
    SetPlayerInvincibleGraze(false);
    SetPlayerIntersectionEraseShot(false);

    SetPlayerSpeed(speed_, focusSpeed_);

    NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_PLAYER_LOADED, 0); //Starts the stage intro
}

function<void> PlayerEvent() {
    alternative (GetEventType())
	case (EV_REQUEST_SPELL) {
		int spell = GetPlayerSpell();
		if (spell >= 1) {
			SetScriptResult(true);
			SetPlayerSpell(spell - 1);
			TSpell(); //THIS MUST BE DEFINED BY THE PLAYER SCRIPT
		} else SetScriptResult(false);
	}
	case (EV_HIT) THit();
    case (EV_PLAYER_SHOOTDOWN) TMiss();
	case (EV_PLAYER_REBIRTH) TRebirth();
    case (EV_GRAZE) {
        int[] objList = GetEventArgument(1); //list of bullets grazed in last frame
        
        for each (obj in objList) {
            int num = 0;
            real x = GetEventArgument(2)[num][0];
            real y = GetEventArgument(2)[num][1];
            if (Obj_GetType(obj) == OBJ_STRAIGHT_LASER) { //Get closest point to laser
                real angleLaser = ObjStLaser_GetAngle(obj);
                real anglePlayer = GetAngleToPlayer(obj);
                real distPlayer = distance(x, y, GetPlayerX(), GetPlayerY());

                if (distPlayer > ObjLaser_GetLength(obj)) { //Player is beyond tip of laser
                    real len = ObjLaser_GetLength(obj);
                    x += len * cos(angleLaser);
                    y += len * sin(angleLaser);
                } else if (absolute(anglePlayer - angleLaser) <= 90) { //Player not behind base of laser
                    real distNearest = distPlayer * cos(anglePlayer - angleLaser);
                    x += distNearest * cos(angleLaser);
                    y += distNearest * sin(angleLaser);
                } //if player is behind the base of the laser, particle spawns at original (x, y)
            }
            num++;
            TGraze(x, y);
        }
    }
    case (EV_DELETE_SHOT_PLAYER) {
        TShotCancel(GetEventArgument(0), GetEventArgument(1)[0], GetEventArgument(1)[1], GetEventArgument(2)); //THIS MUST BE DEFINED BY THE PLAYER SCRIPT
    }
}

task TRender(int ParentID_) {
    //player
	ObjPrim_SetTexture(_objPlayer, _pathImg);
    ObjSprite2D_SetSourceRect(_objPlayer, 0, 0, 32, 48);
    ObjSprite2D_SetDestCenter(_objPlayer);
    Obj_SetRenderPriorityI(_objPlayer, RP_STG_PLAYER);
    //hitbox
    int objHitbox = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objHitbox, IMG_PLR_HITBOX);
    ObjSprite2D_SetSourceRect(objHitbox, 0, 0, 4, 4);
    ObjSprite2D_SetDestCenter(objHitbox);
    Obj_SetRenderPriorityI(objHitbox, RP_STG_HITBOX);

	while (!Obj_IsDeleted(ParentID_)) {
		if (GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD) ObjSprite2D_SetSourceRect(_objPlayer, 64, 0, 96, 48);
		else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD) ObjSprite2D_SetSourceRect(_objPlayer, 32, 0, 64, 48);
		else ObjSprite2D_SetSourceRect(_objPlayer, 0, 0, 32, 48);

        Obj_SetVisible(objHitbox, GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE && Alive());
        ObjRender_SetPosition(objHitbox, GetPlayerX(), GetPlayerY(), 1);

		yield;
	}
}

task THit() { //Player deathbomb window
    SetForbidPlayerShot(true);
    ObjRender_SetColor(_objPlayer, COLOR_BLACK);
    CallSFX(SND_PL_HIT);
    
    //Closing circle
    real radius = 28;
    int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
    ascent (i in 0..17) ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
    loop (14) {
        ascent (i in 0..17) {
            real angleT = 360/16 * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
        }
        radius -= 2;
        if (IsPlayerSpellActive()) break;
        yield;
    }
    Obj_Delete(circle);
}

task TMiss() { //Player died
    SetForbidPlayerSpell(true);
    ObjRender_SetColor(_objPlayer, COLOR_WHITE);
    SetPlayerRebirthPosition(GetPlayerX(), GetPlayerY());
    real xPos = GetPlayerX();
    real yPos = GetPlayerY();
    CallSFX(SND_PL_MISS);

    DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);

    TMissGlass();
    TMissCircle();
    
    task TMissGlass() {
        loop (7) {
            loop (10) TGlassMovement();
            yield;
        }

        task TGlassMovement() {
            real x = xPos;
            real y = yPos;
            real angle = rand_int(0, 360);
            real speed = rand(1.2, 2.8);
            real xStep = speed * cos(angle);
            real yStep = speed * sin(angle);

            real frame = 0;
            loop (140) {
                ObjParticleList_SetPosition(_particleFlake, x, y, 1);
                ObjParticleList_SetExtraData(_particleFlake, trunc(frame), 0, 0);
                ObjParticleList_SetColor(_particleFlake, COLOR_WHITE);
                ObjParticleList_AddInstance(_particleFlake);

                frame += 1/2;
                if (frame >= 7) frame = 0;
                x += xStep;
                y += yStep;
                yield;
            }
        }
    }

    task TMissCircle() {
        real radius = 0;
        real decayRate = 3.5;
        int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
        ascent (i in 0..17) ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
        loop (120) {
            ascent (i in 0..17) {
                real angleT = 360/16 * i;
                ObjPrim_SetVertexPosition(circle, i, xPos + radius*cos(angleT), yPos + radius*sin(angleT), 1);
            }
            radius += decayRate;
            decayRate /= 1.05;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TRebirth() { //Player respawn
    if (GetPlayerState() == STATE_END) {
        Obj_SetVisible(_objPlayer, false);
        SetForbidPlayerShot(true);
        return;
    }
    SetPlayerSpell(3);
    SetForbidPlayerShot(false);
    SetForbidPlayerSpell(true);
    SetPlayerInvincibilityFrame(240);

    TRebirthEffect();
    wait(240);
    SetForbidPlayerSpell(false);

    task TRebirthEffect() {
        loop (55) { //blink red
            ObjRender_SetColor(_objPlayer, COLOR_RED);
            yield;
            ObjRender_SetColor(_objPlayer, COLOR_WHITE);
            wait(3);
        }

        //blue circle indicating vulnerability
        CallSFX(SND_PL_VULNERABLE);
        real radius = 28;
        int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
        ascent (i in 0..17) ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
        loop (20) {
            ascent (i in 0..17) {
                real angleT = 360/16 * i;
                ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
            }
            radius -= 28/20;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TGraze(real x_, real y_) { //Summon graze particle, add to particle list
    real speed = rand(1.2, 2.8);
    real angle = rand_int(0, 360);
    real xStep = speed * cos(angle);
    real yStep = speed * sin(angle);

    CallSFX(SND_PL_GRAZE);
    AddScore(1000);

    real frame = 0;
    loop (43) {
        ObjParticleList_SetPosition(_particleFlake, x_, y_, 1);
        ObjParticleList_SetExtraData(_particleFlake, trunc(frame), 0, 0);
        ObjParticleList_SetColor(_particleFlake, COLOR_TAN);
        ObjParticleList_AddInstance(_particleFlake);

        frame += 1/2;
        if (frame >= 8) frame = 0;
        x_ += xStep;
        y_ += yStep;
        yield;
    }
}

task TShotParticle(real x_, real y_) { //shot hit something, spawn shot flake particle
    real speed = rand(4.5, 10);
    real angle = rand(0, 360);
    real xStep = speed * cos(angle);
    real yStep = speed * sin(angle);

    real frame = 0;
    loop (40) {
        ObjParticleList_SetPosition(_particleFlake, x_, y_, 1);
        ObjParticleList_SetExtraData(_particleFlake, trunc(frame), 0, 0);
        ObjParticleList_SetColor(_particleFlake, COLOR_GRAY_L);
        ObjParticleList_AddInstance(_particleFlake);

        frame += 1/2;
        if (frame >= 8) frame = 0;
        x_ += xStep;
        y_ += yStep;
        yStep += 0.05;
        yield;
    }
}

function<bool> Alive() {
	return GetPlayerState == STATE_NORMAL || GetPlayerState == STATE_HIT;
}

function<bool> Shooting() {
    return (GetVirtualKeyState(VK_SHOT) != KEY_FREE) && IsPermitPlayerShot();
}