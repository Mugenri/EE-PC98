//Player Common functions
#include "../../lib/lib_Common.dnh"

let pathImg; //player sprite passed by player script
let pathShot; //player shot data passed by player script
//General player sound variables, MOVE TO SFX SCRIPT
let seVolume;
let seShot;
let seGraze;
let seHit;
let seMiss;
let seVulnerable;

let particleList;

let PlayerPosition = [0, 0]; //used for respawning in the same position

function InitPlayer(imageFile, shotData) {
    pathImg = imageFile;
    pathShot = shotData;
    TRender(GetPlayerObjectID(), pathImg);
    LoadPlayerShotData(pathShot);

    particleList = InitParticleList(IMG_EFFECT_GRAZE, 30, 0, 0, 7, 7);
    ParticleListShader(particleList, 7/64, 1);

    ObjPlayer_AddIntersectionCircleA1(objPlayer, 0, 0, 1, 20);
    SetPlayerDownStateFrame(0);
    SetPlayerRebirthFrame(15);
    SetPlayerClip(4, 8, GetStgFrameWidth() - 4, GetStgFrameHeight() - 8);
    SetPlayerInvincibleGraze(false);
    SetPlayerIntersectionEraseShot(false);

    NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_PLAYER_LOADED, 0);
    //Starts the stage intro
}

function PlayerEvent() {
    alternative (GetEventType())
	case (EV_REQUEST_SPELL) {
		let spell = GetPlayerSpell();
		if (spell >= 1) {
			SetScriptResult(true);
			SetPlayerSpell(spell-1);
			TSpell();
		}
		else {
			SetScriptResult(false);
		}
	}
	case (EV_HIT) {
		THit();
	}
    case (EV_PLAYER_SHOOTDOWN) {
        TMiss();
    }
	case (EV_PLAYER_REBIRTH) {
        TRebirth();
	}
    case (EV_GRAZE) {
        // for each (bullet in GetEventArgument(2)) { //bullet[0] and bullet[1] are the x and y coords of each bullet grazed in this frame
        //     TGraze(bullet[0], bullet[1]);
        // }
        TGraze(GetEventArgument(2)[0][0], GetEventArgument(2)[0][1]);
    }
}

function InitSound() {
    seVolume = GetSFXVolume();

    seShot = ObjSound_Create();
    ObjSound_Load(seShot, DIR_SE ~ "seShot.wav");
    ObjSound_SetSoundDivision(seShot, SOUND_SE);
    ObjSound_SetVolumeRate(seShot, seVolume);

    seGraze = ObjSound_Create();
    ObjSound_Load(seGraze, DIR_SE ~ "seGraze.wav");
    ObjSound_SetSoundDivision(seGraze, SOUND_SE);
    ObjSound_SetVolumeRate(seGraze, seVolume);

    seHit = ObjSound_Create();
    ObjSound_Load(seHit, DIR_SE ~ "seHit.wav");
    ObjSound_SetSoundDivision(seHit, SOUND_SE);
    ObjSound_SetVolumeRate(seHit, seVolume);

    seMiss = ObjSound_Create();
    ObjSound_Load(seMiss, DIR_SE ~ "seMiss.wav");
    ObjSound_SetSoundDivision(seMiss, SOUND_SE);
    ObjSound_SetVolumeRate(seMiss, seVolume);

    seVulnerable = ObjSound_Create();
    ObjSound_Load(seVulnerable, DIR_SE ~ "seVulnerable.wav");
    ObjSound_SetSoundDivision(seVulnerable, SOUND_SE);
    ObjSound_SetVolumeRate(seVulnerable, seVolume);
}

task TRender(ParentID, pathImg) {
	ObjPrim_SetTexture(objPlayer, pathImg);
    Obj_SetRenderPriorityI(objPlayer, 30);

    let objHitbox = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objHitbox, pathImg);
    ObjSprite2D_SetSourceRect(objHitbox, 198, 6, 202, 10);
    ObjSprite2D_SetDestCenter(objHitbox);
    Obj_SetRenderPriorityI(objHitbox, 60);

	while (!Obj_IsDeleted(ParentID)) {
		if (GetVirtualKeyState(VK_LEFT) == KEY_PUSH || GetVirtualKeyState(VK_LEFT) == KEY_HOLD) {
			ObjSprite2D_SetSourceRect(objPlayer, 48, 0, 96, 48);
		} else if (GetVirtualKeyState(VK_RIGHT) == KEY_PUSH || GetVirtualKeyState(VK_RIGHT) == KEY_HOLD) {
			ObjSprite2D_SetSourceRect(objPlayer, 96, 0, 144, 48);
		} else {
			ObjSprite2D_SetSourceRect(objPlayer, 0, 0, 48, 48);
		}

        if (GetVirtualKeyState(VK_SLOWMOVE) != KEY_FREE && Alive()) {
            Obj_SetVisible(objHitbox, true);
        } else {
            Obj_SetVisible(objHitbox, false);
        }

		ObjSprite2D_SetDestCenter(objPlayer);
        ObjRender_SetPosition(objHitbox, GetPlayerX(), GetPlayerY(), 1);
		yield;
	}
}

task THit() { //Player deathbomb window
    SetForbidPlayerShot(true);
    ObjRender_SetColor(objPlayer, 0, 0, 0);
    ObjSound_Play(seHit);
    
    //Closing circle
    let radius = 28;
    let circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
    ObjPrim_SetVertexCount(circle, 17);
    ascent(i in 0..17) {
        ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
    }
    loop (14) {
        ascent(i in 0..17) {
            let angleT = 360/16 * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
        }
        radius -= 2;
        if (IsPlayerSpellActive()) {
            break;
        }
        yield;
    }
    Obj_Delete(circle);
}

task TMiss() { //Player died
    SetForbidPlayerSpell(true);
    ObjRender_SetColor(objPlayer, 255, 255, 255);
    PlayerPosition = [GetPlayerX(), GetPlayerY()];
    let xPos = GetPlayerX();
    let yPos = GetPlayerY();
    ObjSound_Play(seMiss);

    MissGlass();
    MissCircle();
    
    task MissGlass() {
        loop (7) {
            loop (10) {
                GlassMovement();
            }
            yield;
        }

        task GlassMovement() {
            let x = xPos;
            let y = yPos;
            let xSpeed = rand(0.2, 2.2);
            let ySpeed = rand(0.2, 2.2);
            //chance to make speed negative
            if (rand_int(0, 1) == 1) xSpeed *= -1;
            if (rand_int(0, 1) == 1) ySpeed *= -1;
            let frame = 0;
            loop (70) {
                loop (2) {
                    ObjParticleList_SetPosition(particleList, x, y, 1);
                    ObjParticleList_SetExtraData(particleList, frame, 0, 0);
                    ObjParticleList_SetColor(particleList, 0xFFFFFF);
                    
                    ObjParticleList_AddInstance(particleList);
                    yield;
                }
                frame++;
                if (frame >= 7) {
                    frame = 0;
                }
                x += xSpeed;
                y += ySpeed;
            }
        }
    }

    task MissCircle() {
        let radius = 0;
        let decayRate = 3.5;
        let circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
        ObjPrim_SetVertexCount(circle, 17);
        ascent(i in 0..17) {
            ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
        }
        loop (120) {
            ascent(i in 0..17) {
                let angleT = 360/16 * i;
                ObjPrim_SetVertexPosition(circle, i, xPos + radius*cos(angleT), yPos + radius*sin(angleT), 1);
            }
            radius += decayRate;
            decayRate /= 1.05;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TRebirth() { //Player respawn
    ObjMove_SetPosition(objPlayer,PlayerPosition[0], PlayerPosition[1]);
    if (GetPlayerState() == STATE_END) {
        Obj_SetVisible(objPlayer, false);
        SetForbidPlayerShot(true);
        return;
    }
    SetPlayerSpell(3);
    SetForbidPlayerShot(false);
    SetForbidPlayerSpell(true);
    SetPlayerInvincibilityFrame(240);

    RebirthEffect();
    loop (240) {yield;}
    SetForbidPlayerSpell(false);

    task RebirthEffect() {
        loop (55) { //blink red
            ObjRender_SetColor(objPlayer, 255, 0, 0);
            yield;
            ObjRender_SetColor(objPlayer, 255, 255, 255);
            loop (3) {yield;}
        }

        //blue circle indicating vulnerability
        ObjSound_Play(seVulnerable);
        let radius = 28;
        let circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
        ObjPrim_SetVertexCount(circle, 17);
        ascent(i in 0..17) {
            ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
        }
        loop (20) {
            ascent(i in 0..17) {
                let angleT = 360/16 * i;
                ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
            }
            radius -= 28/20;
            yield;
        }
        Obj_Delete(circle);
    }
}

task TGraze(x, y) { //Summon graze particle, add to particle list
    let xSpeed = rand(2, 3.2);
    let ySpeed = rand(2, 3.2);
    //chance to make speed negative
    if (rand_int(0, 1) == 1) xSpeed *= -1;
    if (rand_int(0, 1) == 1) ySpeed *= -1;

    ObjSound_Play(seGraze);
    AddScore(1000);

    let frame = 0;
    loop (43) {
        loop (2) {
            ObjParticleList_SetPosition(particleList, x, y, 1);
            ObjParticleList_SetExtraData(particleList, frame, 0, 0);
            ObjParticleList_SetColor(particleList, 0xEEBBAA);

            ObjParticleList_AddInstance(particleList);
            yield;
        }
        frame++;
        if (frame >= 7) {
            frame = 0;
        }
        x += xSpeed;
        y += ySpeed;
    }
}

function Alive() {
	return GetPlayerState == STATE_NORMAL || GetPlayerState == STATE_HIT;
}

function Shooting() {
    return (GetVirtualKeyState(VK_SHOT) != KEY_FREE) && IsPermitPlayerShot();
}