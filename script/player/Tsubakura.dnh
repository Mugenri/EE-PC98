#TouhouDanmakufu[Player]
#ScriptVersion[3]
#Title["Tsubakura Enraku"]
#ID["Tsubakura"]
#Text["Loafing Monochrome"]
#ReplayName["Tsubakura"]

#include "./lib/lib_player.dnh"

int _count = 0;
int _countShot = 0;

@Initialize {
    string imageFile = IMG_PLR_TSUBAKURA;
    string shotData = DIR_PLR ~ "TsubaShot.dnh";
    InitPlayer(imageFile, shotData, 4.5, 2.0, 16, 48);

    TShot();
}

@MainLoop {
    _count++;
    if (Shooting() && !IsPlayerSpellActive() && Alive()) _countShot++;
    else _countShot = -1;
    if (Alive()) SetPlayerItemScope(GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD ? _focusScope : _itemScope);
    yield;
}

@Event { PlayerEvent(); }

@Finalize {}

task TShot() {
    TCreateLaser();
    ascent (i in 0..11) TCreateLaserEffect(-i * 36);
    ascent (i in 0..6) TOption(i);
    loop {
        if (Shooting() && !IsPlayerSpellActive() && Alive() && _countShot % 10 == 0) {
            loop (3) {
                CallSFX(SND_PL_SHOT);
                wait(3);
            }
        }
        yield;
    }

    task TCreateLaser() { //Hitbox
        int objLaser = ObjShot_Create(OBJ_STRAIGHT_LASER);
        ObjShot_SetGraphic(objLaser, 1);
        ObjShot_SetDamage(objLaser, 2.5);
        Obj_SetVisible(objLaser, false);
        ObjShot_SetAutoDelete(objLaser, false);
        ObjShot_Regist(objLaser);
        

        while (!Obj_IsDeleted(_objPlayer)) {
            ObjMove_SetPosition(objLaser, GetPlayerX(), GetPlayerY());
            if (Shooting() && !IsPlayerSpellActive() && Alive()) ObjShot_SetIntersectionLine(objLaser, GetPlayerX(), GetPlayerY(), GetPlayerX(), GetPlayerY() - 600, 2);
            yield;
        }
        Obj_Delete(objLaser);
    }

    task TCreateLaserEffect(int yOff_) { //Graphic
        int objEffect = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(objEffect, _pathImg);
        ObjRender_SetTextureFilter(objEffect, FILTER_NONE, FILTER_NONE, FILTER_NONE);
        Obj_SetRenderPriorityI(objEffect, RP_STG_PLAYER - 1i);

        int frame = 0;

        while (!Obj_IsDeleted(_objPlayer)) {
            ObjRender_SetPosition(objEffect, GetPlayerX(), GetPlayerY() + yOff_ - 16, 1);
            ObjSprite2D_SetSourceRect(objEffect, 112, frame, 128, frame + 36);
            ObjSprite2D_SetDestCenter(objEffect);

            Obj_SetVisible(objEffect, Shooting() && !IsPlayerSpellActive() && Alive());

            frame += 3;
            if (frame > 11) frame = 0;
            yield;
        }
        Obj_Delete(objEffect);
    }
}


task TOption(int offset_) {
    int distUnfocus = 32;
    int distFocus = 18;
    int distCurrent = distUnfocus;

    int objOption = InitSprite2D(64, 48, 80, 64, _pathImg, RP_STG_PLAYER - 1i);
    ObjSprite2D_SetDestCenter(objOption);

    TOptionShot();

    float offset = 360 / 6 * offset_;
    while (!Obj_IsDeleted(_objPlayer)) {
        float rotationX = cos(_count * 4 + offset);
        distCurrent = (GetVirtualKeyState(VK_SLOWMOVE) != KEY_HOLD && GetVirtualKeyState(VK_SLOWMOVE) != KEY_PUSH) ? distUnfocus : distFocus;

        ObjRender_SetPosition(objOption, GetPlayerX() + distCurrent * rotationX, GetPlayerY() + distCurrent * sin(_count * 3 + 360 / 6 * offset_) * 0.8, 1);

        //Render over player as if rotating around them
        if (rotationX == 1) Obj_SetRenderPriorityI(objOption, RP_STG_EFF_PLR_LO);
        else if (rotationX == -1) Obj_SetRenderPriorityI(objOption, RP_STG_EFF_PLR_HI);

        Obj_SetVisible(objOption, Alive());
        yield;
    }

    task TOptionShot() {
        while (!Obj_IsDeleted(_objPlayer)) {
            float angleMod = cos(_count * 4 + 360 / 6 * offset_);
            if (GetVirtualKeyState(VK_SLOWMOVE) == KEY_HOLD || GetVirtualKeyState(VK_SLOWMOVE) == KEY_PUSH) angleMod = 0;
            if (Shooting() && Alive() && !IsPlayerSpellActive() && _countShot % 10 == 0) {
                loop (3) {
                    int shot = CreatePlayerShotA1(ObjRender_GetX(objOption), ObjRender_GetY(objOption), 28, 270 + 10 * angleMod, 1.5, 1, 1);
                    Obj_SetRenderPriorityI(shot, RP_STG_PLAYER);
                    wait(3);
                }
            }
            yield;
        }
    }
}

task TShotCancel(int obj_, float x_, float y_, int graphic_) { //Player shot deletion effect
    if (graphic_ != 1) return;
    float angle = ObjMove_GetAngle(obj_);
    float speed = ObjMove_GetSpeed(obj_);
    y_ -= speed * sin(angle);
    if (rand_int(1, 8) == 1) TShotParticle(x_, y_);

    int frame = 0;
    int frameRate = 2;
    while (frame < 4 * frameRate) {
        ObjParticleList_SetPosition(_particleShot, x_, y_, 1);
        ObjParticleList_SetExtraData(_particleShot, 6, frame / frameRate, 0);
        ObjParticleList_AddInstance(_particleShot);

        frame++;
        y_ -= 1;
        yield;
    }
}

task TSpell() { //TODO tsubakura bomb
    int objManage = GetSpellManageObject();

    SetForbidPlayerShot(true);
    SetPlayerInvincibilityFrame(310);
    ObjRender_SetColor(_objPlayer, COLOR_WHITE);
    SetPlayerSpeed(2.2, 2.2);

    // CallSFX(SND_PL_T_SPELL1);
    // CallSFX(SND_PL_T_SPELL2);

    TEffect();
    
    //spell time
    wait(250);

    SetForbidPlayerSpell(true);
    SetForbidPlayerShot(false);
    SetPlayerSpeed(4.5, 2.2);
    Obj_Delete(objManage);
    wait(40);

    //vulnerability indicator
    CallSFX(SND_PL_VULNERABLE);
    SetForbidPlayerSpell(false);
    float radius = 28;
    int circle = InitPrim2D(PRIMITIVE_LINESTRIP, 17, RP_STG_EFF_PLR_HI);
    ObjRender_SetColor(circle, COLOR_ICE);
    loop (20) {
        ascent (i in 0..17) {
            float angleT = 360 / 16 * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
        }
        radius -= 28 / 20;
        yield;
    }

    Obj_Delete(circle);

    task TEffect() {
        float radius = 0;
        int wCircle = CreateCircle(COLOR_WHITE);
        int bCircle = CreateCircle(COLOR_BLACK);

        //Expand Black Circle
        loop (70) {
            radius += 600 / 70;
            ObjPrim_SetVertexPosition(bCircle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent (i in 1..34) {
                float angleT = 360 / 32 * i;
                ObjPrim_SetVertexPosition(bCircle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
            }
            DeleteShotInCircle(TYPE_SHOT, TYPE_IMMEDIATE, GetPlayerX(), GetPlayerY(), radius);
            yield;
        }

        //Set White Circle to fill screen behind black circle
        ascent (i in 1..34) {
            float angleT = 360 / 32 * i;
            ObjPrim_SetVertexPosition(wCircle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
        }

        loop (30) {
            DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);
            yield;
        }

        //Retract Black Circle
        //CallSFX(SND_PL_T_SPELL3);
        loop (45) {
            ObjPrim_SetVertexPosition(bCircle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent (i in 1..34) {
                float angleT = 360 / 32 * i;
                ObjPrim_SetVertexPosition(bCircle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
            }
            DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);
            radius -= 600 / 45;
            yield;
        }
        Obj_Delete(bCircle);

        //Retract White Circle
        radius = 600;
        //CallSFX(SND_PL_T_SPELL3);
        loop (35) {
            ObjPrim_SetVertexPosition(wCircle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent (i in 1..34) {
                float angleT = 360 / 32 * i;
                ObjPrim_SetVertexPosition(wCircle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
            }
            DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);
            radius -= 600 / 35;
            yield;
        }
        Obj_Delete(wCircle);

        //monochrome ray
        //CallSFX(SND_PL_T_SPELL4);

        int laser = ObjSpell_Create();
        ObjSpell_SetEraseShot(laser, false);
        ObjSpell_SetDamage(laser, 45);
        ObjSpell_Regist(laser);

        float hitboxLength = 0;
        float modifier = 0;
        loop (60) {
            TCreateLaserEffect(1);
            TCreateLaserEffect(-1);
            modifier += 360 / 14;
            ObjSpell_SetIntersectionLine(laser, GetPlayerX(), GetPlayerY(), GetPlayerX(), GetPlayerY() - hitboxLength, 12);
            DeleteShotAll(TYPE_SHOT, TYPE_IMMEDIATE);
            hitboxLength += 28; //bullet speed
            yield;
        }
        Obj_Delete(laser);

        function<int> CreateCircle(int color_) {
            int circle = ObjSpell_Create();
            ObjSpell_SetDamage(circle, 0);
            ObjSpell_SetEraseShot(circle, false);
            ObjPrim_SetPrimitiveType(circle, PRIMITIVE_TRIANGLEFAN);
            ObjPrim_SetVertexCount(circle, 34);
            Obj_SetRenderPriorityI(circle, RP_STG_EFF_SPELL);
            ObjPrim_SetVertexPosition(circle, 0, GetPlayerX(), GetPlayerY(), 1);
            ObjRender_SetColor(circle, color_);
            ascent (i in 1..34) {
                float angleT = 360 / 32 * i;
                ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
            }
            ObjSpell_Regist(circle);
            return circle;
        }

        task TCreateLaserEffect(int direction_) {
            int shot1 = InitSprite2D(144, 0, 160, 16, _pathImg, RP_STG_PLAYER - 2i);
            ObjSprite2D_SetDestCenter(shot1);

            int shot2 = InitSprite2D(144, 16, 160, 32, _pathImg, RP_STG_PLAYER - 2i);
            ObjSprite2D_SetDestCenter(shot2);

            ObjRender_SetPosition(shot1, GetPlayerX() + 20 * direction_ * cos(modifier), GetPlayerY() + direction_ * 4, 1);
            ObjRender_SetPosition(shot2, GetPlayerX() + 15 * direction_ * cos(modifier + 90), GetPlayerY() + direction_ * 8, 1);
            loop (20) {
                ObjRender_SetY(shot1, ObjRender_GetY(shot1) - 28); //bullet speed
                ObjRender_SetY(shot2, ObjRender_GetY(shot2) - 28);
                yield;
            }
            Obj_Delete(shot1);
            Obj_Delete(shot2);
        }
    }
}