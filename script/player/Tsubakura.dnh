#TouhouDanmakufu[Player]
#ScriptVersion[3]
#Title["Tsubakura Enraku"]
#ID["Tsubakura"]
#Text["Loafing Monochrome"]
#ReplayName["Tsubakura"]

#include "./lib/lib_player.dnh"

objPlayer = GetPlayerObjectID();
let count = 0;
let countShot = 0;

//player specific sfx
let seSpell;
let seSpellCharge;
let seSpellWoosh;
let seSpellLaser;

@Initialize {
    let imageFile = plDir ~ "./../img/character/Tsubakura/tsubaStg.png";
    let shotData = plDir ~ "Tsubashot.dnh";
    InitPlayer(imageFile, shotData);
    SetPlayerSpeed(4.5, 2.2);

    TSound();
    TShot();
}

@MainLoop {
    count++;
    if (Shooting() && !IsPlayerSpellActive() && Alive()) {
        countShot++;
    } else {
        countShot = -1;
    }
    yield;
}

@Event
{
	PlayerEvent();
}

@Finalize {}

task TSound{
    //General player sounds
    InitSound();

    //Player specific sounds
    seSpell = ObjSound_Create();
    ObjSound_Load(seSpell, pathSE ~ "seSpellTsuba1.wav");
    ObjSound_SetSoundDivision(seSpell, SOUND_SE);
    ObjSound_SetVolumeRate(seSpell, seVolume);

    seSpellCharge = ObjSound_Create();
    ObjSound_Load(seSpellCharge, pathSE ~ "seSpellTsuba2.wav");
    ObjSound_SetSoundDivision(seSpellCharge, SOUND_SE);
    ObjSound_SetVolumeRate(seSpellCharge, seVolume);

    seSpellWoosh = ObjSound_Create();
    ObjSound_Load(seSpellWoosh, pathSE ~ "seSpellTsuba3.wav");
    ObjSound_SetSoundDivision(seSpellWoosh, SOUND_SE);
    ObjSound_SetVolumeRate(seSpellWoosh, seVolume);

    seSpellLaser = ObjSound_Create();
    ObjSound_Load(seSpellLaser, pathSE ~ "seSpellTsuba4.wav");
    ObjSound_SetSoundDivision(seSpellLaser, SOUND_SE);
    ObjSound_SetVolumeRate(seSpellLaser, seVolume);
}

task TShot() {
    CreateLaser();
    ascent(i in 0..13) {
        CreateLaserEffect(-i*32);
    }

    ascent(i in 0..6) {
        TOption(i);
    }

    loop {
        if (Shooting() && Alive() && !IsPlayerSpellActive() && countShot % 10 == 0) {
            loop(3) {
                ObjSound_Play(seShot);
                loop(3) {
                    yield;
                }
            }
        }
        yield;
    }

    task CreateLaser() { //Graphic
        let objLaser = ObjShot_Create(OBJ_STRAIGHT_LASER);
        ObjShot_SetGraphic(objLaser, 1);
        ObjShot_SetDamage(objLaser, 4);
        ObjLaser_SetIntersectionWidth(objLaser, 2);
        ObjLaser_SetLength(objLaser, 600);
        ObjShot_SetAutoDelete(objLaser, false);
        ObjLaser_SetInvalidLength(objLaser, 0, 0);
        ObjStLaser_SetAngle(objLaser, 270);
        ObjShot_Regist(objLaser);

        while (!Obj_IsDeleted(objPlayer)) {
            ObjMove_SetPosition(objLaser, GetPlayerX(), GetPlayerY());
            if (Shooting() && !IsPlayerSpellActive() && Alive()) {
                ObjShot_SetIntersectionEnable(objLaser, true);
            } else {
                ObjShot_SetIntersectionEnable(objLaser, false);
            }
            yield;
        }
        Obj_Delete(objLaser);
    }

    task CreateLaserEffect(yOff) { //Hitbox
        let objEffect = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(objEffect, pathImg);
        ObjRender_SetPosition(objEffect, GetPlayerX(), GetPlayerY() + yOff - 16, 1);
        Obj_SetRenderPriority(objEffect, 0.29);

        let frame = 0;

        while (!Obj_IsDeleted(objPlayer)) {
            ObjRender_SetPosition(objEffect, GetPlayerX(), GetPlayerY() + yOff - 16, 1);
            ObjSprite2D_SetSourceRect(objEffect, 160, frame*4, 176, frame*4+32);
            ObjSprite2D_SetDestCenter(objEffect);

            if (Shooting() && !IsPlayerSpellActive() && Alive()) {
                Obj_SetVisible(objEffect, true);
            } else {
                Obj_SetVisible(objEffect, false);
            }

            frame++;
            if (frame >= 8) {
                frame = 0;
            }
            yield;
        }
        Obj_Delete(objEffect);
    }
}


task TOption(offset) {
    let distUnfocus = 30;
    let distFocus = 18;
    let distCurrent = distUnfocus;

    let objOption = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(objOption, pathImg);
    ObjSprite2D_SetSourceRect(objOption, 179, 3, 189, 13);
    ObjSprite2D_SetDestCenter(objOption);
    Obj_SetRenderPriority(objOption, 0.29);

    OptionShot();

    while (!Obj_IsDeleted(objPlayer)) {
        let rotationX = cos(count*4 + 360/6*offset);
        if (GetVirtualKeyState(VK_SLOWMOVE) != KEY_HOLD && GetVirtualKeyState(VK_SLOWMOVE) != KEY_PUSH) {
            distCurrent = distUnfocus;
        } else {
            distCurrent = distFocus;
        }

        ObjRender_SetPosition(objOption, GetPlayerX() + distCurrent*rotationX, GetPlayerY() + distCurrent*sin(count*3 + 360/6*offset)*0.8, 1);

        //Render over player as if rotating around them
        if (rotationX == 1) {
            Obj_SetRenderPriority(objOption, 0.29);
        } else if (rotationX == -1) {
            Obj_SetRenderPriority(objOption, 0.30);
        }

        if (!Alive) {
            Obj_SetVisible(objOption, false);
        } else {
            Obj_SetVisible(objOption, true);
        }
        yield;
    }

    task OptionShot() {
        while (!Obj_IsDeleted(objPlayer)) {
            if (Shooting() && Alive() && !IsPlayerSpellActive() && countShot % 10 == 0) {
                loop(3) {
                    let optionX = ObjRender_GetX(objOption);
                    let optionY = ObjRender_GetY(objOption);
                    CreatePlayerShotA1(optionX, optionY, 28, 270, 0.5, 1, 1);
                    loop(3) {
                        yield;
                    }
                }
            }
            yield;
        }
    }
}

task TSpell() {
    let objManage = GetSpellManageObject();

    SetForbidPlayerShot(true);
    SetPlayerInvincibilityFrame(310);
    ObjRender_SetColor(objPlayer, 0xFFFFFF);
    SetPlayerSpeed(2.2, 2.2);

    ObjSound_Play(seSpell);
    ObjSound_Play(seSpellCharge);

    Effect();
    
    //spell time
    loop(250) {yield;}

    SetForbidPlayerSpell(true);
    SetForbidPlayerShot(false);
    SetPlayerSpeed(4.5, 2.2);
    Obj_Delete(objManage);
    loop(40) {yield;}

    //vulnerability indicator
    ObjSound_Play(seVulnerable);
    let radius = 28;
    let circle = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(circle, PRIMITIVE_LINESTRIP);
    ObjPrim_SetVertexCount(circle, 17);
    ascent(i in 0..17) {
        ObjPrim_SetVertexColor(circle, i, 170, 221, 255);
    }
    loop(20) {
        ascent(i in 0..17) {
            let angleT = 360/16 * i;
            ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
        }
        radius -= 28/20;
        yield;
    }

    Obj_Delete(circle);
    SetForbidPlayerSpell(false);

    task Effect() {
        let radius = 0;
        let wCircle = CreateCircle([255, 255, 255]);
        let bCircle = CreateCircle([0, 0, 0]);

        //Expand Black Circle
        loop(70) {
            radius += 600/70;
            ObjPrim_SetVertexPosition(bCircle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent(i in 1..34) {
                let angleT = 360/32 * i;
                ObjPrim_SetVertexPosition(bCircle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
            }
            ObjSpell_SetIntersectionCircle(bCircle, GetPlayerX(), GetPlayerY(), radius);
            yield;
        }

        //Set White Circle to fill screen behind black circle
        ascent(i in 1..34) {
            let angleT = 360/32 * i;
            ObjPrim_SetVertexPosition(wCircle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
        }
        ObjSpell_SetIntersectionCircle(wCircle, GetPlayerX(), GetPlayerY(), 600);

        loop(30) {
            ObjSpell_SetIntersectionCircle(wCircle, GetPlayerX(), GetPlayerY(), 600);
            yield;
        }

        //Retract Black Circle
        ObjSound_Play(seSpellWoosh);
        loop(45) {
            ObjPrim_SetVertexPosition(bCircle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent(i in 1..34) {
                let angleT = 360/32 * i;
                ObjPrim_SetVertexPosition(bCircle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
            }
            ObjSpell_SetIntersectionCircle(wCircle, GetPlayerX(), GetPlayerY(), 600);
            radius -= 600/45;
            yield;
        }
        Obj_Delete(bCircle);

        //Retract White Circle
        radius = 600;
        ObjSound_Play(seSpellWoosh);
        loop(35) {
            ObjPrim_SetVertexPosition(wCircle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent(i in 1..34) {
                let angleT = 360/32 * i;
                ObjPrim_SetVertexPosition(wCircle, i, GetPlayerX() + radius*cos(angleT), GetPlayerY() + radius*sin(angleT), 1);
            }
            ObjSpell_SetIntersectionCircle(wCircle, GetPlayerX(), GetPlayerY(), radius);
            radius -= 600/35;
            yield;
        }
        Obj_Delete(wCircle);

        //monochrome ray
        ObjSound_Play(seSpellLaser);

        let laser = ObjSpell_Create();
        ObjSpell_SetEraseShot(laser, true);
        ObjSpell_SetDamage(laser, 45);
        ObjSpell_Regist(laser);

        let hitboxLength = 0;
        let modifier = 0;
        loop(60) {
            CreateLaserEffect(1);
            CreateLaserEffect(-1);
            modifier += 360/14;
            ObjSpell_SetIntersectionLine(laser, GetPlayerX(), GetPlayerY(), GetPlayerX(), GetPlayerY() - hitboxLength, 12);
            hitboxLength += 28; //bullet speed
            yield;
        }
        Obj_Delete(laser);

        function CreateCircle(color) {
            let circle = ObjSpell_Create();
            ObjSpell_SetDamage(circle, 0);
            ObjSpell_SetEraseShot(circle, true);
            ObjPrim_SetPrimitiveType(circle, PRIMITIVE_TRIANGLEFAN);
            ObjPrim_SetVertexCount(circle, 34);
            Obj_SetRenderPriority(circle, 0.28);
            ObjPrim_SetVertexPosition(circle, 0, GetPlayerX(), GetPlayerY(), 1);
            ascent(i in 0..34) {
                ObjPrim_SetVertexColor(circle, i, color[0], color[1], color[2]);
            }
            ascent(i in 1..34) {
                let angleT = 360/32 * i;
                ObjPrim_SetVertexPosition(circle, i, GetPlayerX() + radius * cos(angleT), GetPlayerY() + radius * sin(angleT), 1);
            }
            ObjSpell_Regist(circle);
            return circle;
        }

        task CreateLaserEffect(direction) {
            let shot1 = ObjPrim_Create(OBJ_SPRITE_2D); //black bullet
            ObjPrim_SetTexture(shot1, pathImg);
            ObjSprite2D_SetSourceRect(shot1, 144, 0, 160, 16);
            ObjSprite2D_SetDestCenter(shot1);

            let shot2 = ObjPrim_Create(OBJ_SPRITE_2D); //white bullet
            ObjPrim_SetTexture(shot2, pathImg);
            ObjSprite2D_SetSourceRect(shot2, 144, 16, 160, 32);
            ObjSprite2D_SetDestCenter(shot2);

            ObjRender_SetPosition(shot1, GetPlayerX() + 20*direction*cos(modifier), GetPlayerY() + direction*4, 1);
            ObjRender_SetPosition(shot2, GetPlayerX() + 15*direction*cos(modifier + 90), GetPlayerY() + direction*8, 1);
            loop(20) {
                ObjRender_SetY(shot1, ObjRender_GetY(shot1) - 28); //bullet speed
                ObjRender_SetY(shot2, ObjRender_GetY(shot2) - 28);
                yield;
            }
            Obj_Delete(shot1);
            Obj_Delete(shot2);
        }
    }
}