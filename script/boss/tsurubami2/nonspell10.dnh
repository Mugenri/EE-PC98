#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nonspell 10"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -60;
int _loopTime = 120;
_spellID = 57 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(2600);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(40 + absolute(_count / 60));
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(60);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
}

task TMain() {
    int moveTime = 180;
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TWave(1);
                TRing(SHOT_PURPLE);
                wait(_loopTime / 2);
                TWave(-1);
                TRing(SHOT_RED_INV);
                wait(_loopTime / 2);
            }
        }
        if (_count % moveTime == 0 && _count >= 1) {
            Boss_MoveRadiusInBounds(_objBoss, 32, 48, MID_X - 64, MID_X + 64, 60, 80, 60, LERP_DECELERATE);
        }
        yield;
    }
}

task TWave(int dir_) {
    if (!Boss_Alive(_objBoss)) return;
    int color = dir_ == 1 ? SHOT_GRAY : SHOT_BLACK;
    int numShot = [8, 12, 15][_diff];
    float speed1 = [3.2, 4.2, 4.8][_diff];
    float speed2 = [6.2, 7, 8.5][_diff];
    float angleT = GetAngleToPlayer(_objBoss) + 90 * dir_;
    float decel = 0.08;
    float accel = 0.06;
    int waitTime = [7, 5, 4][_diff];
    int transformTime = 60;

    for (int i = 0; i < numShot; i++) {
        if (!Boss_Alive(_objBoss)) return;
        async {
            int shot = CreateShotUA2(Boss_X(_objBoss), Boss_Y(_objBoss), speed1, angleT, -decel, 0, 0, color+CARD, 0, color+SPAWN_S+SIZE_16, color+CANCEL_FADE);
            CallSFX(SND_SHOT1);
            wait(transformTime);
            if (!Boss_Alive(_objBoss)) return;
            ObjMove_AddPatternA2(shot, 0, NO_CHANGE, GetAngleToPlayer(shot), accel, speed2, 0);
        }
        angleT -= 180 / numShot * dir_;
        wait(waitTime);
    }
}

task TRing(int color_) {
    if (!Boss_Alive(_objBoss)) return;
    //charge anim
    int color = color_ == SHOT_RED_INV ? COLOR_RED : COLOR_PURPLE_L;
    Particle_ContractRing(_objBoss, 0, 100, 90, 30, 8, color);
    Particle_ContractRing(_objBoss, 0, 100, -90, 30, 8, color);
    wait(30);
    if (!Boss_Alive(_objBoss)) return;

    int numShot = [22, 26, 30][_diff];
    float speed = [2, 2, 2.8][_diff];
    int trailNum = [2, 2, 3][_diff];
    float trailInc = 0.8;
    int trailDelay = [4, 4, 3][_diff];
    float angleT = rand(0, 360);

    float xPos = Boss_X(_objBoss);
    float yPos = Boss_Y(_objBoss);

    for (int i = 0; i < numShot; i++) {
        for (int j = trailNum; j >= 0; j--) {
            CreateShotUA1(xPos, yPos, speed, angleT + trailInc * j, color_+KUNAI, trailDelay * j, color_+CANCEL_SPARKLE);
            CreateShotUA1(xPos, yPos, speed, angleT - trailInc * j, color_+KUNAI, trailDelay * j, color_+CANCEL_SPARKLE);
        }
        CreateShotUA1(xPos, yPos, speed, angleT, color_+KUNAI, 0, color_+CANCEL_SPARKLE);
        angleT += 360 / numShot;
    }
    CallSFX(SND_SHOT2);
}