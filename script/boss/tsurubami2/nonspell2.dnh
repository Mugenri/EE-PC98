#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nonspell 2"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -60;
int _loopTime = [360, 360, 220][_diff];
_spellID = 6 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(40 + absolute(_count / 60));
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 80, 30, LERP_DECELERATE);
    wait(60);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 70, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TRing(1);
                wait(_loopTime / 2);
                TRing(-1);
            }
        }
        yield;
    }
}

task TRing(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    Animation_Charge(_objBoss, true);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 100, 0, 30, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 100, 90 * dir_, 30, 8, COLOR_BLUE);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 100, 90 * dir_, 30, 8, COLOR_GRAY);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 100, 90 * dir_, 30, 8, COLOR_GRAY_L);
    wait(30);
    Animation_Charge(_objBoss, false);

    //patternshot ring with angular velocity
    int way = 16;
    float speed = [6, 6, 6.8][_diff];
    float wVel = [4.5, 4.5, 5.4][_diff] * dir_;
    int frames = 90;
    float accel = speed / frames;

    int ring = Shot_CreatePattern(_objBoss, PATTERN_RING, way, 1, speed, 0, rand(0, 360), 0, 32, 0);

    int[] shots = Shot_FirePatternA(ring, SHOT_GRAY+CARD, SHOT_GRAY+SPAWN_S+SIZE_16, SHOT_GRAY+CANCEL_FADE);
    CallSFX(SND_SHOT1);

    Boss_MoveRadiusInBounds(_objBoss, 40, 60, MID_X - 60, MID_X + 60, 60, 80, 50, LERP_DECELERATE);

    for each (shot in shots) {
        ObjShot_SetSpellResist(shot, true);
        ObjShot_SetAutoDelete(shot, false);
        ObjMove_AddPatternA2(shot, 0, NO_CHANGE, ObjMove_GetAngle(shot) + 90 * -dir_, -accel, 0, wVel);
    }

    TSluggy(shots);

    wait(frames);
    for each (shot in shots) ObjShot_SetAutoDelete(shot, true);

    Obj_Delete(ring);

    task TSluggy(int[] shots_) {
        wait(20);
        int loopNum = [14, 20, 24][_diff];
        int trailNum = 1;
        int frames = [60, 60, 8][_diff];
        float maxSpeed = [1.6, 1.7, 2.8][_diff];
        float accel = maxSpeed / frames;
        int waitTime = [4, 3, 2][_diff];

        for each (shot in shots_) {
            ObjShot_SetDeleteFrame(shot, loopNum * waitTime + 10);
        }

        for (int i = 0; i < loopNum; i++) {
            if (!Boss_Alive(_objBoss)) return;
            int color = i < loopNum / 2 ? SHOT_BLUE : SHOT_GRAY;
            for each (shot in shots) {
                async {
                    int trail = CreateShotUA1(ObjMove_GetX(shot), ObjMove_GetY(shot), 4, ObjMove_GetAngle(shot) + 90 * dir_, color+SCALE, 0, color+CANCEL_SPARKLE);
                    ObjShot_SetAutoDelete(trail, false);
                    wait(20);
                    for (int i = 0; i < 32; i+= 2) {
                        ObjMove_AddPatternA2(trail, frames * i, NO_CHANGE, NO_CHANGE, accel, maxSpeed, 0);
                        ObjMove_AddPatternA2(trail, frames + frames * i, NO_CHANGE, NO_CHANGE, -accel, 0, 0);
                    }
                    ObjMove_AddPatternA2(trail, frames * 32, NO_CHANGE, NO_CHANGE, accel, maxSpeed, 0);
                    wait(60);
                    ObjShot_SetAutoDelete(trail, true);
                }
            }
            CallSFX(SND_SHOT2);
            wait(waitTime);
        }
    }

}