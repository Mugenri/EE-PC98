#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nonspell 3"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -60;
int _loopTime = [220, 220, 180][_diff];
_spellID = 12 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(40 + absolute(_count / 60));
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(60);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TWave(1);
                wait(_loopTime / 2);
                TWave(-1);
            }
        }
        yield;
    }
}

task TWave(int dir_) {
    if (!Boss_Alive(_objBoss)) return;
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 100, 0, 30, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 100, 90 * dir_, 30, 8, COLOR_GRAY_L);
    wait(30);

    if (!Boss_Alive(_objBoss)) return;

    int shotNum = [19, 23, 61][_diff];
    float speed = [3.0, 3.2, 10][_diff];
    int waitTime = [8, 6, 2][_diff];

    int splitNum = [2, 2, 1][_diff];
    float xSpeedMin = [1.6, 1.8, 2.1][_diff];
    float xSpeedMax = [2.4, 2.6, 2.8][_diff];
    float ySpeedMin = 0.8;
    float ySpeedMax = 1.5;
    float hopSpeed = 3;
    float maxSpeed = [1.1, 1.3, 1.6][_diff];

    for (int i = 0; i < shotNum; i++) {
        if (!Boss_Alive(_objBoss)) return;
        float angleT = Interpolate_Linear(90, 90 + (120 * dir_), i / as_float(shotNum - 1));
        int color = i % 2 == 0 ? SHOT_GRAY : SHOT_BLACK;
        int shot = CreateShotUA1(clamp(Boss_X(_objBoss), MIN_X, MAX_X), Boss_Y(_objBoss), speed, angleT, color+CARD, 0, color+SPAWN_S+SIZE_16, color+CANCEL_FADE);
        TSplit(shot);
        CallSFX(SND_SHOT1);
        wait(waitTime);
    }

    if (!Boss_Alive(_objBoss)) return;
    Boss_MoveRadiusInBounds(_objBoss, 48, 48, MID_X - 64, MID_X + 64, 32, 100, 40, LERP_DECELERATE);

    task TSplit(int shot_) {
        while (Shot_IsInBoundsX(shot_) && !Obj_IsDeleted(shot_)) yield;
        if (!Boss_Alive(_objBoss) || Obj_IsDeleted(shot_)) return;

        loop (splitNum) {
            async {
                float angle = ObjMove_GetAngle(shot_) + 180 + rand(-50, 50);
                int child = CreateShotUB2(ObjMove_GetX(shot_), ObjMove_GetY(shot_), rand(xSpeedMin, xSpeedMax) * dir_, rand(ySpeedMin, ySpeedMax), 0, -0.022, 0, -maxSpeed, SHOT_BLUE+FIRE_S, 0, SHOT_BLUE+CANCEL_SPARKLE);
                ObjShot_SetAutoDelete(child, false);
                wait(80);
                ObjShot_SetAutoDelete(child, true);
            }
        }
        CallSFX(SND_SHOT2);

        ObjShot_SetDeleteFrame(shot_, 0);
    }
}