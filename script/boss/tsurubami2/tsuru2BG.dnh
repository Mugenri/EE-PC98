//Tsurubami backgrounds
#include "./../../lib/lib_Common.dnh"
#include "./../../lib/lib_Background.dnh"

@Initialize {
    SetAutoDeleteObject(true);
    BG_Init(GetScriptArgument(0));
}

@Event { BG_Event(); }

@MainLoop { yield; }

function<void> ChangeIndex(int index_, int priority_) {
    //change to index (starts shutdown for current bg)
    _bIndex = index_;
    alternative (index_)
    case (0) { TBackground(index_, priority_, COLOR_RED_DD); }
    case (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18) { TSpellBackground(index_, priority_); }
    case (20) { TBackground(index_, priority_, COLOR_RED_D); }
    case (21) { TBackground(index_, priority_, COLOR_RED); }
    others { assert(false, IntToString(index_) ~ " is an invalid background index."); }
}

task TBackground(int index_, int priority_, color_) {
    bool exitFlag = false;
    //black bg
    int black = InitSprite2D(0, 0, MAX_X, MAX_Y, priority_);
    ObjRender_SetColor(black, COLOR_BLACK);
    //glass
    int glass = InitSprite2D(768, 0, 1152, 368, IMG_BG_TSURUBAMI_2, priority_ + 1);
    ObjRender_SetColor(glass, COLOR_BLACK);
    //bg
    int bg = InitSprite2D(0, 0, 384, 368, IMG_BG_TSURUBAMI_2, priority_ + 1);

    int count = 0;
    int frames = 90;

    while (!exitFlag) {
        if (index_ != _bIndex) {
            async { exitFlag = BG_Exit(); }
            index_ = _bIndex;
        }
        if (count % frames == 0) TEffect();
        count++;
        yield;
    }

    Obj_Delete(bg);
    Obj_Delete(glass);
    Obj_Delete(black);

    task TEffect() {
        //expanding prim
        int circle = InitPrim2D(PRIMITIVE_TRIANGLEFAN, 32, priority_);
        ObjRender_SetColor(circle, color_);

        for (int i = 0; i < frames * 0.25; i++) {
            float rad = Interpolate_Accelerate(0, 350, i / as_float(frames * 0.25 - 1));

            ObjPrim_SetVertexPosition(circle, 0, MID_X, MID_Y, 1);
            for (int i = 0; i < 31; i++) {
                float angleT = 360 / 30 * i;
                ObjPrim_SetVertexPosition(circle, i + 1, MID_X + rad * cos(angleT), MID_Y + rad * sin(angleT), 1);
            }
            yield;
        }

        for (int i = 0; i < frames * 0.75; i++) {
            ObjRender_SetColor(circle, Interpolate_X_PackedInt(color_, COLOR_BLACK, i / as_float(frames * 0.75 - 1), LERP_SMOOTH));
            yield;
        }
        Obj_Delete(circle);
    }
}

task TSpellBackground(int index_, int priority_) {
    bool exitFlag = false;
    //black bg
    int black = InitSprite2D(0, 0, MAX_X, MAX_Y, priority_);
    ObjRender_SetColor(black, COLOR_BLACK);
    //character silhouette
    int xNum = (index_ - 1) % 6;
    int yNum = (index_ - 1) / 6;
    int character = InitSprite2D((MID_X * xNum), MAX_Y + (MID_Y * yNum), (MID_X * xNum) + MID_X, MAX_Y + (MID_Y * yNum) + MID_Y, IMG_BG_TSURUBAMI_2, priority_ + 1);
    ObjRender_SetPosition(character, 1, 1, 1);
    ObjRender_SetScaleXYZ(character, 2, 2, 1);
    //torii & kanji
    int bg = InitSprite2D(384, 0, 768, 368, IMG_BG_TSURUBAMI_2, priority_ + 1);

    int count = 0;
    int color = 0;
    int lineColor = COLOR_RED_D;
    int cMin = 0;
    int cMax = 3;
    bool increment = true;

    if (index_ >= 16) {
        ObjSprite2D_SetSourceRect(bg, 1152, 0, 1536, 368);
        cMin = 18;
        cMax = 21;
        lineColor = COLOR_GRAY_D;
    }

    TLineEffect(lineColor);

    while (!exitFlag) {
        if (index_ != _bIndex) {
            async { exitFlag = BG_Exit(); }
            index_ = _bIndex;
        }

        color = round(Interpolate_Linear(cMin, cMax, sin(count - 180) * 0.5 + 0.5));
        color *= 12;

        if (index_ < 16) ObjRender_SetColor(black, color, 0, 0);
        else ObjRender_SetColor(black, color, color, color);
        count++;
        yield;
    }

    Obj_Delete(black);
    Obj_Delete(character);
    Obj_Delete(bg);

    task TLineEffect(int lineColor_) {
        //Used for movement
        int count = 0;

        //starting point for line columns/rows
        int xOrigin = -17;
        int yOrigin = -26;

        int x = xOrigin;
        int y = yOrigin;

        //Vertical Lines
        loop (5) {
            TCreateLine(x, y, 71, 7, true);
            x += 139;
        }

        x = xOrigin - 139; //need one point back to cover full range of motion
        y = yOrigin + 70; //Height of a rectangle

        //Horizontal Lines
        loop (5) {
            TCreateLine(x, y, 140, 7, false);
            y += 70;
        }

        //Movement
        while (!exitFlag) {
            if (count >= 140) count = 0;
            count++;
            yield;
        }

        task TCreateLine(int xStart_, int yStart_, int step_, int points_, bool vertical_) {
            int[][] positions = [];

            int line = InitPrim2D(PRIMITIVE_LINESTRIP, points_, priority_);
            for (int i = 0; i < points_; i++) {
                ObjPrim_SetVertexColor(line, i, lineColor_);
                ObjPrim_SetVertexPosition(line, i, xStart_, yStart_, 1);
                positions ~= [[xStart_, yStart_]];
                if (vertical_) yStart_ += step_;
                else xStart_ += step_;
            }

            //set positions based on grid position and multiplier based on distance from the middle
            while (!exitFlag) {
                ascent (i in 0..length(positions)) {
                    int xCurr = positions[i][0] - count;
                    int yCurr = positions[i][1];
                    xCurr -= (xCurr - MID_X) * 0.06 * (absolute(yCurr - MID_Y) * 0.02);
                    yCurr += (yCurr - MID_Y) * 0.06 * (absolute(xCurr - MID_X) * 0.02);

                    ObjPrim_SetVertexPosition(line, i, xCurr, yCurr, 1);
                }
                yield;
            }
            Obj_Delete(line);
        }
    }
}