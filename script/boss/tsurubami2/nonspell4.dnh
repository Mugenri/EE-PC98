#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nonspell 4"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -60;
int _loopTime = [300, 300, 260][_diff];
_spellID = 18 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3300);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(42 + absolute(_count / 60));
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(60);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 45, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TRing(1);
                wait(_loopTime / 2);
                TRing(-1);
            }
        }
        yield;
    }
}

task TRing(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    //charge
    Animation_Charge(_objBoss, true);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 128, 0, 20, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 128, 90, 20, 12, COLOR_GRAY_L);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 128, -90, 20, 12, COLOR_GRAY_L);
    wait(20);
    Animation_Charge(_objBoss, false);

    if (!Boss_Alive(_objBoss)) return;

    //centerpoint
    float xPos = Boss_X(_objBoss);
    float yPos = Boss_Y(_objBoss);
    float ySpeed = -2;
    float yAccel = 0.03;
    float yMax = [1.6, 1.6, 2][_diff];
    //ring
    int cap = [36, 46, 56][_diff];
    int numShot = min(cap, [30, 40, 48][_diff] + (_count / _loopTime));
    float rad = 0;
    float radMax = [220, 220, 235][_diff];
    float baseAngle = 90 + 60 * dir_;
    float angleT = baseAngle;
    float rotSpeed = 0.44 * dir_;
    //conversion
    int delay = [5, 4, 3][_diff]; //delay between each index
    int sustain = 40; //hold time of transformation
    //full rotation is numShot * delay frames
    bool delete = false;

    int prim = InitPrim2D(PRIMITIVE_LINESTRIP, numShot + 1, RP_STG_EFF_MID);
    ObjRender_SetColor(prim, COLOR_RED);

    for (int i = 0; i < numShot; i++) {
        int color = [SHOT_GRAY, SHOT_BLACK][i % 2];
        int shot = CreateShotUA1(xPos, yPos, 0, 0, color+CARD, 0, color+SPAWN_S+SIZE_8, color+CANCEL_BURST1);
        ObjShot_SetAutoDelete(shot, false);
        TTrack(shot, i);
    }
    CallSFX(SND_SHOT1);

    Boss_MoveRadiusInBounds(_objBoss, 48, 96, MID_X - 72, MID_X + 72, 48, 64, 60, LERP_DECELERATE);

    int frame = 0;
    int frames = 60;
    while (Boss_Alive(_objBoss) && yPos < MAX_Y + radMax + 64) { //move centerpoint
        yPos += ySpeed;
        ySpeed = min(ySpeed + yAccel, yMax);
        baseAngle += rotSpeed;
        rad = Interpolate_Decelerate(0, radMax, frame / as_float(frames));
        frame = min(frame + 1, frames);

        //prim
        for (int i = 0; i < numShot + 1; i++) {
            float angleT = baseAngle + (360 / numShot * i);
            ObjPrim_SetVertexPosition(prim, i, xPos + rad * cos(angleT), yPos + rad * sin(angleT), 1);
        }
        yield;
    }

    delete = true;
    Obj_Delete(prim);

    task TTrack(int shot_, int index_) { //track with centerpoint
        int transformTime = index_ * delay; //position in circle
        int frame = 0;
        int color = [SHOT_GRAY, SHOT_BLACK][index_ % 2];

        while (Boss_Alive(_objBoss) && !Obj_IsDeleted(shot_)) {
            if (delete) {
                ObjShot_SetDeleteFrame(shot_, 0);
                break;
            }
            float angleT = baseAngle + (360 / numShot * index_) * dir_;
            ObjMove_AddPatternD2(shot_, 0, xPos + rad * cos(angleT), yPos + rad * sin(angleT), 1, LERP_LINEAR);

            if ((frame + transformTime) % (numShot * delay) == 0) {
                async {
                    int shot = CreateShotUA1(ObjMove_GetX(shot_), ObjMove_GetY(shot_), 0, 0, color+BUBBLE, 0, color+SPAWN_E+SIZE_32, color+CANCEL_64);
                    loop (sustain) {
                        ObjMove_SetPosition(shot, ObjMove_GetX(shot_), ObjMove_GetY(shot_));
                        yield;
                    }
                    ObjMove_SetSpeed(shot, ObjMove_GetSpeed(shot_));
                    ObjMove_SetAngle(shot, ObjMove_GetAngle(shot_));
                    ObjShot_SetDeleteFrame(shot, 0);
                }
            }

            frame++;
            yield;
        }
    }

}