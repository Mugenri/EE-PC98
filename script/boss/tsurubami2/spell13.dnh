#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 13"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = 120;
_spellID = 69 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TArrow();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Spell(24, 13, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(20, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TRing(1);
                wait(_loopTime / 2);
                TRing(-1);
            }
        }
        yield;
    }
}

task TRing(int dir_) { //blood
    if (!Boss_Alive(_objBoss)) return;
    float xPos = Boss_X(_objBoss);
    float yPos = Boss_Y(_objBoss);
    int way = 52;
    int stack = [2, 3, 4][_diff];
    float speed1 = [5, 5, 5.5][_diff];
    float speed2 = [1, 1, 1.3][_diff];
    float angleT = rand(0, 360);
    float decel = 0.1;
    float wVel1 = [2.4, 1.5, 1.5][_diff];
    float wVel2 = [2.9, 3.8, 4.2][_diff];
    int waitTime = 30;
    int turnTime = 20;

    for (int i = 0; i < way; i++) {
        for (int j = 0; j < stack; j++) {
            float wVel = Interpolate_Linear(wVel1, wVel2, j / as_float(stack - 1));
            int shot = CreateShotUA1(xPos, yPos, speed1, angleT, SHOT_RED+CRYSTAL_S, 0, SHOT_RED+SPAWN_S+SIZE_16, SHOT_RED+CANCEL_BURST1);
            ObjMove_AddPatternA2(shot, waitTime, NO_CHANGE, NO_CHANGE, -decel, speed2, wVel * dir_);
            ObjMove_AddPatternA2(shot, waitTime + turnTime, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, 0);
        }
        angleT += 360 / way;
    }
    CallSFX(SND_SHOT1);
}

task TArrow() { //flame
    while (_count < 0) yield;
    int loopTime = 220;
    int stack = [5, 6, 6][_diff];
    int spread = [9, 9, 11][_diff];
    float xPos = Boss_X(_objBoss);
    float yPos = Boss_Y(_objBoss);
    float xInc = 4;
    float speedMin = 3;
    float speedMax = 7;
    float accel = 0.1;
    int delay = 3;
    int waitTime = 8;

    Animation_Charge(_objBoss, true);
    while (Boss_Alive(_objBoss)) {
        CallSFX(SND_CHARGE1);
        loop (4) {
            Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 120, 0, 30, 32, COLOR_RED_L, false, RP_STG_EFF_MID);
            wait(3);
            Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 120, 90, 30, 8, COLOR_RED);
            wait(3);
            Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 120, 0, 30, 32, COLOR_RED_L, false, RP_STG_EFF_MID);
            wait(3);
            Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 120, -90, 30, 8, COLOR_RED_D);
            wait(3);
        }
        wait(52);

        loop (stack) {
            if (!Boss_Alive(_objBoss)) return;
            float pX = GetPlayerX();
            float pY = GetPlayerY();
            float angleT = dottheta(xPos, yPos, pX, pY);
            CreateShotUA2(xPos, yPos, speedMin, angleT, accel, speedMax, 0, SHOT_RED_INV+FIRE_A, 0, SHOT_RED_INV+SPAWN_S+SIZE_32, SHOT_RED_INV+CANCEL_32);
            CreateShotUA2(xPos, yPos, speedMin, angleT + 180, accel, speedMax, 0, SHOT_RED_INV+FIRE_A, 0, SHOT_RED_INV+SPAWN_S+SIZE_32, SHOT_RED_INV+CANCEL_32);
            for (int i = 1; i < spread; i++) {
                CreateShotUA2(xPos + i * xInc, yPos, speedMin, angleT, accel, speedMax, 0, SHOT_RED_INV+FIRE_S, delay * i, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST2);
                CreateShotUA2(xPos - i * xInc, yPos, speedMin, angleT, accel, speedMax, 0, SHOT_RED_INV+FIRE_S, delay * i, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST2);
                CreateShotUA2(xPos + i * xInc, yPos, speedMin, angleT + 180, accel, speedMax, 0, SHOT_RED_INV+FIRE_S, delay * i, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST2);
                CreateShotUA2(xPos - i * xInc, yPos, speedMin, angleT + 180, accel, speedMax, 0, SHOT_RED_INV+FIRE_S, delay * i, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST2);
            }
            CallSFX(SND_SHOT2);
            wait(waitTime);
        }
    }
}