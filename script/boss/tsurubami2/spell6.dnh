#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 6"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [800, 780, 760][_diff];
_spellID = 33 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4500);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, MID_Y, 30, LERP_DECELERATE);
    wait(30);
    Transition_Spell(17, 6, 0); //TODO
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFire(1);
                wait(_loopTime / 2);
                TFire(-1);
            }
        }
        yield;
    }
}

task TFire(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    CallSFX(SND_CHARGE1);
    Animation_Charge(_objBoss, true);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 125, 0, 45, 32, COLOR_PURPLE, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, -90 * dir_, 45, 8, COLOR_RED);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, -90 * dir_, 45, 8, COLOR_RED);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, -90 * dir_, 45, 8, COLOR_RED_D);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, -90 * dir_, 45, 8, COLOR_RED_D);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 125, 0, 45, 32, COLOR_RED_D, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, 90 * dir_, 45, 8, COLOR_PURPLE_L);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, 90 * dir_, 45, 8, COLOR_PURPLE_L);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, 90 * dir_, 45, 8, COLOR_PURPLE);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 125, 90 * dir_, 45, 8, COLOR_PURPLE);
    wait(45);
    Animation_Charge(_objBoss, false);
    if (!Boss_Alive(_objBoss)) return;

    int numShot = [10, 12, 13][_diff];
    float speed = [1.7, 1.7, 1.9][_diff];
    float angleT = rand(0, 360);
    float accel = 0.05;
    float wvel = [1.5, 1.5, 1.8][_diff];
    float wmod = [0.6, 0.6, 0.5][_diff];
    int waitTime = 8;

    //main
    for (int i = 0; i < numShot; i++) {
        int shot = CreateShotUA2(Boss_X(_objBoss), Boss_Y(_objBoss), 0, angleT + 180 + 45 * dir_, accel, speed, wvel * dir_, SHOT_PURPLE_INV+FIRE_A, 0, SHOT_PURPLE+SPAWN_S+SIZE_32, SHOT_PURPLE+CANCEL_32);
        ObjShot_SetSpellResist(shot, true);
        ObjMove_AddPatternA2(shot, 90, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, 0);
        TSplit(shot);
        angleT += 360 / numShot;
    }
    CallSFX(SND_SHOT1);

    wait(waitTime);
    if (!Boss_Alive(_objBoss)) return;

    //trail
    int loopNum = [5, 7, 9][_diff];
    for (int i = 0; i < loopNum; i++) {
        if (!Boss_Alive(_objBoss)) return;
        for (int j = 0; j < numShot; j++) {
            int shot = CreateShotUA2(Boss_X(_objBoss), Boss_Y(_objBoss), 0, angleT + 180 + 45 * dir_, accel, speed, wvel * dir_, SHOT_RED_INV+KNIFE, 0, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST1);
            ObjMove_AddPatternA2(shot, 60, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, (wvel + wmod * i) * dir_);
            ObjMove_AddPatternA2(shot, 90, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, 0);
            shot = CreateShotUA2(Boss_X(_objBoss), Boss_Y(_objBoss), 0, angleT + 180 + 45 * dir_, accel, speed, -wvel * dir_, SHOT_RED_INV+KNIFE, 0, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST1);
            ObjMove_AddPatternA2(shot, 60, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, (-wvel - wmod * i) * dir_);
            ObjMove_AddPatternA2(shot, 90, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, 0);
            angleT += 360 / numShot;
        }
        CallSFX(SND_SHOT1);
        wait(waitTime);
    }

    task TSplit(int shot_) {
        while (Shot_IsInBounds(shot_)) yield;
        if (!Boss_Alive(_objBoss)) return;
        ObjMove_SetPosition(shot_, clamp(ObjMove_GetX(shot_), MIN_X, MAX_X), clamp(ObjMove_GetY(shot_), MIN_Y, MAX_Y));

        float xPos = ObjMove_GetX(shot_);
        float yPos = ObjMove_GetY(shot_);
        float angleT = ObjMove_GetAngle(shot_) + 180;
        ObjShot_SetDeleteFrame(shot_, 0);

        //laser
        int laserSustain = 240;
        int laserDelay = 60;
        CreateStraightLaserUA1(xPos, yPos, angleT, 550, laserSustain, COLOR_MAGENTA, laserDelay);
        wait(laserDelay);
        if (!Boss_Alive(_objBoss)) return;
        CallSFX(SND_LASER1);

        //shots
        int splitDist = [22, 21.5, 19][_diff];
        float speedSplit = 0.3;
        float speedSplit2 = [1.3, 1.4, 1.5][_diff];
        float accel = 0.008;
        float aMod = 90;
        float xStep = splitDist * cos(angleT);
        float yStep = splitDist * sin(angleT);
        int waitTime = [90, 90, 60][_diff];
        while (xPos >= MIN_X && xPos <= MAX_X && yPos >= MIN_Y && yPos <= MAX_Y) {
            int shot = CreateShotUA2(xPos, yPos, 0, angleT + aMod, accel, speedSplit, 0, SHOT_PURPLE+FIRE_S, 0, SHOT_PURPLE+SPAWN_E+SIZE_16, SHOT_PURPLE+CANCEL_BURST2);
            ObjMove_AddPatternA2(shot, waitTime, NO_CHANGE, NO_CHANGE, NO_CHANGE, speedSplit2, 0);
            xPos += xStep;
            yPos += yStep;
            aMod *= -1;
        }
        wait(waitTime);
        if (!Boss_Alive(_objBoss)) return;
        CallSFX(SND_SHOT2);

    }
}