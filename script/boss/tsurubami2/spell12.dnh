#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 12"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = 300;
_spellID = 66 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3500);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, MID_Y, 30, LERP_DECELERATE);
    wait(30);
    Transition_Spell(23, 12, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(20, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TJump();
            }
        }
        yield;
    }
}

task TJump() {
    //hop skip explode
    if (!Boss_Alive(_objBoss)) return;

    int frames = 30;
    float x1 = Boss_X(_objBoss);
    float y1 = Boss_Y(_objBoss);
    float xDist = 20;
    float yDist = 30;

    CallSFX(SND_SHOT2);
    for (int i = 0; i < frames; i++) {
        if (!Boss_Alive(_objBoss)) return;
        float x2 = Interpolate_Smooth(x1, x1 + xDist, i / as_float(frames - 1));
        float y2 = Interpolate_Decelerate(y1, y1 - yDist, (2 * i) / as_float(frames - 1));
        ObjMove_SetDestAtFrame(_objBoss, x2, y2, 1, LERP_LINEAR);
        yield;
    }

    CallSFX(SND_SHOT2);
    for (int i = 0; i < frames; i++) {
        if (!Boss_Alive(_objBoss)) return;
        float x2 = Interpolate_Smooth(x1 + xDist, x1, i / as_float(frames - 1));
        float y2 = Interpolate_Decelerate(y1, y1 - yDist, (2 * i) / as_float(frames - 1));
        ObjMove_SetDestAtFrame(_objBoss, x2, y2, 1, LERP_LINEAR);
        yield;
    }

    //up
    if (!Boss_Alive(_objBoss)) return;
    CallSFX(SND_CHARGE2);
    ObjMove_SetDestAtFrame(_objBoss, x1, y1 - MAX_Y - 64, 30, LERP_LINEAR);
    //wait
    wait(30);
    if (!Boss_Alive(_objBoss)) return;
    float xDest = rand(MID_X - 72, MID_X + 72);
    ObjMove_SetPosition(_objBoss, xDest, -80);
    wait(30);
    //down
    if (!Boss_Alive(_objBoss)) return;
    ObjMove_SetDestAtFrame(_objBoss, Boss_X(_objBoss), MID_Y, 20, LERP_LINEAR);
    wait(20);

    //boom
    if (!Boss_Alive(_objBoss)) return;
    CallSFX(SND_SHOT4);

    TAim();
    TRing();

    task TAim() {
        int way = [5, 5, 7][_diff];
        int stack = [13, 16, 22][_diff];
        float xPos = Boss_X(_objBoss);
        float yPos = Boss_Y(_objBoss);
        float speedMin = [2, 2, 2.4][_diff];
        float speedMax = [6.4, 6.4, 7][_diff];
        float arc = [26, 25, 22][_diff];
        float spread = 2;
        int delay = 3;

        for (int i = 0; i < stack; i++) {
            if (!Boss_Alive(_objBoss)) return;
            float angleT = GetAngleToPlayer(_objBoss);
            float angleTemp = angleT - arc * (way ~/ 2);
            float speed = Interpolate_Linear(speedMin, speedMax, i / as_float(stack - 1));
            CreateShotUA1(xPos, yPos, speed + 1, angleT + rand(-spread, spread), SHOT_ORANGE+FIRE_A, 0, SHOT_ORANGE+SPAWN_S+SIZE_32, SHOT_ORANGE+CANCEL_32);
            CreateShotUA1(xPos, yPos, speed + 1, angleT + rand(-spread, spread), SHOT_RED+FIRE_A, 1, SHOT_RED+SPAWN_S+SIZE_32, SHOT_RED+CANCEL_32);
            for (int j = 0; j < way; j++) {
                float ang = angleTemp + arc * j;
                if (ang == angleT) continue;
                CreateShotUA1(xPos, yPos, speed, ang + rand(-spread, spread), SHOT_WHITE+BULLET, 0, SHOT_WHITE+SPAWN_S+SIZE_16, SHOT_WHITE+CANCEL_BURST2);
                CreateShotUA1(xPos, yPos, speed, ang + rand(-spread, spread), SHOT_ORANGE+BULLET, 0, SHOT_ORANGE+SPAWN_S+SIZE_16, SHOT_ORANGE+CANCEL_BURST2);
            }
            CallSFX(SND_SHOT1);
            wait(delay);
        }
    }

    task TRing() {
        int way = [4, 7, 7][_diff];
        int wayInc = [3, 3, 4][_diff];
        int stack = [21, 21, 23][_diff];
        float xPos = Boss_X(_objBoss);
        float yPos = Boss_Y(_objBoss);
        float fallSpeed = [2.1, 2.2, 2.4][_diff];
        float accel = 0.02;
        float minRad = 32;
        float maxRad = 400;
        float pDist = 48;
        float waitTime = 6;
        float angleT = rand(0, 360);

        for (int i = 0; i < stack; i++) {
            if (!Boss_Alive(_objBoss)) return;
            float rad = Interpolate_Linear(minRad, maxRad, i / as_float(stack - 1));
            for (int j = 0; j < way; j++) {
                float x = xPos + rad * cos(angleT);
                float y = yPos + rad * sin(angleT);
                if (distance(x, y, GetPlayerX(), GetPlayerY()) > pDist) {
                    int shot = CreateShotUA1(xPos + rad * cos(angleT), yPos + rad * sin(angleT), 0, angleT, SHOT_GREEN+SPARKLE, 0, SHOT_GREEN+SPAWN_E+SIZE_16, SHOT_GREEN+CANCEL_SPARKLE);
                    ObjMove_AddPatternB2(shot, 90 - i * 3, 0, 0, 0, accel, 0, fallSpeed);
                }
                angleT += 360 / way;   
            }
            CallSFX(SND_SHOT2);
            way += wayInc;
            angleT *= 2;
            wait(waitTime);
        }
    }
}