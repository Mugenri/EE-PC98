#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 5"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -200;
int _loopTime = [220, 220, 224][_diff];
_spellID = 27 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3400);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TCharge();
    TMain();
    TCross();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, MID_Y, 30, LERP_DECELERATE);
    wait(30);
    Transition_Spell(16, 5, 0);
    CallSFX(SND_TRANSITION);
    wait(200);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TCharge() {
    while (_count < -110) yield;

    CallSFX(SND_CHARGE1);
    Animation_Charge(_objBoss, true);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 300, 0, 60, 32, COLOR_RED_L, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, 240, 60, 8, COLOR_WHITE);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, -240, 60, 8, COLOR_WHITE);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, 240, 60, 8, COLOR_GREEN);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, -240, 60, 8, COLOR_GREEN);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, 240, 60, 8, COLOR_GRAY_L);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, -240, 60, 8, COLOR_GRAY_L);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 300, 0, 60, 32, COLOR_RED_L, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, 240, 60, 8, COLOR_WHITE);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, -240, 60, 8, COLOR_WHITE);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, 240, 60, 8, COLOR_GREEN);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, -240, 60, 8, COLOR_GREEN);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, 240, 60, 8, COLOR_GRAY_L);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 300, -240, 60, 8, COLOR_GRAY_L);
    wait(60);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TWall(-1);
                wait(_loopTime / 2);
                TWall(1);
            }
        }
        yield;
    }
}

task TCross() {
    while (_count < 0) yield;

    //guideline
    int primL = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_STG_EFF_MID);
    int primR = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_STG_EFF_MID);
    ObjRender_SetColor(primL, COLOR_WHITE);
    ObjRender_SetColor(primR, COLOR_WHITE);

    int rad = 0;
    float angleT = 90;
    float increment = [0.60, 0.65, 0.75][_diff];

    int waitTime = 48; //stack * delay * 4
    async {
        while (Boss_Alive(_objBoss)) {
            TLine(1);
            TLine(-1);
            wait(waitTime);
        }
    }

    while (Boss_Alive(_objBoss)) {
        ObjPrim_SetVertexPosition(primL, 0, MID_X + rad * cos(angleT + 45 + 180), MID_Y + rad * sin(angleT + 45 + 180), 1);
        ObjPrim_SetVertexPosition(primL, 1, MID_X + rad * cos(angleT + 45), MID_Y + rad * sin(angleT + 45), 1);
        ObjPrim_SetVertexPosition(primR, 0, MID_X + rad * cos(-angleT + 45 + 180), MID_Y + rad * sin(-angleT + 45 + 180), 1);
        ObjPrim_SetVertexPosition(primR, 1, MID_X + rad * cos(-angleT + 45), MID_Y + rad * sin(-angleT + 45), 1);
        float angle = GetAngleToPlayer(_objBoss);
        rad = min(300, rad + 2);
        angleT += increment;
        yield;
    }

    Obj_Delete(primL);
    Obj_Delete(primR);

    task TLine(int dir_) {
        int stack = 4;
        int delay = 3;
        if (dir_ == -1) wait(stack * delay * 2); //offset
        if (!Boss_Alive(_objBoss)) return;
        
        //create shots
        int[] shots = [];
        for (int i = 0; i < stack * 2; i++) { 
            int shot = CreateShotUA1(MID_X, MID_Y, 0, 0, SHOT_GREEN_INV+CARD, 0, SHOT_GREEN+CANCEL_FADE);
            ObjShot_SetFixedAngle(shot, true);
            shots ~= [shot];
        }

        //move
        float speed = 1;
        float radius = 0;
        while (radius < 300 && Boss_Alive(_objBoss)) {
            for (int i = 0; i < stack * 2; i += 2) {
                float tempRad = max(0, radius - i * delay);
                float tempAngle = angleT * dir_ + 45;
                ObjMove_AddPatternD2(shots[i], 0, MID_X + tempRad * cos(tempAngle), MID_Y + tempRad * sin(tempAngle), 1, LERP_LINEAR);
                ObjRender_SetAngleZ(shots[i], tempAngle + 90 + (90 * dir_));
                ObjMove_AddPatternD2(shots[i + 1], 0, MID_X + tempRad * cos(tempAngle + 180), MID_Y + tempRad * sin(tempAngle + 180), 1, LERP_LINEAR);
                ObjRender_SetAngleZ(shots[i + 1], tempAngle - 90 + (90 * dir_));
            }
            radius += speed;
            yield;
        }
    }
}

task TWall(int dir_) {
    float xPos = Boss_X(_objBoss);
    float yPos = Boss_Y(_objBoss);
    int way = [18, 18, 22][_diff];
    int stack = [3, 4, 6][_diff];
    float wallSpeed = [1, 1, 1.4][_diff];
    int waitTime = [27, 22, 16][_diff];
    float angleBase = 90 + 540 / way;

    //create shots
    for (int i = 0; i < stack; i++) {
        wait(waitTime);
        if (!Boss_Alive(_objBoss)) return;
        float angleT = angleBase;
        int color = i == stack ~/ 2 ? SHOT_RED_INV : SHOT_WHITE;
        for (int j = 0; j < way; j++) {
            CreateShotUA1(xPos, yPos, wallSpeed, angleT, color+BALL_SS, 0, color+CANCEL_BURST1);
            angleT += 360 / way;
        }
        CallSFX(SND_SHOT1);
    }

    //obstacles
    wait(waitTime);
    if (!Boss_Alive(_objBoss)) return;
    TLasers(dir_);
    TRing(dir_);

    //laser walls
    task TLasers(int dir_) {
        int[] lasers = [];
        float angleT = angleBase;
        for (int i = 0; i < way; i++) {
            int laser = CreateStraightLaserUA1(xPos, yPos, angleT + ((90 + 180 / way) * dir_), 0, 400, COLOR_GREEN, 0);
            ObjShot_SetSpellResist(laser, true);
            lasers ~= [laser];
            angleT += 360 / way; //every other lane
            dir_ *= -1;
        }

        CallSFX(SND_SHOT2);

        float radius = 0;
        while (radius < 300 && Boss_Alive(_objBoss)) {
            float angleT = angleBase;
            float dist = distance(xPos + radius * cos(angleT), yPos + radius * sin(angleT), xPos + radius * cos(angleT + (360 / way)), yPos + radius * sin(angleT + (360 / way)));

            for each (laser in lasers) {
                ObjMove_SetPosition(laser, xPos + radius * cos(angleT), yPos + radius * sin(angleT));
                ObjLaser_SetLength(laser, dist / 2 + 1);
                angleT += 360 / way;
            }
            radius += wallSpeed;
            yield;
        }
    }

    //rotating rings with gaps
    task TRing(int dir_) {
        float numArc = way / 2;
        float arc = [340, 360, 430][_diff] / way;
        int numShot = [5, 7, 9][_diff];
        float angleT = rand(0, 360);
        float accel = [0.01, 0.01, 0.022][_diff];
        float wvel = [0.9, 0.9, 1.1][_diff];
        int delay = 60;
        int delay2 = 210;

        for (int i = 0; i < numArc; i++) {
            float angleTemp = angleT;
            for (int j = 0; j < numShot; j++) {
                int color = j == numShot ~/ 2 ? SHOT_RED_INV : SHOT_WHITE;
                int type = j == numShot ~/ 2 ? SPARKLE : TALISMAN_A;
                int shot = CreateShotUA2(xPos, yPos, wallSpeed, angleTemp, 0, 100, wvel * dir_, color+type, 0, color+CANCEL_SPARKLE);
                ObjMove_AddPatternA2(shot, delay, NO_CHANGE, NO_CHANGE, accel, 100, NO_CHANGE);
                ObjMove_AddPatternA2(shot, delay2, NO_CHANGE, NO_CHANGE, accel * 2, NO_CHANGE, 0);
                angleTemp += arc / numShot;
            }
            angleT += 360 / numArc;
        }


    }
}