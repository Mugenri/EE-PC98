#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 3"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [165, 140, 34][_diff];
_spellID = 15 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3700);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(47 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(3, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TWave();
            }
        }
        if (_count % 140 == 0 && _count >= 0) {
            Boss_MoveRadiusInBounds(_objBoss, 48, 64, MID_X - 64, MID_X + 64, 32, 100, 60, LERP_DECELERATE);
        }
        yield;
    }
}

task TWave() {
    if (!Boss_Alive(_objBoss)) return;

    int waitTime = [5, 5, 1][_diff];
    int shotNum = [9, 10, 1][_diff];
    int yPos = -rand(0, 64);
    float xSpeedMin = [6.2, 9.6, 16][_diff];
    float xSpeedMax = [7.1, 10.5, 16][_diff];
    float ySpeed = [1.1, 1.8, 4.5][_diff];
    float xAccel = [0.09, 0.2, 4.7][_diff];
    float coinSpeed = [0.7, 0.85, 1.35][_diff];
    float coinSpeedRange = [0.2, 0.2, 0][_diff];
    float arc = [70, 70, 3][_diff]; // half arc
    int color2 = [SHOT_GRAY, SHOT_GRAY, SHOT_RED][_diff];

    TBouncy(1);
    wait (_loopTime / 2);
    TBouncy(-1);

    task TBouncy(int dir_) {
        int[] shots = [];
        float xSpeed = rand(xSpeedMin, xSpeedMax);

        async {
            wait(waitTime);
            while (Boss_Alive(_objBoss) && length(shots) > 0) {
                for each (shot in shots) {
                    if (ObjMove_GetX(shot) > MAX_X || ObjMove_GetX(shot) < MIN_X) {
                        ObjMove_SetSpeedX(shot, -xSpeed * dir_);
                        ObjMove_SetPosition(shot, clamp(ObjMove_GetX(shot), 0, MAX_X), ObjMove_GetY(shot));
                        int coinColor = rand_int(0, 1) == 0 ? SHOT_YELLOW : color2;
                        int coin = CreateShotUA1(ObjMove_GetX(shot), ObjMove_GetY(shot), coinSpeed + rand(coinSpeedRange, -coinSpeedRange), 90 + rand(90 + arc, 90 - arc) * dir_, coinColor+COIN, 0, coinColor+SPAWN_S+SIZE_16, coinColor+CANCEL_SPARKLE);
                        CallSFX(SND_SHOT1);
                    }
                }
                yield;
            }
        }

        int color = [SHOT_ORANGE_INV, SHOT_ORANGE_INV, SHOT_RED_INV][_diff];
        int type = KNIFE;
        loop (shotNum) {
            if (!Boss_Alive(_objBoss)) return;
            int shot = CreateShotUB2(MID_X + (MID_X * dir_), yPos, -xSpeed * dir_, ySpeed, xAccel * dir_, 0, xSpeed * dir_, 0, color+type, 0, color+CANCEL_FADE);
            ObjShot_SetSpellResist(shot, true);
            shots ~= [shot];
            color = [SHOT_ORANGE, SHOT_ORANGE, SHOT_RED][_diff];
            type = NEEDLES;
            wait(waitTime);
        }
    }
}