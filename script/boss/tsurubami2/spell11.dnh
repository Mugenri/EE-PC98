#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 11"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [260, 240, 200][_diff];
_spellID = 60 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(50 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Spell(22, 11, 0);
    CallSFX(SND_TRANSITION);
    wait(240);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 105, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(20, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TArrow(1);
                wait(_loopTime / 2);
                TArrow(-1);
            }
        }
        yield;
    }
}

task TArrow(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    //charge anim
    CallSFX(SND_CHARGE1);
    Animation_Charge(_objBoss, true);
    wait(30);
    Primitive_ContractPolygon2D(_objBoss, 45, 200, 0, 60, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(_objBoss, 0, 200, 90 * dir_, 60, 8, COLOR_WHITE);
    wait(3);
    Particle_ContractRing(_objBoss, 0, 200, 90 * dir_, 60, 8, COLOR_INDIGO);
    wait(3);
    Primitive_ContractPolygon2D(_objBoss, 45, 200, 0, 60, 32, COLOR_INDIGO, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(_objBoss, 0, 200, 90 * dir_, 60, 8, COLOR_INDIGO);
    wait(3);
    Particle_ContractRing(_objBoss, 0, 200, 90 * dir_, 60, 8, COLOR_BLUE);
    wait(60);
    
    if (!Boss_Alive(_objBoss)) return;
    int arrow = CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 5, 90 + 35 * dir_, SHOT_PURPLE_INV+ARROW, 0, SHOT_PURPLE+CANCEL_32);
    CallSFX(SND_SHOT4);
    int[] shots = [];

    int way = [4, 5, 5][_diff];
    float speedMax = 6;
    float speedMin = 0;
    float speed2 = [1.5, 1.7, 2.1][_diff];
    float angleT = rand(0, 360);
    float wVel = 6 * dir_;
    float spinTime = 40;
    float decel = (speedMax - speedMin) / 40;
    int color = SHOT_BLUE;
    int waitTime = 2;

    while (!Obj_IsDeleted(arrow)) {
        if (!Boss_Alive(_objBoss)) return;
        float xPos = ObjMove_GetX(arrow);
        float yPos = ObjMove_GetY(arrow);
        angleT += 7 * dir_;
        for (int i = 0; i < way; i++) {
            int shot = CreateShotUA2(xPos, yPos, speedMax, angleT, -decel, speedMin, wVel, color+SCALE, 6, SHOT_BLUE+SPAWN_S+SIZE_16, color+CANCEL_SPARKLE);
            ObjMove_AddPatternA2(shot, spinTime, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, 0);
            shots ~= [shot];
            angleT += 360 / way;
        }
        color = color == SHOT_BLUE ? SHOT_BLUE_INV : SHOT_BLUE;
        wVel *= 1.02;
        CallSFX(SND_SHOT1);
        wait(waitTime);
    }

    //explosion
    if (!Boss_Alive(_objBoss)) return;
    TRing();

    wait(45);
    if (!Boss_Alive(_objBoss)) return;

    for each (shot in shots) {
        ObjMove_AddPatternA2(shot, 0, NO_CHANGE, ObjMove_GetAngle(shot) + 180, 0.02, speed2, 0);
    }
    CallSFX(SND_SHOT2);

    task TRing() { //lol stolen from last non
        int numShot = [20, 22, 24][_diff];
        float speed = [1.7, 1.8, 1.9][_diff];
        int trailNum = [2, 3, 6][_diff];
        float trailInc = [1.2, 1.2, 0.75][_diff];
        int trailDelay = [4, 5, 2][_diff];
        float angleT = rand(0, 360);

        int xPos = MID_X - (MID_X * dir_);

        for (int i = 0; i < numShot; i++) {
            for (int j = trailNum; j >= 0; j--) {
                CreateShotUA1(xPos, MAX_Y, speed, angleT + trailInc * j, SHOT_BLACK+KUNAI, trailDelay * j, SHOT_BLACK+SPAWN_S+SIZE_16, SHOT_BLACK+CANCEL_SPARKLE);
                CreateShotUA1(xPos, MAX_Y, speed, angleT - trailInc * j, SHOT_BLACK+KUNAI, trailDelay * j, SHOT_BLACK+SPAWN_S+SIZE_16, SHOT_BLACK+CANCEL_SPARKLE);
            }
            CreateShotUA1(xPos, MAX_Y, speed, angleT, SHOT_WHITE+KUNAI, 0, SHOT_BLACK+SPAWN_S+SIZE_16, SHOT_WHITE+CANCEL_SPARKLE);
            angleT += 360 / numShot;
        }
        CallSFX(SND_SHOT2);
    }
}