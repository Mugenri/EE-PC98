#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 2"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = 180;
_spellID = 9 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3500);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 70, 30, LERP_DECELERATE);
    wait(30);
    Transition_Spell(1, 2, 0, COLOR_BLACK);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}


task TMain() {
    int slugTime = [130, 120, 90][_diff];
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TLasers(1);
                wait(_loopTime / 2);
                TLasers(-1);
            }
        }

        if (_count % slugTime == 0 && _count >= 0) {
            async {
                TSlugTrail(-1);
                wait(slugTime / 2);
                TSlugTrail(1);
            }
        }
        yield;
    }
}

task TLasers(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    int laserNum = [12, 16, 20][_diff];
    float angleT = 270 - rand(0, 50) * dir_;

    float speed = 6;
    int len = 40;
    float maxSpeed = [3.1, 3.1, 3.4][_diff];
    float wVel = [0.55, 0.6, 0.6][_diff];
    int decelFrames = 30;

    Boss_MoveRadiusInBounds(_objBoss, 40, 60, MID_X - 60, MID_X + 60, 60, 80, _loopTime / 2, LERP_DECELERATE);

    for (int i = 0; i < laserNum; i++) {
        if (!Boss_Alive(_objBoss)) return;
        int laser = CreateCurveLaserUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 6, angleT, len, [COLOR_ICE, COLOR_GREEN][i % 2], 0);
        ObjMove_AddPatternA2(laser, 0, NO_CHANGE, angleT, -(speed / decelFrames), 0, wVel * 2 * dir_);
        ObjMove_AddPatternA2(laser, decelFrames, 0, NO_CHANGE, (speed / decelFrames), maxSpeed, -wVel * dir_);
        angleT += 360 / laserNum * dir_;
        CallSFX(SND_LASER1);

        Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 90, 90 * dir_, 15, 8, [COLOR_ICE, COLOR_GREEN][i % 2]);
        wait((_loopTime / 2) / laserNum);
    }
}

task TSlugTrail(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    //summon clone
    float xCoord = dir_ > 0 ? MID_X + 154 : MID_X - 154;
    int clone = CreateFamiliar(rand(xCoord - 16, xCoord + 16), -32);
    float cloneSpeed = [3.2, 3.2, 4.3][_diff];
    float angleT = rand(95, 85);
    ObjMove_AddPatternA1(clone, 0, cloneSpeed, angleT);
    CallSFX(SND_SHOT2);

    //stagger
    wait(rand_int(0, 16));

    //bullet trail
    int frames = [50, 46, 20][_diff]; //half cycle
    float maxSpeed = [1.6, 2, 2.8][_diff];
    float accel = maxSpeed / frames;
    int waitTime = [8, 7, 4][_diff];
    while (!Obj_IsDeleted(clone)) {
        if (!Boss_Alive(_objBoss)) break;

        float xPos = ObjMove_GetX(clone);
        float yPos = ObjMove_GetY(clone);
        float angleT = ObjMove_GetAngle(clone);
        int trailNum = 6;
        int delay = 4;
        int color = dir_ > 0 ? SHOT_GREEN : SHOT_BLUE;
        loop (trailNum) {
            int shot = CreateShotUA2(xPos, yPos, 0, angleT + 75 * dir_, 0, 0, 0, color+SPAZER, delay, color+CANCEL_SPARKLE);
            TSlinky(shot, delay);
            delay += 4;
        }
        color = dir_ > 0 ? SHOT_BLUE : SHOT_GREEN;
        int shot = CreateShotUA2(xPos, yPos, 0, angleT + 75 * dir_, 0, 0, 0, color+BUTTERFLY, 0, color+CANCEL_SPARKLE);
        TSlinky(shot, 0);

        dir_ *= -1;
        wait(waitTime);
    }

    task TSlinky(int shot_, int delay_) {
        wait(delay_);
        for (int i = 0; i < 16; i+= 2) {
            ObjMove_AddPatternA2(shot_, frames * i, NO_CHANGE, NO_CHANGE, accel, maxSpeed, 0);
            ObjMove_AddPatternA2(shot_, frames + frames * i, NO_CHANGE, NO_CHANGE, -accel, 0, 0);
        }
        ObjMove_AddPatternA2(shot_, frames * 16, NO_CHANGE, NO_CHANGE, accel, maxSpeed, 0);
    }
}

function<int> CreateFamiliar(float x_, float y_) { //make a ink dude
    int obj = ObjEnemy_Create(OBJ_ENEMY);
    ObjEnemy_SetLife(obj, 250);
    Boss_SetID(obj, BOSS_ID_TSURUBAMI);
    ObjMove_SetPosition(obj, x_, y_);
    Animation_DrawBoss(obj);
    ObjEnemy_Regist(obj);
    ObjRender_SetColor(obj, COLOR_BLACK);
    Obj_SetRenderPriorityI(obj, RP_STG_ENEMY);

    async {
        while (!Obj_IsDeleted(obj) && Boss_Alive(_objBoss) && ObjEnemy_GetInfo(obj, INFO_LIFE) && ObjMove_GetY(obj) < MAX_Y + 32) yield;

        if (!Obj_IsDeleted(obj) && ObjMove_GetY(obj) < MAX_Y + 32) {
            Particle_EnemyExplosionSmall(ObjMove_GetX(obj), ObjMove_GetY(obj));
            CallSFX(SND_SHOT1);
            Obj_Delete(obj);
        }
    }

    return obj;
}