#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["debug spell"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -60;
int _loopTime = 300;
_spellID = 999;
int health = 3000;

@Event {
    alternative (GetEventType())
        case (EV_REQUEST_LIFE) {
            SetScriptResult(health);
        }
        case (EV_REQUEST_TIMER) {
            SetScriptResult(60 + absolute(_count / 60));
        }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI, MID_X, 60);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    wait(60);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    WriteLog("Capture Time: " ~ ToString(_count / 60));
    WriteLog("DPS: " ~ ToString(health / (_count / 60)));
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                //int objspark = MasterSpark(MID_X, Boss_Y(_objBoss), 90, 400, 336, 60, COLOR_BLUE, COLOR_INDIGO_L, 90);
                //TPatternA();
                //ObjMove_SetDestAtFrame(_objBoss, rand(MID_Y - 10, MID_Y + 10), rand(30, 90), 60, LERP_SMOOTHER);
                //TPatternB(1);
                //TPatternI();
                //CreateItem(MID_X, 90, ITEM_BOMB);
                TPatternS();
            }
        }
        yield;
    }
}

task TPatternA() {
    wait(20);
    if (!Boss_Alive(_objBoss)) return;
    loop (3) {
        loop (5) {
            float angleT = rand(0, 360);
            loop (25) {
                if (!Boss_Alive(_objBoss)) return;
                int obj = CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 1.2, angleT, 1, 0, 2000, 0);
                angleT += 360 / 25;
            }
            wait(100);
        }
        wait(20);
    }
    wait(10);
}

task TPatternB(int dir_) {
    float angleT = 0;

    loop (8) {
        float x = Boss_X(_objBoss) + 30 * cos(angleT);
        float y = Boss_Y(_objBoss) + 30 * sin(angleT);
        int obj = CreateStraightLaserUA1(x, y, dottheta(x, y, GetPlayerX(), GetPlayerY()), 550, 60, 0xFF00FF, 60);
        angleT += 45;
        TMove(obj);
    }
    
    task TMove(int laser_) {
        float x = ObjMove_GetX(laser_);
        loop (50) {
            ObjMove_SetX(laser_, x);
            ObjStLaser_SetAngle(laser_, GetAngleToPlayer(laser_));
            x += 3 * dir_;
            yield;
        }
        loop (70) {
            ObjMove_SetX(laser_, x);
            x += 1.5 * dir_;
            yield;
        }
    }
}

task TPatternC() {
    float angle = 180;
    loop (11) {
        if (!Boss_Alive(_objBoss)) return;
        int dist = 25;
        int obj = CreateLooseLaserUA1(Boss_X(_objBoss) + dist * cos(angle), Boss_Y(_objBoss) + dist * sin(angle), 4.5, angle, 120, 0x444444, 0);
        angle -= 18;
        wait(5);
    }
    angle = 0;
    loop (11) {
        if (!Boss_Alive(_objBoss)) return;
        int dist = 15;
        CreateLooseLaserUA1(Boss_X(_objBoss) + dist * cos(angle), Boss_Y(_objBoss) + dist * sin(angle), 4.5, angle, 120, 0x444444, 0);
        angle += 18;
        wait(5);
    }
}

task TPatternD() {
    loop (40) {
        CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 5, GetAngleToPlayer(_objBoss), SHOT_WHITE+NEEDLES, 0, 0, 0);
        wait(2);
    }
}

task TPatternE() {
    float angleT = round(rand(0, 360));
    float xPos = rand(-15, 15);
    float yPos = rand(-15, 15);
    int bSprite = round(rand(0, 1)) * 5;
    loop (32) {
        if (!Boss_Alive(_objBoss)) return;
        CreateShotUA1(Boss_X(_objBoss) + xPos, Boss_Y(_objBoss) + yPos, 5, angleT, 4 + bSprite, 0, 0, 0);
        angleT += 360 / 32;
    }
}

task TPatternF(int dir_) {
    float angleT = 90 + 45 * dir_;
    float increment = 0.05;
    
    loop (550) {
        if (!Boss_Alive(_objBoss)) return;
        CreateShotUA1(MID_X, MID_Y - 15, 2, angleT + increment * dir_ + 10, SHOT_BLACK+BALL_S, 0, 0, 0);
        CreateShotUA1(MID_X, MID_Y - 15, 2, angleT + increment * dir_, SHOT_BLACK+BALL_S, 0, 0, 0);
        CreateShotUA1(MID_X, MID_Y - 15, 2, angleT + increment * dir_ - 10, SHOT_BLACK+BALL_S, 0, 0, 0);
        increment *= 1.04;
        angleT += increment * dir_;
        wait(2);
    }
}

task TPatternG() {
    CreateShotUA2(MID_X, MID_Y, 2, 90, 0.2, 10, 0, SHOT_BLACK+BALL_S, 0, 0, 0);
    wait(60);
    CreateShotUB1(MID_X, MID_Y, 1, 2, SHOT_BLACK+NEEDLES, 0, 0, 0);
    wait(60);
    CreateShotUB2(MID_X, MID_Y, 1, 2, 0.2, 0.2, 5, 3, SHOT_WHITE+CARD, 0, 0, 0);
}

task TPatternH() {
    CreateStraightLaserUA1(MID_X - 40, MID_Y, 0, 80, 1000, 0x00FF00, 30);
}

task TPatternI() {
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 0, 100, 30, 32, COLOR_WHITE, false, RP_STG_EFF_LO);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), -15, 100, 90, 30, 8, COLOR_GRAY);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 100, -90, 30, 8, COLOR_GRAY);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 100, -90, 30, 8, COLOR_GRAY_L);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), -15, 100, 90, 30, 8, COLOR_GRAY_L);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), -15, 100, 90, 30, 8, COLOR_GRAY_L);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 100, -90, 30, 8, COLOR_GRAY_L);
    wait(20);
    if (!Boss_Alive(_objBoss)) return;
    int shot1 = CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 10, 50, SHOT_BLACK+PILL_S, 0, SHOT_BLACK+CANCEL_BURST1);
    int shot2 = CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 10, 130, SHOT_BLACK+PILL_S, 0, SHOT_BLACK+CANCEL_BURST1);
    ObjShot_SetSpellResist(shot1, true);
    ObjShot_SetSpellResist(shot2, true);
    loop (3) {
        if (!Boss_Alive(_objBoss)) return;
        SpawnShot(shot1);
        SpawnShot(shot2);
        wait(12);
    }

    function<void> SpawnShot(int obj_) {
        float x = ObjMove_GetX(obj_);
        float y = ObjMove_GetY(obj_);
        loop (20) {
            float speed = rand(0.4, 0.9);
            float angle = rand(0, 360);
            CreateShotUA1(x + speed * 5 * cos(angle), y + speed * 5 * sin(angle), speed, angle, SHOT_WHITE+NEEDLES, 0, SHOT_WHITE+SPAWN_S+SIZE_16, SHOT_WHITE+CANCEL_SPARKLE);
        }
    }
}

task TPatternJ() {
    float angleT = 360 / 36;
    loop {
        for (int i = 0; i <= 774; i++) {
            CreateShotA1(MID_X + 24 * cos(angleT), MID_Y + 24 * sin(angleT), 1, angleT, i, 0);
            angleT += 360 / 18;
            yield;
        }
    }
}

task TPatternK() { //Emerald Megalith
    float x = rand(35, GetStgFrameWidth() - 35);
    float y = rand(60, MID_Y - 65);
    float speed = rand(1.4, 2.8);

    ascent (i in 0..30) {
        int graphic = rand_int(0, 1) ? SHOT_GREEN+CRYSTAL_S : SHOT_GREEN+GEM;
        float modif = rand(1, 1.3);
        CreateShotA1(x, y, speed * modif, rand(0, 360), graphic, 0);
    }

    ascent (i in 0..3) {
        CreateShotA1(x, y, speed, 135 - i*45, SHOT_GREEN+CRYSTAL_A, 0);
    }
}

task TPatternL() {
    float angleT = 0;
    int index = 0;
    loop {
        for (int i = index; i < 18; i++) {
            CreateShotUA1(MID_X + 48 * cos(angleT), MID_Y + 48 * sin(angleT), 1, angleT, i+YINYANG_S, 0, i+SPAWN_S+SIZE_8, 0);
            angleT += 360 / 18;
        }
        angleT += 6;
        wait(24);
        for (int i = index; i < 18; i++) {
            CreateShotUA1(MID_X + 48 * cos(angleT), MID_Y + 48 * sin(angleT), 1, angleT, i+BOUNCY_BALL, 0, i+SPAWN_E+SIZE_8, 0);
            angleT += 360 / 18;
        }
        angleT += 6;
        wait(24);
        for (int i = index; i < 18; i++) {
            CreateShotUA1(MID_X + 48 * cos(angleT), MID_Y + 48 * sin(angleT), 1, angleT, i+SPARKLE, 0, i+SPAWN_S+SIZE_16, 0);
            angleT += 360 / 18;
        }
        angleT += 6;
        wait(24);
        for (int i = index; i < 18; i++) {
            CreateShotUA1(MID_X + 48 * cos(angleT), MID_Y + 48 * sin(angleT), 1, angleT, i+GEM, 0, i+SPAWN_E+SIZE_16, 0);
            angleT += 360 / 18;
        }
        angleT += 6;
        wait(24);
        for (int i = index; i < 18; i++) {
            CreateShotUA1(MID_X + 48 * cos(angleT), MID_Y + 48 * sin(angleT), 1, angleT, i+YINYANG_A, 0, i+SPAWN_S+SIZE_32, 0);
            angleT += 360 / 18;
        }
        angleT += 6;
        wait(24);
        for (int i = index; i < 18; i++) {
            CreateShotUA1(MID_X + 48 * cos(angleT), MID_Y + 48 * sin(angleT), 1, angleT, i+FIRE_A, 0, i+SPAWN_E+SIZE_32, 0);
            angleT += 360 / 18;
        }
        angleT += 6;
        wait(24);
    }
}

task TPatternM() { //Delete effects
    float angleT = 0;
    int i = 0;
    loop (72) {
        CreateShotUA1(MID_X + 72 * cos(angleT), MID_Y + 72 * sin(angleT), 0, angleT, PELLET+(i%18), 0, i);
        angleT += 360 / 72;
        i++;
    }
    loop (18) {
        CreateShotUA1(MID_X + 92 * cos(angleT), MID_Y + 92 * sin(angleT), 0, angleT, BALL_L+(i%18), 0, i);
        angleT += 360 / 18;
        i++;
    }
    loop (18) {
        CreateShotUA1(MID_X + 145 * cos(angleT), MID_Y + 145 * sin(angleT), 0, angleT, BUBBLE+(i%18), 0, i);
        angleT += 360 / 18;
        i++;
    }
}

task TPatternN() {
    loop (14) {
        ascent (i in 0..8) {
            CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 3 + i / 3, GetAngleToPlayer(_objBoss) + 2.5, SHOT_BLUE+BALL_S, 0, SHOT_BLUE+SPAWN_S+SIZE_16, SHOT_BLUE+CANCEL_FADE);
            CreateShotUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 3 + i / 3, GetAngleToPlayer(_objBoss) - 2.5, SHOT_BLUE+BALL_S, 0, SHOT_BLUE+SPAWN_S+SIZE_16, SHOT_BLUE+CANCEL_FADE);
        }
        wait(4);
    }
}

task TPatternO() {
    CallSFX(SND_LASER1);
    int laser = CreateCurveLaserUA1(Boss_X(_objBoss), Boss_Y(_objBoss), 6, 180 - rand_int(0, 2) * 90, 16, COLOR_BLUE, 0);
    ObjMove_AddPatternA2(laser, 0, NO_CHANGE, NO_CHANGE, -0.15, 0, NO_CHANGE);
    ObjMove_AddPatternA2(laser, 65, NO_CHANGE, NO_CHANGE, 0.1, 7.5, NO_CHANGE);
    
    loop (240) {
        if (Obj_IsDeleted(laser)) break;
        float angleL = ObjMove_GetAngle(laser);
        float angleP = GetAngleToPlayer(laser);
        float wvel = AngularDistance(angleL, angleP) > 0 ? 2.3 : -2.3;
        ObjMove_SetAngularVelocity(laser, wvel);
        yield;
    }
    ObjMove_SetAngularVelocity(laser, 0);
}

task TPatternP() {
    float angleT = rand(0, 360);
    float xPos = rand(-15, 15);
    float yPos = rand(-15, 15);
    int graphic = rand_int(0, 1) == 0 ? SHOT_BLUE+BALL_S : SHOT_BLUE+PELLET;
    loop (32){
        CreateShotUA1(Boss_X(_objBoss) + xPos, Boss_Y(_objBoss) + yPos, 6, angleT, graphic, 0, SHOT_BLUE+SPAWN_S+SIZE_16, SHOT_BLUE+CANCEL_BURST1);
        angleT += 360 / 32;
    }
    CallSFX(SND_SHOT1);
}

task TPatternQ() {
    int shot = CreateShotC1(MID_X, MID_Y, 0.5, 1, 90, SHOT_RED+PELLET, 0);
    ObjMove_AddPatternC2(shot, 30, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, 90, 1);
}

task TPatternR() { // all shots
    int maxShot = 774;

    float angleT = 90;
    for (int i = 1; i <= maxShot; i++) {
        CreateShotUA1(MID_X, MID_Y, 1.5, angleT, i, 0, SHOT_RED+CANCEL_BURST1);
        angleT += 10;
        if (i % 2 == 0) yield;
    }
}

task TPatternS() {
    int pShot = Shot_CreatePattern(MID_X, MID_Y, PATTERN_RING, 7, 1, 1, 1, 90, 5, 0, SHOT_RED+PELLET, 0);
    int[] shots = Shot_FirePatternA(pShot, SHOT_RED+PELLET, SHOT_RED+SPAWN_S+SIZE_8, SHOT_RED+CANCEL_BURST1);

    wait(60);

    for each (shot in shots) {
        ObjPatternShot_SetBasePoint(pShot, ObjMove_GetX(shot), ObjMove_GetY(shot));
        Shot_FirePattern(pShot, SHOT_RED+CANCEL_BURST1);
        ObjShot_SetDeleteFrame(shot, 0);
    }
}