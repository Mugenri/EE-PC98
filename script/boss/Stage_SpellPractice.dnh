#TouhouDanmakufu[Stage]
#ScriptVersion[3]
#Title["Spell Practice Stage"]
#System["./../system/System.dnh"]

#include "./../lib/lib_Common.dnh"
#include "./../lib/lib_Stage.dnh"

bool _start = false;

@Initialize {
    Stage_Init(0, 0);
    TStage();
}

@Event { Stage_Event(); }

@MainLoop { yield; }

@Finalize {}

task TStage() {
    //init variables
    int stageIndex = GetStageIndex();
    int spellID = GetSpellPracticeID();
    
    string bgPath = SpellPractice_GetBackground(stageIndex);
    int bgmIndex = SpellPractice_GetBGMIndex(stageIndex);
    string pathSingle = SpellPractice_GetSpellPath(stageIndex, spellID);

    //load and execute background script
    int bgID = LoadScript(bgPath);
    StartScript(bgID);

    //get path and preload single
    _objScene = ObjEnemyBossScene_Create();
    ObjEnemyBossScene_Add(_objScene, 0, pathSingle);
    ObjEnemyBossScene_LoadInThread(_objScene);

    while (!_start) yield;

    //start spell
    StartBGM(bgmIndex, 60, 0);
    ObjEnemyBossScene_Regist(_objScene);
    while (!Obj_IsDeleted(_objScene)) yield;

    wait(150); //wait for all point items to exit the screen
    SpellPractice_End();
}

function<string> SpellPractice_GetBackground(int stageIndex_) {
    string dir = DIR_STG;
    alternative (stageIndex_)
    case (0) { return dir ~ "tsurubami/tsuruBG.dnh"; } //tsurubami
    others { assert(false, IntToString(stageIndex_) ~ " is an invalid stage index."); }
}

function<int> SpellPractice_GetBGMIndex(int stageIndex_) {
    alternative (stageIndex_)
    case (0) { return 1; } //Eternal Dance Engine
    case (1) { return 2; } //Broken Eternal Dance Engine
    others { assert(false, IntToString(stageIndex_) ~ " is an invalid stage index."); }
}

//get non/spell filepath based on ID
function<string> SpellPractice_GetSpellPath(int stageIndex_, int spellID_) {
    string dir = DIR_STG;
    alternative (stageIndex_)
    case (0) { //Tsurubami
        dir = dir ~ "tsurubami/";
        alternative (spellID_)
        case (0, 1, 2)      { return dir ~ "nonspell1.dnh"; }   //1
        case (3, 4, 5)      { return dir ~ "spell1.dnh"; }      //2
        case (6, 7, 8)      { return dir ~ "nonspell2.dnh"; }   //3
        case (9, 10, 11)    { return dir ~ "spell2.dnh"; }      //4
        case (12, 13, 14)   { return dir ~ "nonspell3.dnh"; }   //5
        case (15, 16, 17)   { return dir ~ "spell3.dnh"; }      //6
        case (18, 19, 20)   { return dir ~ "nonspell4.dnh"; }   //7
        case (21, 22, 23)   { return dir ~ "spell4.dnh"; }      //8
        case (24, 25, 26)   { return dir ~ "nonspell5.dnh"; }   //9
        case (27, 28, 29)   { return dir ~ "spell5.dnh"; }      //10
        case (30, 31, 32)   { return dir ~ "nonspell6.dnh"; }   //11
        case (33, 34, 35)   { return dir ~ "spell6.dnh"; }      //12
        case (36, 37, 38)   { return dir ~ "spell7.dnh"; }      //13
        case (39, 40, 41)   { return dir ~ "nonspell7.dnh"; }   //14
        case (42, 43, 44)   { return dir ~ "spell8.dnh"; }      //15
        case (45, 46, 47)   { return dir ~ "nonspell8.dnh"; }   //16
        case (48, 49, 50)   { return dir ~ "spell9.dnh"; }      //17
        case (51, 52, 53)   { return dir ~ "nonspell9.dnh"; }   //18
        case (54, 55, 56)   { return dir ~ "spell10.dnh"; }     //19
        case (57, 58, 59)   { return dir ~ "nonspell10.dnh"; }  //20
        others { assert(false, IntToString(spellID_) ~ " is an invalid spell ID."); }
    }
    others { assert(false, IntToString(stageIndex_) ~ " is an invalid stage index."); }
}

function<void> SpellPractice_End() {
    NotifyEvent(GetPackageStageScriptID(), EV_STAGE_EVENT, STAGE_VICTORY_SPELL);
}