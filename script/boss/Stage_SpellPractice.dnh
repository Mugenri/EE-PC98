#TouhouDanmakufu[Stage]
#ScriptVersion[3]
#Title["Spell Practice Stage"]
#System["./../system/System.dnh"]

#include "./../lib/lib_Common.dnh"
#include "./../lib/lib_Stage.dnh"
#include "./../lib/lib_Spell.dnh"

@Initialize {
    Stage_Init();
    TStage();
}

@Event { Stage_Event(); }

@MainLoop { yield; }

@Finalize {}

task TStage() {
    //init variables
    int stageIndex = GetStageIndex();
    int spellID = GetSpellPracticeID();
    
    string bgPath = SpellPractice_GetBackground(stageIndex);
    int bgIndex = SpellPractice_GetBackgroundIndex(stageIndex, spellID);
    int bgmIndex = SpellPractice_GetBGMIndex(stageIndex);
    string pathSingle = Spell_GetPath(stageIndex, spellID);

    //load and execute background script
    int bgID = LoadScript(bgPath);
    SetScriptArgument(bgID, 0, bgIndex);
    StartScript(bgID);

    //get path and preload single
    _objScene = ObjEnemyBossScene_Create();
    ObjEnemyBossScene_Add(_objScene, 0, pathSingle);
    ObjEnemyBossScene_LoadInThread(_objScene);

    while (!_start) yield;

    //start spell
    StartBGM(bgmIndex, 60, 0);
    ObjEnemyBossScene_Regist(_objScene);
    while (!Obj_IsDeleted(_objScene)) yield;

    wait(150); //wait for all point items to exit the screen
    SpellPractice_End();
}

function<string> SpellPractice_GetBackground(int stageIndex_) {
    string dir = DIR_STG;
    alternative (stageIndex_)
    case (0) { return dir ~ "tsurubami/tsuruBG.dnh"; } //tsurubami
    case (1) { return dir ~ "tsurubami2/tsuru2BG.dnh"; } //tsurubami 2
    others { assert(false, IntToString(stageIndex_) ~ " is an invalid stage index."); }
}

function<int> SpellPractice_GetBackgroundIndex(int stageIndex_, int spellID_) {
    alternative (stageIndex_)
    case (0) {
        alternative (spellID_)
        case (69, 70, 71, 72, 73, 74) { return 15; }
        others { return 0; }
    }
    case (1) {
        alternative (spellID_)
        others { return 0; }
    }
    others { assert(false, IntToString(stageIndex_) ~ " is an invalid stage index."); }
}

function<int> SpellPractice_GetBGMIndex(int stageIndex_) {
    alternative (stageIndex_)
    case (0) { return 1; } //Eternal Dance Engine
    case (1) { return 2; } //Broken Eternal Dance Engine
    others { assert(false, IntToString(stageIndex_) ~ " is an invalid stage index."); }
}

function<void> SpellPractice_End() {
    NotifyEvent(GetPackageStageScriptID(), EV_STAGE_EVENT, STAGE_VICTORY_SPELL);
}