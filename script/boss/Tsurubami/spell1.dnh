#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 1"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [260, 240, 180][_diff];
_spellID = 3 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3400);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(1, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFireA();
            }
        }
        yield;
    }
}

task TFireA() {
    if (!_bossAlive) return;
    Primitive_ContractPolygon2D(_bossX, _bossY, 0, 100, 0, 30, 32, COLOR_GRAY, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(_bossX, _bossY, 0, 100, 90, 30, 8, COLOR_GRAY_L);
    Particle_ContractRing(_bossX, _bossY, 0, 100, -90, 30, 8, COLOR_GRAY_L);
    wait(30);
    async {
        wait(150);
        if (!_bossAlive) return;
        Animation_Charge(_objBoss, true);
        CallSFX(SND_CHARGE1);
    }
    int numShot = 30;
    float yAccel = [0.2, 0.2, 0.38][_diff];
    float yMax = [4.8, 4.8, 5.8][_diff];
    for (int i = 0; i < numShot; i+=2) { //gravity shots
        if (!_bossAlive) return;
        float xSpeed = rand(1, 2.5);
        xSpeed = rand_int(0, 1) == 0 ? xSpeed : xSpeed * -1;
        int shot = CreateShotUB2(_bossX, _bossY, xSpeed, -yMax, 0, yAccel, 0, yMax, SHOT_GRAY_INV+PILL_L, 0, SHOT_GRAY_INV+SPAWN_E+SIZE_32, SHOT_GRAY_INV+CANCEL_32);
        ObjShot_SetSpellResist(shot, true);
        TRain(shot, i);
        CallSFX(SND_SHOT3);
        wait([numShot - i, numShot - i, 10][_diff]);
    }

    Primitive_ContractPolygon2D(_bossX, _bossY, 0, 160, 0, 18, 32, COLOR_RED, false, RP_STG_EFF_MID);
    wait(6);
    Primitive_ContractPolygon2D(_bossX, _bossY, 0, 160, 0, 18, 32, COLOR_RED, false, RP_STG_EFF_MID);
    wait(6);
    Primitive_ContractPolygon2D(_bossX, _bossY, 0, 160, 0, 18, 32, COLOR_RED, false, RP_STG_EFF_MID);
    wait(6);

    numShot = [12, 16, 20][_diff];
    for (int i = 1; i <= 3; i++) { //blue bursts
        if (!_bossAlive) return;
        float angleT = rand(0, 360);
        int delay = 0;
        loop (i) {
            for (int j = 0; j < numShot * i; j++) {
                CreateShotUA1(_bossX, _bossY, rand(4.8, 5) / i, angleT, SHOT_BLUE_INV+FIRE_S, delay, SHOT_BLUE_INV+SPAWN_S+SIZE_16, SHOT_BLUE_INV+CANCEL_BURST1);
                angleT += 360 / (numShot * i);
            }
            delay += 6;
        }
        CallSFX(SND_SHOT1);
        wait(8);
    }

    Animation_Charge(_objBoss, false);

    task TRain(int obj_, int modif_) { //rain bullets
        int color = [SHOT_WHITE, SHOT_WHITE, SHOT_RED][_diff];
        int waitBase = [20, 12, 12][_diff];
        wait(45);
        while (_bossAlive && !Obj_IsDeleted(obj_)) {
            float xPos = ObjMove_GetX(obj_);
            float yPos = ObjMove_GetY(obj_);
            float angleT = ObjMove_GetAngle(obj_);
            if (yPos > MAX_Y) break;
            loop (3) CreateShotUA1(xPos, yPos, rand(4, 4.5), angleT + 180 + rand(-22, 22), SHOT_BLACK+FIRE_S, 0, SHOT_BLACK+CANCEL_BURST1);
            int rainShot = CreateShotUA1(xPos, yPos, rand(3, 3.5), angleT + 180 + rand(-5, 5), color+FIRE_S, 0, color+CANCEL_BURST1);
            ObjMove_AddPatternB2(rainShot, 20, NO_CHANGE, NO_CHANGE, 0, 0.1, 0, rand(2.5, 3.1));
            wait(waitBase + modif_);
        }
    }
}
    