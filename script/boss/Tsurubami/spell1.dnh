#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["spell1"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _count = -120;
int _loopTime = 310;
int _spellID = 1;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3500); 
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(60 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(200000);
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    Spell_SetCurrent(_spellID, true);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(1, 0);
    CallSFX(SND_TRANSITION);
    wait(90);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    Animation_Charge(false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, intersectionShot, intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFireA();
            }
        }
        yield;
    }
}

task TFireA() {
    if (!_bossAlive) return;
    Animation_Charge(true);
    Primitive_ContractPolygon2D(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 100, 0, 30, 32, COLOR_GRAY, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 100, 90, 30, 8, COLOR_GRAY_L);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 100, -90, 30, 8, COLOR_GRAY_L);
    wait(30);
    for (int i = 0; i < 30; i+=2) { //gravity shots
        if (!_bossAlive) return;
        real xSpeed = rand(1, 2.5);
        xSpeed = rand_int(0, 1) == 0 ? xSpeed : xSpeed * -1;
        int shot = CreateShotUB2(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), xSpeed, rand(-3, -5), 0, 0.2, 0, 4.8, SHOT_GRAY_INV+PILL_L, 0, SHOT_GRAY_INV+SPAWN_E+SIZE_32, SHOT_GRAY_INV+CANCEL_32);
        ObjShot_SetSpellResist(shot, true);
        TRain(shot, i);
        CallSFX(SND_SHOT3);
        wait(30 - i);
    }

    Primitive_ContractPolygon2D(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 160, 0, 18, 32, COLOR_RED, false, RP_STG_EFF_MID);
    wait(6);
    Primitive_ContractPolygon2D(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 160, 0, 18, 32, COLOR_RED, false, RP_STG_EFF_MID);
    wait(6);
    Primitive_ContractPolygon2D(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 160, 0, 18, 32, COLOR_RED, false, RP_STG_EFF_MID);
    wait(6);

    for (int i = 1; i <= 3; i++) { //red bursts
        if (!_bossAlive) return;
        real angleT = rand(0, 360);
        for (int j = 0; j < 16 * i; j++) {
            CreateShotUA1(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), rand(4.8, 5) / i, angleT, SHOT_RED_INV+FIRE_S, 0, SHOT_RED_INV+SPAWN_S+SIZE_16, SHOT_RED_INV+CANCEL_BURST1);
            angleT += 360/(16*i);
        }
        CallSFX(SND_SHOT1);
        wait(6);
    }

    Animation_Charge(false);

    task TRain(int obj_, int modif_) { //rain bullets
        wait(45);
        while(_bossAlive && !Obj_IsDeleted(obj_)) {
            real xPos = ObjMove_GetX(obj_);
            real yPos = ObjMove_GetY(obj_);
            real angleT = ObjMove_GetAngle(obj_);
            if (yPos > MAX_Y) break;
            loop (3) CreateShotUA1(xPos, yPos, rand(4, 4.5), angleT + 180 + rand(-10, 10), SHOT_BLACK+FIRE_S, 0, SHOT_BLACK+CANCEL_BURST1);
            int rainShot = CreateShotUA1(xPos, yPos, rand(3, 3.5), angleT + 180 + rand(-5, 5), SHOT_WHITE+FIRE_S, 0, SHOT_WHITE+CANCEL_BURST1);
            ObjMove_AddPatternB2(rainShot, 20, NO_CHANGE, NO_CHANGE, 0, 0.1, 0, rand(2.5, 3.1));
            wait(8 + modif_);
        }
    }
}
    