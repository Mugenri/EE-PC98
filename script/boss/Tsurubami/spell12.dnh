#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 12"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [240, 240, 220][_diff];
_spellID = 63 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(5000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(60 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(12, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    int threshold = 1000;
    bool rage = false;
    while (_count < -30) yield;

    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        int life = ObjEnemyBossScene_GetInfo(_objScene, INFO_CURRENT_LIFE);
        int time = ObjEnemyBossScene_GetInfo(_objScene, INFO_TIMERF);
        if (time <= threshold && !rage && life > 2600){
            _loopTime = [180, 180, 60][_diff];
            rage = true;
            DeleteShotAll(TYPE_CHILD, TYPE_IMMEDIATE);
        }
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFireA();
                if (life < 4200 || rage) TFireB();
                if (life < 3400 || rage) TFireC();
                if (life < 2600 || rage) TFireD();
                if (life < 1800 || rage) TFireE();
            }
        }
        yield;
    }
}

task TFireA() {
    //curving knives
    if (!_bossAlive) return;

    int shotNum = [16, 22, 30][_diff]; //must be even
    float initSpeed = 4;
    float speed = [1.1, 1.3, 1.4][_diff];
    float angleMod = [30, 18, 16][_diff];
    float initwVel = 9;
    float wVel = 0.2;

    loop (4) {
        if (!_bossAlive) return;
        for (int i = 1; i <= shotNum / 2; i++) {
            float angleT = GetAngleToPlayer(_objBoss) + 180;
            int shot1 = CreateShotUA2(_bossX, _bossY, initSpeed, angleT + i * angleMod, 0, 0, initwVel, SHOT_PURPLE+KNIFE, 0, SHOT_PURPLE+CANCEL_32); //right
            int shot2 = CreateShotUA2(_bossX, _bossY, initSpeed, angleT - i * angleMod, 0, 0, -initwVel, SHOT_PURPLE+KNIFE, 0, SHOT_PURPLE+CANCEL_32); //left
            ObjMove_AddPatternA2(shot1, 50, NO_CHANGE, NO_CHANGE, -0.08, speed, wVel);
            ObjMove_AddPatternA2(shot2, 50, NO_CHANGE, NO_CHANGE, -0.08, speed, -wVel);
        }
        CallSFX(SND_SHOT1);
        wait(_loopTime / 4);
    }
}

task TFireB() {
    //curve lasers
    if (!_bossAlive) return;
    int laserNum = [5, 5, 7][_diff];
    int trackTime = [80, 80, 90][_diff];
    float wVel = [3.2, 2.5, 2.5][_diff];

    loop (2) {
        if (!_bossAlive) return;
        for (int i = 0; i < laserNum; i++) {
            int laser = CreateCurveLaserUA1(_bossX, _bossY, 6, Interpolate_Linear(190, 350, i / as_float(laserNum - 1)), 20, COLOR_PINK, 0);
            ObjShot_SetSpellResist(laser, true);
            ObjMove_AddPatternA2(laser, 0, NO_CHANGE, NO_CHANGE, -0.15, 0, NO_CHANGE);
            ObjMove_AddPatternA2(laser, 60, NO_CHANGE, NO_CHANGE, 0.15, 6, NO_CHANGE);
            TTrack(laser);
        }
        CallSFX(SND_LASER1);
        wait(_loopTime / 2);
    }

    task TTrack(int obj_) {
        loop (trackTime) {
            if (Obj_IsDeleted(obj_)) break;
            float angleL = ObjMove_GetAngle(obj_);
            float angleP = GetAngleToPlayer(obj_);
            float wvel = AngularDistance(angleL, angleP) > 0 ? wVel : -wVel;
            ObjMove_SetAngularVelocity(obj_, wvel);
            yield;
        }
        if (!Obj_IsDeleted(obj_)) ObjMove_SetAngularVelocity(obj_, 0);
    }
}

task TFireC() {
    //butterfly fan below player

    loop (2) {
        async {
            if (!_bossAlive) return;
            //spawn animation
            CallSFX(SND_CHARGE1);
            float xPos = GetPlayerX();
            Particle_ContractRing(xPos, MAX_Y, 0, 100, 180, 90, 8, COLOR_PINK);
            Particle_ContractRing(xPos, MAX_Y, 0, 100, -180, 90, 8, COLOR_PINK);

            int waitTime = 90;
            wait(waitTime);
            if (!_bossAlive) return;
            int shotNum = [5, 7, 8][_diff];
            float speed = [0.7, 0.8, 1.0][_diff];
            for (int i = 0; i < shotNum; i++) {
                CreateShotUA1(xPos, MAX_Y, speed, Interpolate_Linear(180, 360, i / as_float(shotNum - 1)), SHOT_PINK+BUTTERFLY, 0, SHOT_PINK+SPAWN_S+SIZE_32, SHOT_PINK+CANCEL_32);
            }
            CallSFX(SND_SHOT2);
        }
        wait(_loopTime / 2);
    }
}

task TFireD() {
    //laser that spawns wall

    if (!_bossAlive) return;
    Animation_Charge(_objBoss, true);
    wait(60);
    if (!_bossAlive) return;
    float angleT = GetAngleToPlayer(_objBoss);
    int laser = CreateStraightLaserUA1(_bossX, _bossY, angleT, 440, 60, COLOR_PINK, 60);
    wait(60);
    if (!_bossAlive) return;
    CallSFX(SND_LASER2);
    Animation_Charge(_objBoss, false);

    //wall at laser position
    float xPos = _bossX + 365 * cos(angleT);
    xPos = clamp(xPos, MIN_X, MAX_X);

    TFireWall(xPos);
    int waitTime = 8;
    wait(waitTime);
    for (int i = 1; i <= 24; i++) {
        if (!_bossAlive) return;
        TFireWall(xPos + i * 16);
        TFireWall(xPos - i * 16);
        wait(waitTime);
    }

    task TFireWall(float xPos_) {
        int frames = 60;
        float maxLength = [58, 64, 80][_diff];
        int laser = CreateFireLaser(xPos_, MAX_Y + 32, 270, frames, maxLength, SHOT_PINK, RP_STG_LASER);
    }
}

task TFireE() {
    //closing wall

    int rad = 280;
    float angleAdd = [145, 150, 155][_diff];

    for (int i = 0; i < 64; i++) {
        float angleT = 360 / 64 * i;
        int shot = CreateShotUA1(MID_X + rad * cos(angleT), MID_Y + rad * sin(angleT), 0.5, angleT + angleAdd, SHOT_BLACK+HEART_L, 0, SHOT_BLACK+CANCEL_32);
        ObjShot_SetAutoDelete(shot, false);
    }
}
