#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 8"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -180;
int _loopTime = [270, 250, 250][_diff];
_spellID = 42 + _diff;
bool _timeOut = false;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(50 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TBowap();
    TLaserWings();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(8, 0);
    CallSFX(SND_TRANSITION);
    wait(180);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TSpark();
            }
        }
        yield;
    }
}

task TBowap() {
    while (_count < 0) yield;

    //reverse bowaps
    int spokes = [5, 6, 1][_diff];
    float radius = 440;
    float speed = [1.2, 1.4, 1.1][_diff];
    int deleteTime = radius / speed * [1, 1.3, 2][_diff];
    int waitTime = [10, 9, 2][_diff];

    float angleT = 0;
    float angleIncrement = 1;
    float angleAccel = [3.11, 3.11, 0.21][_diff];
    while (Boss_Alive(_objBoss)) {
        for (int i = 0; i < spokes; i++) {
            int color = [SHOT_WHITE, SHOT_YELLOW, SHOT_PINK][i % 3];
            float angleMod = i * (360 / spokes);
            int shotL = CreateShotUA1(MID_X - 100 + radius * cos(angleT + angleMod), 60 + radius * sin(angleT + angleMod), speed, angleT + angleMod + 180, color+SPARKLE, 0, color+CANCEL_BURST1);
            int shotR = CreateShotUA1(MID_X + 100 + radius * cos(-angleT - angleMod - 180), 60 + radius * sin(-angleT - angleMod - 180), speed, -angleT - angleMod, color+SPARKLE, 0, color+CANCEL_BURST1);
            ObjShot_SetAutoDelete(shotL, false);
            ObjShot_SetAutoDelete(shotR, false);
            ObjShot_SetDeleteFrame(shotL, deleteTime);
            ObjShot_SetDeleteFrame(shotR, deleteTime);
            if (_diff == 2) {
                ObjShot_SetSpellResist(shotL, true);
                ObjShot_SetSpellResist(shotR, true);
            }
        }
        CallSFX(SND_SHOT1);
        angleT += angleIncrement;
        angleIncrement += angleAccel;
        if (Boss_Life(_objBoss) >= 4000 && _count >= 2220 && !_timeOut) {
            _timeOut = true;
            DeleteShotAll(TYPE_CHILD, TYPE_IMMEDIATE);
            spokes = 6;
            speed = 1.8;
            deleteTime = radius / speed * 2;
            waitTime = 6;
            angleT = 0;
            angleIncrement = 1;
            angleAccel = 3.11;
            wait(180);
        }
        wait(waitTime);
    }
}

task TSpark() {
    //bone spark
    if(!Boss_Alive(_objBoss) || _timeOut) return;
    float angleT = GetAngleToPlayer(_objBoss);
    int delayTime = 120;
    float maxWidth = [120, 160, 100][_diff];
    int sustain = 80;

    //warning
    Animation_Charge(_objBoss, true);
    async {
        wait(54);
        Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 130, 0, 60, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
        wait(3);
        Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 130, 90, 60, 18, COLOR_GRAY_L);
        wait(3);
        Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 130, -90, 60, 18, COLOR_GRAY);
    }
    CreateMasterSpark(Boss_X(_objBoss), Boss_Y(_objBoss), angleT, 550, maxWidth, sustain, COLOR_GRAY, COLOR_GRAY_L, delayTime);
    Laser_WarningLine(Boss_X(_objBoss), Boss_Y(_objBoss), angleT + 12, 550, delayTime);
    Laser_WarningLine(Boss_X(_objBoss), Boss_Y(_objBoss), angleT - 12, 550, delayTime);

    //charge anim
    CallSFX(SND_CHARGE1);
    wait(delayTime);
    if(!Boss_Alive(_objBoss)) return;

    //laser & movement
    Animation_Charge(_objBoss, false);
    CallSFX(SND_MASTERSPARK);
    ObjMove_SetDestAtFrame(_objBoss, MID_X + 48 * cos(angleT + 180), 60 + 48 * sin(angleT + 180), sustain / 4, LERP_DECELERATE);
    wait(sustain / 4);
    if(!Boss_Alive(_objBoss)) return;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, sustain, LERP_SMOOTH);
}

task TLaserWings() {
    while (_count < -90) yield;

    Animation_Charge(_objBoss, true);

    CallSFX(SND_CHARGE2);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 500, 0, 45, 32, COLOR_GRAY_L, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 500, 360, 45, 18, COLOR_WHITE);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 500, -360, 45, 18, COLOR_YELLOW_L);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 500, 360, 45, 18, COLOR_PINK);
    wait(3);
    wait(10);

    float angleMod = 30;
    float distMod = 40;
    //top
    TLaser(0 - angleMod, 60 - distMod);
    TLaser(180 + angleMod, 60 - distMod);
    wait(6);
    //middle
    TLaser(0, 60);
    TLaser(180, 60);
    wait(6);
    //bottom
    TLaser(0 + angleMod, 60 + distMod);
    TLaser(180 - angleMod, 60 + distMod);
    wait(20);

    Animation_Charge(_objBoss, false);

    task TLaser(float angle_, float yDest_) {
        float xDest = angle_ > 90 ? MIN_X : MAX_X;
        int radius = 24;
        int delay = 30;

        int laser = CreateStraightLaserUA1(Boss_X(_objBoss) + radius * cos(angle_), Boss_Y(_objBoss) + radius * sin(angle_), dottheta(Boss_X(_objBoss), Boss_Y(_objBoss), xDest, yDest_), 250, 10000, COLOR_BLACK, delay);
        wait(delay);
        CallSFX(SND_LASER2);
        ObjShot_SetAutoDelete(laser, false);
        ObjShot_SetSpellResist(laser, true);

        while (!Obj_IsDeleted(laser)) {
            ObjMove_SetPosition(laser, Boss_X(_objBoss) + radius * cos(angle_), Boss_Y(_objBoss) + radius * sin(angle_));
            float destAngle = dottheta(Boss_X(_objBoss), Boss_Y(_objBoss), xDest, yDest_);
            ObjStLaser_SetAngle(laser, destAngle);
            yield;
        }
    }
}