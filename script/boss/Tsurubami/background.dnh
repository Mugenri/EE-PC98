#include "./../../lib/lib_Common.dnh"
bool _bSpell = false;

@Initialize {
    SetAutoDeleteObject(true);
    TBackground();
    TSpellBackground();
}

@MainLoop {
    int objScene = GetEnemyBossSceneObjectID();
	if (objScene != ID_INVALID && ObjEnemyBossScene_GetInfo(objScene, INFO_IS_SPELL))
	{
		_bSpell = true;
	}
	else
	{
		_bSpell = false;
	}
	yield;
}

task TBackground() {
    //bg
    string path = DIR_IMG ~ "stg/tsurubamiBG.png";
    int bg = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(bg, path);
    ObjSprite2D_SetSourceRect(bg, 0, 0, 384, 368);
    ObjSprite2D_SetDestRect(bg, 0, 0, 384, 368);
    ObjRender_SetTextureFilterMin(bg, 0);
    ObjRender_SetTextureFilterMag(bg, 0);
    ObjRender_SetTextureFilterMip(bg, 0);
    Obj_SetRenderPriorityI(bg, RP_STG_BG);

    int count = 30;
    int color = 0;
    bool increment = true;

    TLineEffect();

    loop {
        if (_bSpell) {
            //do thing
        } else if (!_bSpell) {
            ObjRender_SetColor(bg, color, color, color);
        }

        if (increment) {
            count++;
        } else {
            count--;
        }

        if (count >= 209) {
            increment = false;
        } else if (count < 30) {
            increment = true;
        }

        color = truncate(count/60) * 8 + 8;
        yield;
    }

    task TLineEffect() {
        //Used for movement
        int count = 0;

        //starting point for line columns/rows
        int xOrigin = -17;
        int yOrigin = -26;

        int x = xOrigin;
        int y = yOrigin;

        //Vertical Lines
        loop (5) {
            TCreateLine(x, y, 71, 7, true);
            x += 139;
        }

        x = xOrigin - 139; //need one point back to cover full range of motion
        y = yOrigin + 70; //Height of a rectangle

        //Horizontal Lines
        loop (5) {
            TCreateLine(x, y, 140, 7, false);
            y += 70;
        }

        //Movement
        loop {
            if (count >= 140) {
                count = 0;
            }
            count++;
            yield;
        }

        task TCreateLine(int xStart_, int yStart_, int step_, int points_, bool vertical_) {
            int[][] positions = [];

            int line = ObjPrim_Create(OBJ_PRIMITIVE_2D);
            ObjPrim_SetPrimitiveType(line, PRIMITIVE_LINESTRIP);
            Obj_SetRenderPriorityI(line, RP_STG_BG);
            ObjPrim_SetVertexCount(line, points_);
            ascent (i in 0..points_) {
                ObjPrim_SetVertexColor(line, i, 78, 78, 78);
            }
            ascent (i in 0..points_) {
                ObjPrim_SetVertexPosition(line, i, xStart_, yStart_, 1);
                positions = positions ~ [[xStart_, yStart_]];
                if (vertical_) yStart_ += step_;
                else xStart_ += step_;
            }

            //set positions based on grid position and multiplier based on distance from the middle
            loop {
                ascent (i in 0..length(positions)) {
                    int xCurr = positions[i][0] - count;
                    int yCurr = positions[i][1];
                    xCurr -= (xCurr - MID_X) * 0.06 * (absolute(yCurr - MID_Y) * 0.02);
                    yCurr += (yCurr - MID_Y) * 0.06 * (absolute(xCurr - MID_X) * 0.02);

                    ObjPrim_SetVertexPosition(line, i, xCurr, yCurr, 1);
                }
                yield;
            }
        }
    }
}

task TSpellBackground() {
    //TODO spell bg
}