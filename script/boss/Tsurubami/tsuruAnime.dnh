//TODO this whole fuckin thing needs work still but less so now
bool _charge = false; //charge animation

task TDrawBoss(int objBoss_) {
    ObjPrim_SetTexture(objBoss_, IMG_STG_TSURUBAMI);
    ObjSprite2D_SetSourceRect(objBoss_, 0, 0, 64, 64);
    ObjSprite2D_SetDestCenter(objBoss_);
    Obj_SetRenderPriorityI(objBoss_, RP_STG_ENEMY);

    ObjShader_SetShaderF(objBoss_, HLSL_WHITE);
    ObjShader_SetTechnique(objBoss_, "TecWhite");

    real chargeFrame = 0;
    bool isFlashing = false;
    
    while (!Obj_IsDeleted(objBoss_)) {
        //in order of precedence
        if (_spellBarrier || _isSurvival) { //bomb barrier/survival
            if (ObjMove_GetSpeed(objBoss_) == 0 || absolute(cos(ObjMove_GetAngle(objBoss_))) < 0.1) { //idle
                ObjSprite2D_SetSourceRect(objBoss_, 192, 0, 256, 64);
            } else { //moving
                if (cos(ObjMove_GetAngle(objBoss_)) < 0) { //left
                    ObjSprite2D_SetSourceRect(objBoss_, 320, 0, 384, 64);
                } else {
                    ObjSprite2D_SetSourceRect(objBoss_, 256, 0, 320, 64);
                }
            }
        } else if (_charge) { //charge animation
            ObjSprite2D_SetSourceRect(objBoss_, 384 + floor(chargeFrame) * 64, 0, 448 + floor(chargeFrame) * 64, 64);
            chargeFrame += 1/6;
        } else { //not charge/bomb invuln
            if (ObjMove_GetSpeed(objBoss_) == 0 || absolute(cos(ObjMove_GetAngle(objBoss_))) < 0.1) { //idle/moving vertically
                ObjSprite2D_SetSourceRect(objBoss_, 0, 0, 64, 64);
            } else { //moving
                if (cos(ObjMove_GetAngle(objBoss_)) < 0) { //left
                    ObjSprite2D_SetSourceRect(objBoss_, 128, 0, 192, 64);
                } else { //right
                    ObjSprite2D_SetSourceRect(objBoss_, 64, 0, 128, 64);
                }
            }
        }
        ObjSprite2D_SetDestCenter(objBoss_);
        
        //flash on hit
        if (isFlashing == false && _isDamaged) {
            isFlashing = true;
            async { //TODO consider making generic damage function somewhere (probably generic anim library)
                loop (3) {
                    ObjShader_SetFloat(objBoss_, "enable_", 1);
                    yield;
                    ObjShader_SetFloat(objBoss_, "enable_", 0);
                    wait(3);
                }
                isFlashing = false;
            }
        }

        //variable resets
        if (chargeFrame > 0 && (chargeFrame >= 4 || !_charge)) chargeFrame = 0;
        yield;
    }
    ObjShader_SetFloat(objBoss_, "enable_", 0); //turn off white shader
}

function<void> Anime_Charge(bool active_) {
    _charge = active_;
}