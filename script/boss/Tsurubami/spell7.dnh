#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 7"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [110, 110, 85][_diff];
_spellID = 36 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(50 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(400000);
    }
    case (EV_REQUEST_IS_DURABLE_SPELL) {
        SetScriptResult(true);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TMaze();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, MID_Y, 30, LERP_DECELERATE);
    wait(30);
    Transition_Zoom(1, 0, COLOR_BLACK);
    CallSFX(SND_TRANSITION);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
    if (GetGameMode == GAME_MAIN) CreateItem(MID_X, MID_Y, ITEM_EXTEND);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TScales();
                _loopTime = max(85, (_loopTime - 1));
                _count = 0; //prevents spawn time weirdness
                WriteLog(_loopTime);
            }
        }
        yield;
    }
}

task TMaze() {
    float exitAngle = 120; //where the hole in the wall is
    int radiusMax = 280; //distance from center
    int closeTime = [1100, 850, 750][_diff]; //frames from max radius to center
    int numShot = 72;
    int minRange = [105, 130, 160][_diff];
    int maxRange = [255, 230, 200][_diff];

    while (_count < 0) yield;

    for (int i = 0; i < 10; i++) {
        TSpawnWall(exitAngle, i);
        exitAngle += rand(minRange, maxRange);
        loop (35) {
            closeTime = max(700, closeTime - 1);
            wait(8);
        }
    }

    task TSpawnWall(float angle_, int wallNum_) {
        int[] wallShot = [];
        int color = SHOT_GREEN_INV;
        int increment = numShot + 10;
        if (wallNum_ == 9) { //last, close circle
            increment = numShot;
            color = SHOT_BLACK;
        }
        for (int i = 0; i < numShot; i++) {
            if (i == numShot - 1 && wallNum_ < 9) color = SHOT_GREEN_INV; //last shot
            int shot = CreateShotUA1(MID_X + radiusMax * cos(angle_), MID_Y + radiusMax * sin(angle_), 0, angle_, color+BALL_L, 0, color+CANCEL_32);
            ObjShot_SetSpellResist(shot, true);
            ObjShot_SetAutoDelete(shot, false);
            wallShot ~= [shot];
            angle_ += 360 / increment;
            if (wallNum_ < 9) color = SHOT_GREEN;
        }

        //movement
        float radius;
        float modif = rand(0, 360);
        int modAdd = 20;
        int shift = [1, 2, 3][_diff];
        if (wallNum_ == 9) shift = 6;
        for (float i = 0; i < closeTime; i++) {
            radius = Interpolate_Linear(radiusMax, 0, i / closeTime);
            modif += shift;
            for each (shot in wallShot) {
                float angleT = dottheta(MID_X, MID_Y, ObjMove_GetX(shot), ObjMove_GetY(shot));
                ObjMove_SetPosition(shot, MID_X + ((radius + 8 * sin(modif)) * cos(angleT)), MID_Y + ((radius + 8 * sin(modif)) * sin(angleT)));
                modif += modAdd;
            }
            yield;
        }
        for each (shot in wallShot) {
            ObjShot_SetDeleteFrame(shot, 0);
        }
    }
}

task TScales() {
    int numShot = [8, 10, 11][_diff];
    float speed = [1.0, 0.8, 0.6][_diff];

    float angleT = rand(0, 360);
    for (int i = 0; i < numShot; i++) {
        CreateShotUA1(MID_X, MID_Y, speed, angleT, SHOT_RED+SCALE, 0, SHOT_RED+SPAWN_E+SIZE_16, SHOT_RED+CANCEL_SPARKLE);
        for (int i = 1; i < 7; i++) {
            CreateShotUA1(MID_X, MID_Y, speed, angleT + i, i+SCALE, i * 4, i+SPAWN_E+SIZE_16, i+CANCEL_SPARKLE);
            CreateShotUA1(MID_X, MID_Y, speed, angleT - i, i+SCALE, i * 4, i+SPAWN_E+SIZE_16, i+CANCEL_SPARKLE);
        }
        angleT += 360 / numShot;
    }
    CallSFX(SND_SHOT2);
}