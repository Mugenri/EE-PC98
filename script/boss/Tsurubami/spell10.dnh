#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 10"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [240, 240, 200][_diff];
_spellID = 54 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3500);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(10, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TWall(1);
                TRing(-1);
                wait (_loopTime / 2);
                TWall(-1);
                TRing(1);
            }
        }
        yield;
    }
}

task TWall(int dir_) {
    if (!Boss_Alive(_objBoss)) return;
    CallSFX(SND_FIRE);
    for (int i = 0; i < 23; i++) {
        if (!Boss_Alive(_objBoss)) return;
        TFireWall(i * 16 + 8);
        wait(12);
    }


    task TFireWall(float yPos_) {
        int frames = [135, 150, 160][_diff];
        float maxLength = [210, 220, 235][_diff];
        int laser = CreateFireLaser(MID_X + (MID_X + 16) * dir_, yPos_, 90 + 90 * dir_, frames, maxLength, SHOT_BLUE, RP_STG_LASER);
    }
}

task TRing(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    int innerCount = [7, 9, 10][_diff];
    int outerCount = [12, 16, 16][_diff];

    Animation_Charge(_objBoss, true);

    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 100, 0, 20, 32, COLOR_INDIGO, false, RP_STG_EFF_MID);
    wait(5);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 100, -90 * dir_, 20, innerCount, COLOR_BLUE);
    wait(5);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 0, 100, 90 * dir_, 20, outerCount, COLOR_INDIGO_L);
    wait(20);

    Animation_Charge(_objBoss, false);

    if (!Boss_Alive(_objBoss)) return;

    int[] outer = [];
    int[] inner = [];

    float xSpeed = rand(2.2, 2.8) * dir_;
    float ySpeed = -3;
    float yMax = 1.6;

    int core = CreateShotUB2(Boss_X(_objBoss), Boss_Y(_objBoss), xSpeed, ySpeed, -0.05 * dir_, 0.1, 0.001, yMax, SHOT_BLUE+FIRE_A, 0, SHOT_BLUE+SPAWN_S+SIZE_32, SHOT_BLUE+CANCEL_32);
    ObjShot_SetSpellResist(core, true);
    ObjShot_SetAutoDelete(core, false);
    CallSFX(SND_SHOT2);

    wait(20); //spawn animation time
    if (!Boss_Alive(_objBoss)) return;

    //shot rings
    for (int i = 0; i < outerCount; i++) {
        int shot = CreateShotUA1(ObjMove_GetX(core), ObjMove_GetY(core), 0, 0, SHOT_BLUE+FIRE_S, 0, SHOT_BLUE+CANCEL_SPARKLE);
        ObjShot_SetSpellResist(shot, true);
        ObjShot_SetAutoDelete(shot, false);
        outer ~= [shot];
    }

    for (int i = 0; i < innerCount; i++) {
        int shot = CreateShotUA1(ObjMove_GetX(core), ObjMove_GetY(core), 0, 0, SHOT_BLUE+BUTTERFLY, 0, SHOT_BLUE+CANCEL_SPARKLE);
        ObjShot_SetSpellResist(shot, true);
        ObjShot_SetAutoDelete(shot, false);
        inner ~= [shot];
    }

    float rotCount = rand(0, 360);
    float rotSpeed = [0.5, 0.65, 0.7][_diff];
    float rad = 0;
    float radMax = [125, 150, 150][_diff];

    int frame = 0;
    int frames = 120;

    while (!Obj_IsDeleted(core)) {
        float coreX = ObjMove_GetX(core);
        float coreY = ObjMove_GetY(core);

        if (coreY > MAX_Y + radMax + 32) break;

        for (int i = 0; i < outerCount; i++) {
            float angleT = rotCount + i * (360 / outerCount);
            ObjMove_SetPosition(outer[i], coreX + rad * cos(angleT), coreY + rad * sin(angleT));
            ObjMove_SetAngle(outer[i], angleT + (90 * dir_));
        }

        for (int i = 0; i < innerCount; i++) {
            float angleT = rotCount + i * (360 / innerCount);
            angleT *= -1;
            ObjMove_SetPosition(inner[i], coreX + (rad / 2) * cos(angleT), coreY + (rad / 2) * sin(angleT));
            ObjMove_SetAngle(inner[i], angleT - (90 * dir_));
        }

        rad = Interpolate_Decelerate(0, radMax, frame / as_float(frames));
        rotCount += rotSpeed * dir_;
        if (frame < frames) frame++;
        yield;
    }
    
    if (!Obj_IsDeleted(core)) ObjShot_SetDeleteFrame(core, 0);
    for each (shot in outer) {
        if (!Obj_IsDeleted(shot)) ObjShot_SetDeleteFrame(shot, 0);
    }
    for each (shot in inner) {
        if (!Obj_IsDeleted(shot)) ObjShot_SetDeleteFrame(shot, 0);
    }
}