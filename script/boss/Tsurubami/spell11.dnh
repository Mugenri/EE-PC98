#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 11"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -360;
int _loopTime = [146, 126, 106][_diff];
_spellID = 60 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3700);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(50 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TPattern();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, MAX_Y - 32, 30, LERP_DECELERATE);
    wait(30);
    Transition_Rise(11, 0);
    CallSFX(SND_TRANSITION);
    wait(370);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        yield;
    }
}

task TPattern() {
    wait(60);

    float xRadMax = 150; //ellipse radius x
    float yRadMax = 16; //ellipse radius y

    Animation_Charge(_objBoss, true);
    CallSFX(SND_CHARGE1);

    loop (2) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_BLACK, false, RP_STG_EFF_MID);
        wait(2);
    }
    loop (3) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_GRAY_D, false, RP_STG_EFF_MID);
        wait(2);
    }
    loop (3) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_GRAY_L, false, RP_STG_EFF_MID);
        wait(2);
    }
    loop (2) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
        wait(2);
    }
    wait(60);

    CallSFX(SND_SHOT2);
    Animation_Charge(_objBoss, false);

    int[] bottom = [];
    loop (4) {
        bottom ~= [CreateFamiliar()];
    }

    async { //bottom loop
        float rad = 0; //0 to 1 radius expansion percent
        int frames = 150;
        while (_bossAlive) {
            //movement
            float xRad = Interpolate_Smooth(0, xRadMax, rad);
            float yRad = Interpolate_Smooth(0, yRadMax, rad);
            for (int i = 0; i < 4; i++) {
                float angleT = 90 * i + _count; //position in circle
                float x = 0.5 + 0.5 * (cos(angleT));
                float y = 0.5 + 0.5 * (sin(angleT));
                float xPos = Interpolate_Linear(MID_X - xRad, MID_X + xRad, x);
                float yPos = Interpolate_Linear(MAX_Y - 32 - yRad, MAX_Y - 32 + yRad, y);
                ObjMove_AddPatternD2(bottom[i], 0, xPos, yPos, 1, LERP_LINEAR);
            }

            if (_count % _loopTime == 0 && _count >= 0) {
                async {
                    for each (obj in bottom) {
                        if (!_bossAlive) break;
                        float angMod = rand(-4, 4);
                        TTrail(CreateShotUA1(ObjMove_GetX(obj), ObjMove_GetY(obj), 4.5, 0 + angMod, SHOT_GRAY+CARD, 0, SHOT_GRAY+CANCEL_FADE), 0 + angMod);
                        TTrail(CreateShotUA1(ObjMove_GetX(obj), ObjMove_GetY(obj), 4.5, 180 + angMod, SHOT_GRAY+CARD, 0, SHOT_GRAY+CANCEL_FADE), 180 + angMod);
                        CallSFX(SND_SHOT3);
                        wait(_loopTime / 4);
                    }
                }
            }

            rad = min(1, rad + (1 / as_float(frames)));
            yield;
        }

        for each (obj in bottom) {
            Obj_Delete(obj);
        }
    }

    wait(30);

    ObjMove_SetDestAtFrame(_objBoss, MID_X, 32, 90, LERP_DECELERATE);
    wait(90);

    Animation_Charge(_objBoss, true);
    CallSFX(SND_CHARGE1);

    loop (2) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_BLACK, false, RP_STG_EFF_MID);
        wait(2);
    }
    loop (3) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_GRAY_D, false, RP_STG_EFF_MID);
        wait(2);
    }
    loop (3) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_GRAY_L, false, RP_STG_EFF_MID);
        wait(2);
    }
    loop (2) {
        Primitive_ContractPolygon2D(_bossX, _bossY, 0, 128, 0, 60, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
        wait(2);
    }
    wait(60);

    CallSFX(SND_SHOT2);
    Animation_Charge(_objBoss, false);

    int[] top = [];
    loop (3) {
        top ~= [CreateFamiliar()];
    }
    top ~= [_objBoss];

    async { //top loop
        float rad = 0; // 0 to 1 radius expansion percent
        int frames = 150;
        int loopCount = 0;
        while (_bossAlive) {
            //movement
            float xRad = Interpolate_Smooth(0, xRadMax, rad);
            float yRad = Interpolate_Smooth(0, yRadMax, rad);
            for (int i = 0; i < 4; i++) {
                float angleT = 90 * i + _count; //position in circle
                float x = 0.5 + 0.5 * (-cos(angleT));
                float y = 0.5 + 0.5 * (sin(angleT));
                float xPos = Interpolate_Linear(MID_X - xRad, MID_X + xRad, x);
                float yPos = Interpolate_Linear(32 - yRad, 32 + yRad, y);
                ObjMove_AddPatternD2(top[i], 0, xPos, yPos, 1, LERP_LINEAR);
            }

            if (_count % (_loopTime ~/ 2) == 0 && _count >= 0) {
                //shots
                int color = [SHOT_RED, SHOT_ORANGE, SHOT_YELLOW, SHOT_GREEN, SHOT_BLUE, SHOT_PURPLE, SHOT_PINK][loopCount % 7];
                for each (obj in top) {
                    TRain(obj, color);
                }
                loopCount++;
                CallSFX(SND_SHOT1);
            }

            rad = min(1, rad + (1 / as_float(frames)));
            yield;
        }

        for each (obj in bottom) {
            Obj_Delete(obj);
        }
    }

    task TTrail (int obj_, float angle_) {
        int loopNum = rand_int(0, 6);
        float angMod = [92, 100, 105][_diff];
        float speed = [0.6, 0.7, 1.0][_diff];
        int waitTime = [4, 3, 2][_diff];
        while (!Obj_IsDeleted(obj_)) {
            int color = [SHOT_RED_INV, SHOT_ORANGE_INV, SHOT_YELLOW_INV, SHOT_GREEN_INV, SHOT_BLUE_INV, SHOT_PURPLE_INV, SHOT_PINK_INV][loopNum % 7];
            CreateShotUA1(ObjMove_GetX(obj_), ObjMove_GetY(obj_), speed, angle_ + angMod, color+CROSS_PELLET, 0, color+SPAWN_E+SIZE_8, color+CANCEL_BURST1);
            CreateShotUA1(ObjMove_GetX(obj_), ObjMove_GetY(obj_), speed, angle_ - angMod, color+CROSS_PELLET, 0, color+SPAWN_E+SIZE_8, color+CANCEL_BURST1);
            loopNum++;
            wait(waitTime);
        }
    }

    task TRain(int obj_, int color_) {
        float xPos = ObjMove_GetX(obj_);
        float yPos = ObjMove_GetY(obj_);
        int shot = CreateShotUB2(xPos, yPos, 0.001, -1.4, 0, 0.04, 0, 4.8, color_+SWORD_A, 0, color_+SPAWN_S+SIZE_32, color_+CANCEL_32);

        float xSpeed = 0.4;
        CreateShotUB2(xPos, yPos, xSpeed, -1.4, -0.004, 0.04, 0.001, 2.4, color_+KUNAI, 0, color_+SPAWN_E+SIZE_16, color_+CANCEL_BURST1);
        CreateShotUB2(xPos, yPos, -xSpeed, -1.4, 0.004, 0.04, 0.001, 2.4, color_+KUNAI, 0, color_+SPAWN_E+SIZE_16, color_+CANCEL_BURST1);

        while (!Obj_IsDeleted(shot)) {
            int[] ids = GetShotIdInCircleA2(ObjMove_GetX(shot), ObjMove_GetY(shot), 14, TARGET_ENEMY);
            for each (id in ids) {
                if (ObjShot_GetImageID(id) < 37 || (ObjShot_GetImageID(id) > 2000 && ObjShot_GetImageID(id) < 2037)) ObjShot_SetDeleteFrame(id, 0); //shot is a cross pellet or a spawn animation
            }
            yield;
        }
    }
}

function<int> CreateFamiliar() { //make a ink dude
    int obj = ObjEnemy_Create(OBJ_ENEMY);
    Boss_SetID(obj, BOSS_ID_TSURUBAMI);
    Animation_DrawBoss(obj);
    ObjEnemy_SetDamageRate(obj, 0, 0);
    ObjEnemy_SetLife(obj, 1);
    ObjEnemy_Regist(obj);
    ObjRender_SetColor(obj, COLOR_BLACK);
    Obj_SetRenderPriorityI(obj, RP_STG_ENEMY);
    return obj;
}