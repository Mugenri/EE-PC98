#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Nonspell 9"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -60;
int _loopTime = 120;
_spellID = 51 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(40 + absolute(_count / 60));
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    TInitialize();
    TFinalize();
    TMain();
    TNoCheese();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(60);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFireA(1);
                TFireB(1);
                wait(_loopTime / 2);
                TFireA(-1);
                TFireB(-1);
            }
        }
        yield;
    }
}

task TNoCheese() {
    while (ObjEnemy_GetInfo(_objBoss, INFO_LIFE) > 2000) yield;

    bool cheese = false;
    int waitTime = 1;
    int cheeseTimer = 0;

    while (Boss_Alive(_objBoss)) {
        if (GetPlayerY < 80) {
            cheeseTimer++;
            if (cheeseTimer > 180) {
                _loopTime = 999999;
                cheese = true;
                waitTime = 4;
            }
        }

        if (cheese) { // :)
            float angle = rand(0, 360);
            float xPos = Boss_X(_objBoss) + rand(-40, 40);
            float yPos = Boss_Y(_objBoss) + rand(-40, 40);
            int graphic = rand_int(0, 1) == 0 ? SHOT_GRAY+BALL_S : SHOT_GRAY+PELLET;
            loop (32) {
                CreateShotUA1(xPos, yPos, 6, angle, graphic, 0, SHOT_GRAY+SPAWN_S+SIZE_16, SHOT_GRAY+CANCEL_BURST1);
                angle += 360 / 32;
            }
            CallSFX(SND_SHOT1);
        }

        wait(waitTime);
    }
}

task TFireA(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    int amulet = CreateShotUA2(Boss_X(_objBoss), Boss_Y(_objBoss), 8, 90 - 80 * dir_, -1.2, 1.5, 3.6 * dir_, SHOT_BLACK+CARD, 0, SHOT_BLACK+SPAWN_S+SIZE_16, SHOT_BLACK+CANCEL_FADE);
    ObjMove_AddPatternA2(amulet, 50, NO_CHANGE, NO_CHANGE, 0.15, 8, 0);
    ObjShot_SetSpellResist(amulet, true);
    CallSFX(SND_SHOT3);

    wait(20);

    int waitTime = [8, 4, 4][_diff];
    while (Boss_Alive(_objBoss) && !Obj_IsDeleted(amulet)) {
        TTrail(amulet);
        wait(waitTime);
    }

    task TTrail(int obj_) {
        int shotNum = [3, 2, 3][_diff];
        loop (shotNum) {
            float xVar = rand (0.9, 1.3) * dir_;
            float yVar = rand(-0.5, 0.5);
            int color = yVar > 0 ? SHOT_GRAY : SHOT_WHITE;
            CreateShotUB2(ObjMove_GetX(obj_), ObjMove_GetY(obj_), xVar * 2.5, -4.5 + yVar, -0.08 * dir_, 0.15, xVar, 2.5, color+FIRE_S, 0, color+SPAWN_E+SIZE_16, color+CANCEL_SPARKLE);
        }
    }
}

task TFireB(int dir_) {
    if (!Boss_Alive(_objBoss)) return;

    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 100, 0, 30, 32, COLOR_GRAY_L, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 100, -90 * dir_, 30, 8, COLOR_GRAY);

    int laserNum = [6, 8, 16][_diff];
    float speed = [9.5, 12.5, 14][_diff];
    float laserLength = [135, 160, 190][_diff];
    int waitTime = [8, 6, 3][_diff];
    int delay = 30;
    float angleT = GetAngleToPlayer(_objBoss) + 90 * dir_;

    loop (laserNum) {
        if (!Boss_Alive(_objBoss)) return;
        TLaser(angleT);
        angleT -= (180 / laserNum) * dir_;
        wait(waitTime);
    }

    task TLaser(float angle_) {
        int warning = Laser_WarningLine(Boss_X(_objBoss), Boss_Y(_objBoss), angle_, 400, delay);
        int laser = CreateLooseLaserUA1(Boss_X(_objBoss), Boss_Y(_objBoss), speed, angle_, laserLength, COLOR_BLACK, delay);
        wait(delay);
        if (!Boss_Alive(_objBoss)) return;
        CallSFX(SND_LASER2);
    }
}