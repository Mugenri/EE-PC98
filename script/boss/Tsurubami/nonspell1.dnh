#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["nonspell1"]
#System["./../../system/System.dnh"]
#Background["./../../system/TestBG.dnh"]

#include "./../../lib/lib_Common.dnh"
#include "./tsuruAnime.dnh"
#include "./lib_Tsuru.dnh"
#include "./../../lib/lib_Shot.dnh"

int objBoss;
int count = -120;
int loopTime = 120;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(350);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(60);
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    LoadShotData();
    objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
    InitCommon(); //TODO change to initboss and a boss library
    ObjMove_SetPosition(objBoss, MID_X, 60);
    

    //TBombBarrier();

    TDrawBoss(objBoss);
    TFinalize;
}

@MainLoop {
    ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32);
    ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
    if (count % loopTime == 0 && count >= 0) {
        //TPatternE();
        async{
            TPatternB(1);
            TPatternB(-1);
            wait(30);
            TPatternC();
            wait(30);
            TPatternD();
            wait(30);
            TPatternE();
        }
    }
    count++;

    yield;
}

task TFinalize() {
    while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) yield;
    Obj_Delete(objBoss);

    //Need to put in a library, not do this if the spell is timed out
    //Actual MS bullet cancel score progression
    int score = 10;
    int scoreBonus = 10;
    int numBullets = 0;
    for each (shot in GetShotIdInCircleA2(MID_X, MID_Y, 500, TARGET_ENEMY)) { //TODO the way this works needs some changing, items tend to spawn at the bottom of the screen
        Obj_SetValueI(shot, SHOT_SCORE, score);
        if (numBullets < 35 && Obj_GetType(shot) == OBJ_SHOT) { //first 35 bullets drop point items
            Obj_SetValueI(shot, SHOT_DROP_ITEM, true);
            numBullets++;
        }
        score += scoreBonus;
        scoreBonus += 30;
        score = min(score, 12800);
    }
    //^^
    DeleteShotAll(TYPE_ALL, TYPE_ITEM);
    SetAutoDeleteObject(true);
    wait(30);
    CloseScript(GetOwnScriptID());
    return;
}

task TPatternA() {
    AnimeCharge();
    wait(20);
    if (ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0) return;
    loop (3) {
        loop (5) {
            real angleT = rand(0, 360);
            loop (10) {
                if (ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0) return;
                int obj = CreateShotU1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 4, angleT, WHITE_2NEEDLE, 20, A_WHITE_BALL);
                angleT += 360/10;
            }
            wait(6);
        }
        wait(6);
    }
    wait(10);
    AnimeCharge();
}

task TPatternB(int dir_) {
    real angleT = 0;

    loop (8) {
        real x = ObjMove_GetX(objBoss) + 30 * cos(angleT);
        real y = ObjMove_GetY(objBoss) + 30 * sin(angleT);
        int obj = CreateStraightLaserU1(x, y, dottheta(x, y, GetPlayerX(), GetPlayerY()), 550, 60, 0xFF00FF, 60);
        angleT += 45;
        TMove(obj);
    }

    task TMove(int laser_) {
        real x = ObjMove_GetX(laser_);
        loop (50) {
            ObjMove_SetX(laser_, x);
            ObjStLaser_SetAngle(laser_, GetAngleToPlayer(laser_));
            x += 3 * dir_;
            yield;
        }
        loop (70) {
            ObjMove_SetX(laser_, x);
            x += 1.5 * dir_;
            yield;
        }
    }
}

task TPatternC() {
    real angle = 180;
    loop (11) {
        if (!ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) return;
        int dist = 25;
        let obj = CreateLooseLaserU1(ObjMove_GetX(objBoss) + dist * cos(angle), ObjMove_GetY(objBoss) + dist * sin(angle), 4.5, angle, 120, 0x444444, 0);
        angle -= 18;
        wait(5);
    }
    angle = 0;
    loop (11) {
        if (!ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0) return;
        int dist = 15;
        CreateLooseLaserU1(ObjMove_GetX(objBoss) + dist * cos(angle), ObjMove_GetY(objBoss) + dist * sin(angle), 4.5, angle, 120, 0x444444, 0);
        angle += 18;
        wait(3);
    }
}

task TPatternD() {
    loop (40) {
        CreateShotU1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 5, GetAngleToPlayer(objBoss), WHITE_2NEEDLE, 0, A_WHITE_BALL);
        wait(2);
    }
}

task TPatternE {
    let angleT = round(rand(0, 360));
    let xPos = rand(-15, 15);
    let yPos = rand(-15, 15);
    let bSprite = round(rand(0, 1)) * 5;
    loop(32){
        if (ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0) return;
        CreateShotU1(ObjMove_GetX(objBoss) + xPos, ObjMove_GetY(objBoss) + yPos, 5, angleT, 4 + bSprite, 5, A_WHITE_BALL);
        angleT += 360/32;
    }
}