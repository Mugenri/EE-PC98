#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 3"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [520, 520, 75][_diff];
_spellID = 15 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3500);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TWalls();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, [60, 60, MID_Y][_diff], 30, LERP_DECELERATE);
    wait(30);
    Transition_Rise(1, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, 30, 70, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFire();
            }
        }
        yield;
    }
}

task TWalls() {
    while (_count < 0) yield;

    int laserL = CreateStraightLaserUA1(32, 0, 180, MAX_Y + 40, 60 * 60, COLOR_GRAY_L, 60);
    int laserR = CreateStraightLaserUA1(MAX_X - 32, 0, 0, MAX_Y + 40, 60 * 60, COLOR_GRAY_L, 60);
    ObjShot_SetSpellResist(laserL, true);
    ObjShot_SetSpellResist(laserR, true);

    wait(60);
    CallSFX(SND_LASER1);

    int frames = 120;
    for (int i = 1; i <= frames; i++) {
        ObjStLaser_SetAngle(laserL, Interpolate_Decelerate(180, 80, i / as_float(frames)));
        ObjStLaser_SetAngle(laserR, Interpolate_Decelerate(0, 100, i / as_float(frames)));
        yield;
    }

    while(_bossAlive) {
        for (int i = 1; i <= frames; i++) {
            if (!_bossAlive) break;
            ObjStLaser_SetAngle(laserL, Interpolate_Smoother(80, 100, i / as_float(frames)));
            ObjStLaser_SetAngle(laserR, Interpolate_Smoother(100, 80, i / as_float(frames)));
            yield;
        }
        for (int i = 1; i <= frames; i++) {
            if (!_bossAlive) break;
            ObjStLaser_SetAngle(laserL, Interpolate_Smoother(100, 80, i / as_float(frames)));
            ObjStLaser_SetAngle(laserR, Interpolate_Smoother(80, 100, i / as_float(frames)));
            yield;
        }
    }

    Obj_Delete(laserL);
    Obj_Delete(laserR);
}

task TFire() {
    if (!_bossAlive) return;
    int[] shots = [];
    float xPos = ObjMove_GetX(_objBoss);
    float yPos = ObjMove_GetY(_objBoss);

    Animation_Charge(_objBoss, true);
    Primitive_ContractPolygon2D(xPos, yPos, 45, 100, 0, 20, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
    wait(3);
    Particle_ContractRing(xPos, yPos, 0, 100, 90, 20, 8, COLOR_GRAY_L);
    Particle_ContractRing(xPos, yPos, 0, 100, -90, 20, 8, COLOR_GRAY_L);

    wait(20);

    async {
        loop (300) {
            if (!_bossAlive) return;
            for each (shot in shots) Reflect(shot);
            yield;
        }
    }

    float angleT = rand(0, 360);
    float speed = [2.2, 2.5, 1.4][_diff];
    for (int i = 0; i < [32, 32, 16][_diff]; i++) { //spawn
        if (!_bossAlive) return;
        int shot = CreateShotUA1(xPos, yPos, speed, angleT, SHOT_WHITE+BOUNCY_BALL, 0, SHOT_WHITE+SPAWN_S+SIZE_8, SHOT_WHITE+CANCEL_BURST1);
        ObjShot_SetSpellResist(shot, true);
        shots ~= [shot];
        angleT += rand(90, 120);
        CallSFX(SND_SHOT1);
        wait(2);
    }

    Animation_Charge(_objBoss, false);

    //shuffle indices
    for (int i = 0; i < length(shots); i++) {
        int j = rand_int(0, length(shots) - 1);
        int temp = shots[i];
        shots[i] = shots[j];
        shots[j] = temp;
    }

    int waitTime = [90, 90, 120][_diff];
    wait(waitTime);

    if (!_bossAlive) return;
    for each (shot in shots) { //slow
        ObjMove_AddPatternA2(shot, 0, NO_CHANGE, NO_CHANGE, -0.04, 0, NO_CHANGE);
    }

    int firstLaser = CreateStraightLaserUA1(xPos, yPos, 0, 0, 5, COLOR_GRAY_L, 120);
    int shot1 = shots[length(shots) - 1]; //last index shot

    Animation_Charge(_objBoss, true);

    Primitive_ContractPolygon2D(xPos, yPos, 45, 128, 0, 120, 32, COLOR_GRAY_L, false, RP_STG_EFF_MID);
    Primitive_ContractPolygon2D(xPos, yPos, 45, 128, 0, 125, 32, COLOR_GRAY_L, false, RP_STG_EFF_MID);
    Primitive_ContractPolygon2D(xPos, yPos, 45, 128, 0, 130, 32, COLOR_WHITE, false, RP_STG_EFF_MID);
    CallSFX(SND_CHARGE1);

    loop (75) { //point at last index
        if (!_bossAlive) return;
        float x1 = xPos;
        float y1 = yPos;
        float x2 = ObjMove_GetX(shot1);
        float y2 = ObjMove_GetY(shot1);
        float angle = dottheta(x1, y1, x2, y2);
        float len = distance(x1, y1, x2, y2);
        ObjStLaser_SetAngle(firstLaser, angle);
        ObjLaser_SetLength(firstLaser, len);
        yield;
    }

    //bouncy laser
    int shot2 = shot1;

    async {
        for (int i = length(shots) - 1; i > 0; i--) {
            if (!_bossAlive) return;
            shot1 = shot2;
            shot2 = shots[i - 1];
            float x2 = ObjMove_GetX(shot1);
            float y2 = ObjMove_GetY(shot1);
            float x1 = ObjMove_GetX(shot2);
            float y1 = ObjMove_GetY(shot2);
            float angle = dottheta(x1, y1, x2, y2);
            float len = distance(x1, y1, x2, y2);
            CreateStraightLaserUA1(x1, y1, angle, len, 5, COLOR_GRAY_L, 45);
            ObjShot_SetDeleteFrame(shot1, 45);
            wait(2);
        }
    }
    async {
        wait(45);
        loop (length(shots) - 1) {
            if (_bossAlive) CallSFX(SND_LASER2);
            wait(2);
        }
    }


    wait(13);
    Particle_ContractRing(xPos, yPos, 0, 100, 180, 32, 8, COLOR_GRAY_L);
    Particle_ContractRing(xPos, yPos, 0, 100, -180, 32, 8, COLOR_GRAY_L);
    wait(32); //laser delay time
    Animation_Charge(_objBoss, false);

    //explode shot
    int color = [SHOT_BLUE_INV, SHOT_BLUE_INV, SHOT_RED_INV][_diff];
    int loopNum = [4, 5, 3][_diff];
    for (int i = length(shots) - 1; i >= 0; i--) {
        if (!_bossAlive) return;
        int shot = shots[i];
        float x = ObjMove_GetX(shot);
        float y = ObjMove_GetY(shot);
        angleT = rand(0, 360);
        loop (loopNum) {
            CreateShotUA1(x, y, [0.75, 0.75, 0.65][_diff], angleT, color+PELLET, 0, color+SPAWN_S+SIZE_8, color+CANCEL_BURST1);
            angleT += 360 / loopNum;
        }
        Obj_Delete(shot);
        wait(2);
    }

    function<bool> Reflect(int obj_) {
        float x = ObjMove_GetX(obj_);
        float y = ObjMove_GetY(obj_);
        if (x < MIN_X || x > MAX_X) ObjMove_SetAngle(obj_, 180 - ObjMove_GetAngle(obj_));
        if (y < MIN_Y || y > MAX_Y) ObjMove_SetAngle(obj_, -ObjMove_GetAngle(obj_));
    }
}