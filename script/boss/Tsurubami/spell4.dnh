#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["spell4"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - 4;
int _count = -120;
int _loopTime = 660;
int _spellID = 7 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(60 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(300000);
    }
}

@Initialize {
    Boss_Init(true);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    Spell_SetCurrent(_spellID, true);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(1, 0);
    CallSFX(SND_TRANSITION);
    wait(90);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, 30, 70, 60, LERP_DECELERATE);
    Animation_Charge(false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, intersectionShot, intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFire();
            }
        }
        yield;
    }
}

task TFire() {
    if (!_bossAlive) return;

    CallSFX(SND_CHARGE1);
    wait(75);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, 180, 30, 8, COLOR_GRAY);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, -180, 30, 8, COLOR_GRAY);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, 180, 30, 8, COLOR_GRAY_L);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, -180, 30, 8, COLOR_GRAY_L);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, 180, 30, 8, COLOR_WHITE);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, -180, 30, 8, COLOR_WHITE);
    wait(30);

    if (!_bossAlive) return;

    int bigShot = CreateShotUA1(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 1.3, rand(-25, 25) + 90, SHOT_GRAY+BUBBLE, 0, SHOT_GRAY+CANCEL_64);
    ObjShot_SetSpellResist(bigShot, true);
    CallSFX(SND_BANG2);

    int[] shots = []; //initial shots
    int[] shots2 = []; //cage shots spawned off initial shots

    async {
        loop (360) {
            for each (shot in shots) {
                SnapToEdge(shot);
            }
            yield;
        }
    }

    while (ObjMove_GetY(bigShot) < MAX_Y - 64) {
        if (!_bossAlive) return;
        real x = ObjMove_GetX(bigShot);
        real y = ObjMove_GetY(bigShot);
        real angleT = rand(0, 360);
        int shot = CreateShotUA2(x + 32 * cos(angleT), y + 32 * sin(angleT), 1.3, angleT, 0.02, 4.5, SHOT_GRAY+COIN, 0, SHOT_GRAY+SPAWN_S+SIZE_16, SHOT_GRAY+CANCEL_FADE);
        ObjShot_SetSpellResist(shot, true);
        shots = shots ~ [shot];
        CallSFX(SND_SHOT1);
        wait(5);
    }

    wait(240);
    if (!_bossAlive) return;


    real pX = ObjMove_GetX(_objPlayer);
    real pY = ObjMove_GetY(_objPlayer);

    real randX;
    real randY;

    loop {
        real angleT = rand(0, 360);
        randX = pX + 135 * cos(angleT);
        randY = pY + 135 * sin(angleT);
        if (randX > MIN_X && randX < MAX_X && randY > 80 && randY < MAX_Y) break;
    }

    DeleteShotInCircle(TYPE_SHOT, TYPE_IMMEDIATE, randX, randY, 32);

    for each (shot in shots) Obj_Delete(shot);

    Primitive_ContractPolygon2D(randX, randY, 45, 135, 0, 180, 32, COLOR_GREEN_L, false, RP_STG_EFF_MID);
    loop (3) {
        if (!_bossAlive) return;
        Primitive_ContractPolygon2D(randX, randY, 45, 32, 0, 45, 32, COLOR_GREEN_L, true, RP_STG_EFF_MID);
        Primitive_ExpandPolygon2D(randX, randY, 45, 32, 550, 0, 40, 32, COLOR_RED, false, RP_STG_EFF_MID);
        Primitive_ExpandPolygon2D(randX, randY, 45, 32, 550, 0, 50, 32, COLOR_RED, false, RP_STG_EFF_MID);
        Primitive_ExpandPolygon2D(randX, randY, 45, 32, 550, 0, 60, 32, COLOR_RED, false, RP_STG_EFF_MID);
        CallSFX(SND_BANG1);
        wait(60);
    }
    if (!_bossAlive) return;

    CallSFX(SND_TRANSITION);

    for each (shot in shots2) {
        real x = ObjMove_GetX(shot);
        real y = ObjMove_GetY(shot);
        real angleT = dottheta(randX, randY, x, y);
        ObjMove_AddPatternA2(shot, 0, 0, angleT, 0.1, rand_int(-1, 1), 6);
    }

    function<void> SnapToEdge(int shot_) {
        real x = ObjMove_GetX(shot_);
        real y = ObjMove_GetY(shot_);
        if (x > MIN_X && x < MAX_X && y > MIN_Y && y < MAX_Y) return;
        ObjMove_AddPatternA1(shot_, 0, 0, NO_CHANGE);
        if (x < MIN_X) ObjMove_SetX(shot_, MIN_X + 1);
        if (x > MAX_X) ObjMove_SetX(shot_, MAX_X - 1);
        if (y < MIN_Y) ObjMove_SetY(shot_, MIN_Y + 1);
        if (y > MAX_Y) ObjMove_SetY(shot_, MAX_Y - 1);
        TCageShot(shot_);
    }

    task TCageShot(shot_) {
        if (!_bossAlive) return;
        real xPos = ObjMove_GetX(shot_);
        real yPos = ObjMove_GetY(shot_);
        real angleT = rand(0, 360);
        real radius = 0;
        int num = 3;
        loop (num) {
            Laser_WarningLine(xPos, yPos, angleT, 550, 80);
            angleT += 360 / num;
        }
        wait(45);
        for (int i = 1; i <= 13; i++) {
            radius = Interpolate_Linear(0, 550, i/13);
            loop (num) {
                if (!_bossAlive) return;
                int newShot = CreateShotUA1(xPos + radius * cos(angleT), yPos + radius * sin(angleT), 0.07, angleT, SHOT_YELLOW+COIN, 0, SHOT_YELLOW+SPAWN_S+SIZE_16, SHOT_YELLOW+CANCEL_SPARKLE);
                angleT += 360 / num;
                shots2 = shots2 ~ [newShot];
            }
            wait(4);
        }
    }
}