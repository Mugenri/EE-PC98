#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["spell4"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty - D_EASYEX;
int _count = -120;
int _loopTime = [620, 620, 560][_diff];
int _spellID = 10 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(50 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(300000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    Spell_SetCurrent(_spellID, true);
    TInitialize();
    TFinalize();
    TMain();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(1, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFire();
            }
        }
        yield;
    }
}

task TFire() {
    if (!_bossAlive) return;
    CallSFX(SND_CHARGE2);
    Animation_Charge(_objBoss, true);
    wait(15);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, 180, 30, 8, COLOR_GRAY);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, -180, 30, 8, COLOR_GRAY);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, 180, 30, 8, COLOR_GRAY_L);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, -180, 30, 8, COLOR_GRAY_L);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, 180, 30, 8, COLOR_WHITE);
    wait(3);
    Particle_ContractRing(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), 0, 150, -180, 30, 8, COLOR_WHITE);
    wait(30);
    Animation_Charge(_objBoss, false);

    if (!_bossAlive) return;

    real speed = [1.3, 1.3, 1.9][_diff];
    int bigShot = CreateShotUA1(ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss), speed, rand(-25, 25) + 90, SHOT_GRAY+BUBBLE, 0, SHOT_GRAY+CANCEL_64);
    ObjShot_SetSpellResist(bigShot, true);
    CallSFX(SND_SHOT4);

    int[] shots = []; //cage shots spawned off initial shots
    
    //get angle from big shot to selected point
    //spawn bullet, move to wall

    real perim = MAX_X * 2 + MAX_Y * 2; //perimeter of screen
    int minNum = [25, 25, 32][_diff];
    int maxNum = [30, 30, 38][_diff];
    int numPos = rand_int(minNum, maxNum); //possible points along perimeter to be selected
    real[][] locations = []; //x, y coords of shot locations

    for (real i = 1; i <= numPos; i++) { //generate locations along perimeter
        real xPos;
        real yPos;
        real angleT;
        real linePos = Interpolate_Linear(0, perim, i / numPos);
        if (linePos < MAX_X) { //top
            xPos = linePos;
            yPos = 0;
            angleT = 90;
        } else if (linePos < MAX_X + MAX_Y) { //right
            xPos = MAX_X;
            yPos = linePos - MAX_X;
            angleT = 180;
        } else if (linePos < MAX_X * 2 + MAX_Y) { //bottom
            xPos = linePos - (MAX_X + MAX_Y);
            yPos = MAX_Y;
            angleT = 270;
        } else { //left
            xPos = 0;
            yPos = linePos - (MAX_X * 2 + MAX_Y);
            angleT = 0;
        }
        locations = locations ~ [[xPos, yPos, angleT]];
    }

    //shuffle array
    for (int i = 0; i < length(locations); i++) {
        int j = rand(0, length(locations));
        int[] temp = locations[i];
        locations[i] = locations[j];
        locations[j] = temp;
    }

    int waitTime = [5, 5, 3][_diff];
    for (int i = 0; i < length(locations); i++) {
        if (!_bossAlive) return;
        real x = ObjMove_GetX(bigShot);
        real y = ObjMove_GetY(bigShot);
        real lX = locations[i][0];
        real lY = locations[i][1];
        real angleT = dottheta(x, y, lX, lY);
        int shot = CreateShotUA1(x + 32 * cos(angleT), y + 32 * sin(angleT), 0, angleT, SHOT_GRAY+COIN, 0, SHOT_GRAY+SPAWN_S+SIZE_16, SHOT_GRAY+CANCEL_FADE);
        ObjShot_SetSpellResist(shot, true);
        TCageShot(shot, lX, lY, locations[i][2]);
        CallSFX(SND_SHOT1);
        wait(waitTime);
    }

    wait(240);
    if (!_bossAlive) return;


    real pX = ObjMove_GetX(_objPlayer);
    real pY = ObjMove_GetY(_objPlayer);
    real randX;
    real randY;

    real radius = 150;
    loop { //get location of safe zone
        real angleT = rand(0, 360);
        randX = pX + radius * cos(angleT);
        randY = pY + radius * sin(angleT);
        if (randX > MIN_X && randX < MAX_X && randY > 80 && randY < MAX_Y) break;
    }

    radius = [32, 32, 24][_diff];
    DeleteShotInCircle(TYPE_SHOT, TYPE_IMMEDIATE, randX, randY, radius);

    //display safe zone
    Primitive_ContractPolygon2D(randX, randY, 45, 135, 0, 180, 32, COLOR_GREEN_L, false, RP_STG_EFF_MID);
    loop (3) {
        if (!_bossAlive) return;
        Primitive_ContractPolygon2D(randX, randY, 45, 32, 0, 45, 32, COLOR_GREEN_L, true, RP_STG_EFF_MID);
        Primitive_ExpandPolygon2D(randX, randY, 45, 32, 550, 0, 40, 32, COLOR_RED, false, RP_STG_EFF_MID);
        Primitive_ExpandPolygon2D(randX, randY, 45, 32, 550, 0, 50, 32, COLOR_RED, false, RP_STG_EFF_MID);
        Primitive_ExpandPolygon2D(randX, randY, 45, 32, 550, 0, 60, 32, COLOR_RED, false, RP_STG_EFF_MID);
        CallSFX(SND_BANG1);
        wait(60);
    }
    if (!_bossAlive) return;

    CallSFX(SND_TRANSITION);

    real accel = [0.1, 0.1, 0.5][_diff];
    for each (shot in shots) {
        real x = ObjMove_GetX(shot);
        real y = ObjMove_GetY(shot);
        real angleT = dottheta(randX, randY, x, y);
        ObjMove_AddPatternA2(shot, 0, 0, angleT, accel, rand_int(-1, 1), 6);
    }

    task TCageShot(shot_, real x_, real y_, real angleT_) {
        wait(20); //shot spawn animation
        int frames = [75, 75, 65][_diff];
        ObjMove_SetDestAtFrame(shot_, x_, y_, frames, LERP_LINEAR);
        wait(frames);
        if (!_bossAlive || Obj_IsDeleted(shot_)) return;
        ObjShot_SetDeleteFrame(shot_, 0);
        angleT_ += rand(-5, 5);
        Laser_WarningLine(x_, y_, angleT_, 550, 80);
        wait(45);
        int minShot = [16, 16, 19][_diff];
        int maxShot = [21, 21, 23][_diff];
        real numShots = rand_int(minShot, maxShot);
        int waitTime = [4, 4, 1][_diff];
        for (int i = 1; i <= numShots; i++) {
            if (!_bossAlive) return;
            real radius = Interpolate_Accelerate(0, 550, i / numShots);
            int newShot = CreateShotUA1(x_ + radius * cos(angleT_), y_ + radius * sin(angleT_), 0.12 * i / numShots, angleT_, SHOT_YELLOW+COIN, 0, SHOT_YELLOW+SPAWN_S+SIZE_16, SHOT_YELLOW+CANCEL_SPARKLE);
            shots = shots ~ [newShot];
            wait(waitTime);
        }
    }
}