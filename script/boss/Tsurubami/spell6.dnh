#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 6"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = 630;
_spellID = 33 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(4000);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(50 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TKillAura();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(1, 0);
    CallSFX(SND_TRANSITION);
    wait(120);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (_bossAlive) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, MID_Y, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TKillAura() {
    while (_count < -60) yield;
    int killAura = Primitive_CreatePolygon2D(0, 0, 0, 0, 32, COLOR_RED, false, RP_STG_EFF_LO);
    int killAura2 = Primitive_CreatePolygon2D(0, 0, 0, 0, 32, COLOR_RED, false, RP_STG_EFF_LO);
    int killAura3 = Primitive_CreatePolygon2D(0, 0, 0, 0, 32, COLOR_RED, true, RP_STG_EFF_LO);
    int radius = [145, 175, 270][_diff];
    int cooldown = 60;

    //spawn animation
    for (int i = 1; i <= 60; i++) {
        float x = ObjMove_GetX(_objBoss);
        float y = ObjMove_GetY(_objBoss);
        float angleT = 0;
        int tempRad = Interpolate_Decelerate(0, radius, i / 60);
        for (int j = 0; j < 33; j++) {
            ObjPrim_SetVertexPosition(killAura3, j, x + tempRad * cos(angleT), y + tempRad * sin(angleT), 1);
            angleT += 360 / 32;
        }
        yield;
    }

    //shrink animation
    async {
        for (int i = 1; i <= 60; i++) {
            float x = ObjMove_GetX(_objBoss);
            float y = ObjMove_GetY(_objBoss);
            float angleT = 0;
            int tempRad = Interpolate_Accelerate(radius, 0, i / 60);
            for (int j = 0; j < 33; j++) {
                ObjPrim_SetVertexPosition(killAura3, j, x + tempRad * cos(angleT), y + tempRad * sin(angleT), 1);
                angleT += 360 / 32;
            }
            yield;
        }
        Obj_Delete(killAura3);
    }

    async { //aura 2 loop
        while (_bossAlive) {
            for (int i = 1; i <= 60; i++) {
                float x = ObjMove_GetX(_objBoss);
                float y = ObjMove_GetY(_objBoss);
                float angleT = 0;
                int tempRad = Interpolate_Decelerate(0, radius, i / 60);
                for (int j = 0; j < 33; j++) {
                    ObjPrim_SetVertexPosition(killAura2, j, x + tempRad * cos(angleT), y + tempRad * sin(angleT), 1);
                    angleT += 360 / 32;
                }
                yield;
            }
        }
    }

    while (_bossAlive) {
        float x = ObjMove_GetX(_objBoss);
        float y = ObjMove_GetY(_objBoss);
        float pX = ObjMove_GetX(_objPlayer);
        float pY = ObjMove_GetY(_objPlayer);
        float angleT = 0;
        //set position, check for player
        for (int i = 0; i < 33; i++) {
            ObjPrim_SetVertexPosition(killAura, i, x + radius * cos(angleT), y + radius * sin(angleT), 1);
            angleT += 360 / 32;
        }
        if (cooldown > 0) {
            cooldown--;
        }
        if (distance(x, y, pX, pY) < radius && cooldown == 0) {
            float tempAngle = rand(-70, 70);
            for (int i = 0; i < 16; i++) {
                int shotH = CreateShotUA1(ObjMove_GetX(_objPlayer), ObjMove_GetY(_objPlayer), i * 1, tempAngle, SHOT_GRAY+PILL_S, 0, SHOT_GRAY+CANCEL_BURST1);
                int shotV = CreateShotUA1(ObjMove_GetX(_objPlayer), ObjMove_GetY(_objPlayer), i * 0.4, tempAngle + 90, SHOT_GRAY+PILL_S, 0, SHOT_GRAY+CANCEL_BURST1);
                ObjShot_SetGrazeFrame(shotH, 2); //don't graze this
                ObjShot_SetGrazeFrame(shotV, 2);
                ObjShot_SetDeleteFrame(shotH, 1);
                ObjShot_SetDeleteFrame(shotV, 1);
                tempAngle += 180;
            }
            CallSFX(SND_SHOT4);
            cooldown = 30;
        }
        yield;
    }
    Obj_Delete(killAura);
    Obj_Delete(killAura2);
}

task TMain() {
    while (_count < -30) yield;
    while (_bossAlive) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 0) {
            async {
                TFire(1);
                wait(315);
                TFire(-1);
            }
        }
        yield;
    }
}

task TFire(int dir_) {
    if (!_bossAlive) return;

    //move to position
    float xDest = MID_X - 160 * dir_;
    float yDest = MID_Y - 150;
    wait(60);
    if (!_bossAlive) return;
    ObjMove_SetDestAtFrame(_objBoss, xDest, yDest, 90, LERP_SMOOTHER);

    //spawn laser
    float angleLaser = 90 - 90 * dir_;
    int mSpark = CreateMasterSpark(0, 0, angleLaser, 550, 140, 160, COLOR_GRAY, COLOR_GRAY_L, 100);
    CallSFX(SND_CHARGE1);

    loop (100) {
        if (!_bossAlive) return;
        ObjMove_SetPosition(mSpark, ObjMove_GetX(_objBoss), ObjMove_GetY(_objBoss));
        yield;
    }

    if (!_bossAlive) return;
    CallSFX(SND_MASTERSPARK);
    Animation_Charge(_objBoss, true);

    wait(20);
    if (!_bossAlive) return;

    int loopNum = [1, 2, 3][_diff];
    float maxYSpeed = [2.6, 3.0, 2.5][_diff];
    async { //bullets at edge of screen
        int color = 0;
        while (_bossAlive && !Obj_IsDeleted(mSpark)) {
            int tempColor = [SHOT_GRAY, SHOT_WHITE, SHOT_BLUE][color % 3];
            float angleT = ObjStLaser_GetAngle(mSpark) + rand(-7, 7);
            float xPos = xDest + 525 * cos(angleT);
            float yPos = yDest + 525 * sin(angleT);
            xPos = clamp(xPos, MIN_X, MAX_X);
            yPos = clamp(yPos, MIN_Y, MAX_Y);
            loop (loopNum) {
                CreateShotUB2(xPos, yPos, rand(-2.2, 2.2), Interpolate_Linear(-0.6, -3.7, yPos / MAX_Y) + rand(-0.3, 0.3), 0, 0.03, 0, maxYSpeed, tempColor+CRYSTAL_S, 0, tempColor+SPAWN_S+SIZE_16, tempColor+CANCEL_SPARKLE);
            }
            color++;
            CallSFX(SND_SHOT1);
            yield;
        }
    }

    async { //laser movement
        float min = 90 - 90 * dir_;
        float max = 90 - 20 * dir_;
        for (int i = 1; i <= 160; i++) {
            if (!_bossAlive || Obj_IsDeleted(mSpark)) return;
            ObjStLaser_SetAngle(mSpark, Interpolate_Accelerate(min, max, i / 160));
            yield;
        }
    }

    wait(160);
    if (!_bossAlive) return;
    Obj_Delete(mSpark);
    wait(15);
    if (!_bossAlive) return;
    Animation_Charge(_objBoss, false);
}