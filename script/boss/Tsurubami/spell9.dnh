#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["Spell 9"]
#System["./../../system/System.dnh"]

#include "./../../lib/lib_Boss.dnh"

int _objBoss;
int _diff = GetDifficulty() - D_EASYEX;
int _count = -120;
int _loopTime = [90, 85, 70][_diff];
_spellID = 48 + _diff;

@Event {
    alternative (GetEventType())
    case (EV_REQUEST_LIFE) {
        SetScriptResult(3500);
    }
    case (EV_REQUEST_TIMER) {
        SetScriptResult(45 + absolute(_count / 60));
    }
    case (EV_REQUEST_SPELL_SCORE) {
        SetScriptResult(1000000);
    }
}

@Initialize {
    Boss_Init(false);
    _objBoss = Boss_Create(BOSS_ID_TSURUBAMI);
    ObjEnemyBossScene_StartSpell(_objScene);
    TInitialize();
    TFinalize();
    TMain();
    TSpokes();
}

@MainLoop {
    Boss_Update(_objBoss);
    _count++;
    yield;
}

task TInitialize() {
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 30, LERP_DECELERATE);
    wait(30);
    Transition_Circle(9, 0);
    CallSFX(SND_TRANSITION);
    wait(210);
    Boss_SetVulnerable(_objBoss, true);
}

task TFinalize() {
    while (Boss_Alive(_objBoss)) yield;
    ObjMove_SetDestAtFrame(_objBoss, MID_X, 60, 60, LERP_DECELERATE);
    Animation_Charge(_objBoss, false);
    Boss_Finalize(_objBoss);
    Transition_ChangeBG(0, 0);
}

task TMain() {
    while (_count < -30) yield;
    while (Boss_Alive(_objBoss)) {
        Boss_SetIntersection(_objBoss, _intersectionShot, _intersectionPlayer);
        if (_count % _loopTime == 0 && _count >= 210) {
            async {
                TFire(1);
                wait(_loopTime / 2);
                TFire(-1);
            }
        }
        yield;
    }
}

task TSpokes() {
    while (_count < 0) yield;

    Animation_Charge(_objBoss, true);

    CallSFX(SND_CHARGE1);

    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 160, 0, 30, 32, COLOR_ORANGE_D, false, RP_STG_EFF_MID);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 160, 90, 30, 8, COLOR_ORANGE);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 160, 0, 30, 32, COLOR_ORANGE_D, false, RP_STG_EFF_MID);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), -15, 160, -90, 30, 8, COLOR_ORANGE);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 160, 0, 30, 32, COLOR_ORANGE_D, false, RP_STG_EFF_MID);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 160, 90, 30, 8, COLOR_ORANGE);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 160, 0, 30, 32, COLOR_ORANGE_D, false, RP_STG_EFF_MID);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), -15, 160, -90, 30, 8, COLOR_ORANGE);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 160, 0, 30, 32, COLOR_ORANGE_D, false, RP_STG_EFF_MID);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 160, 90, 30, 8, COLOR_ORANGE);
    wait(3);
    Primitive_ContractPolygon2D(Boss_X(_objBoss), Boss_Y(_objBoss), 45, 160, 0, 30, 32, COLOR_ORANGE_D, false, RP_STG_EFF_MID);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), -15, 160, -90, 30, 8, COLOR_ORANGE);
    wait(30);

    //origin position
    float xOrg = MID_X;
    float yOrg = 60;

    int spokes = 3;
    int ringNum = [18, 20, 20][_diff]; //number of bullet rings
    float baseAngle = 60;
    float minRad = 16;
    float maxRad = 400;
    float accel = 0.007;

    for (int i = 1; i <= ringNum; i++) {
        float rad = Interpolate_Linear(minRad, maxRad, i / as_float(ringNum));
        TCreateRing(rad, [-1, 1][i % 2]);
        wait(3);
    }

    Animation_Charge(_objBoss, false);

    task TCreateRing(float radius_, int dir_) {
        //create
        int[] shots = [];
        float angleT = baseAngle;
        loop (spokes) {
            int shot = CreateShotUA1(xOrg, yOrg, 0, angleT, SHOT_ORANGE+RING_L, 0, SHOT_ORANGE+CANCEL_BURST1);
            ObjMove_AddPatternD2(shot, 1, xOrg + radius_ * cos(angleT), yOrg + radius_ * sin(angleT), 30, LERP_ACCELERATE);
            ObjShot_SetSpellResist(shot, true);
            ObjShot_SetAutoDelete(shot, false);
            ObjShot_SetGrazeInvalidFrame(shot, 320);
            shots ~= [shot];
            angleT += 360 / spokes;
        }
        CallSFX(SND_SHOT1);

        wait(90);

        angleT = baseAngle;
        float baseSpeed = [0.35 , 0.4, 0.5][_diff];
        float speedCap = [0.4, 0.4, 1.5][_diff];
        float increment = 0;
        while (Boss_Alive(_objBoss)) {
            float maxSpeed = baseSpeed + Interpolate_Linear(speedCap, 0.0, ObjEnemy_GetInfo(_objBoss, INFO_LIFE) / 3500);
            float temp = angleT;
            for (int i = 0; i < length(shots); i++) {
                ObjMove_SetPosition(shots[i], xOrg + radius_ * cos(temp), yOrg + radius_ * sin(temp));
                ObjMove_SetAngle(shots[i], temp + (90 * dir_));
                temp += 360 / spokes;
            }
            angleT += increment;
            increment += (accel * dir_);
            increment = clamp(increment, -maxSpeed, maxSpeed);
            yield;
        }
    }
}

task TFire(int dir_) {
    //ring of bullets at a skew
    if (!Boss_Alive(_objBoss)) return;
    int way = [20, 24, 36][_diff];
    int stack = [3, 4, 5][_diff];
    int waitTime = [5, 5, 3][_diff];

    float speed = [1.0, 1.2, 2.4][_diff];
    float accel = [0.06, 0.07, 0.08][_diff];
    float maxSpeed = [2.8, 3, 3.8][_diff];
    float angleT = rand(0, 360);

    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 100, 90 * dir_, 30, 8, COLOR_YELLOW);
    wait(3);
    Particle_ContractRing(Boss_X(_objBoss), Boss_Y(_objBoss), 15, 100, 90 * dir_, 30, 8, COLOR_YELLOW_D);
    wait(30);

    for (int i = 0; i < stack; i++) {
        for (int j = 0; j < way; j++) {
            if (!Boss_Alive(_objBoss)) return;
            CreateShotUA2(Boss_X(_objBoss) + 32 * cos(angleT), Boss_Y(_objBoss) + 64 * sin(angleT), speed, angleT + (160 * dir_), accel, maxSpeed, 0.12 * dir_, SHOT_YELLOW_INV+STAR_S, 0, SHOT_YELLOW_INV+SPAWN_S+SIZE_8, SHOT_YELLOW_INV+CANCEL_BURST1);
            angleT += 360 / way;
        }
        CallSFX(SND_SHOT1);
        wait(waitTime);
    }
}