// Music Manager
#include "./lib/BGMData.dnh"
#include "./lib/lib_TitleCommon.dnh"

//BGM globals
int _objBGM = -1; //used to hold the current playing BGM ID. this is not the actual sound object
int _currentBGM = -1; //used to check current playing track in TMain
bool _flagStop = false; //used to pause/restart bgm, changed by EV_STOP_BGM

//SFX globals
int _objSFX = ObjSound_Create();
const string[] SOUNDS = [
    DIR_SE ~ "seBang1.wav",         //0
    DIR_SE ~ "seBang2.wav",
    DIR_SE ~ "seCharge1.wav",
    DIR_SE ~ "seCharge2.wav",
    DIR_SE ~ "seExplosion1.wav",
    DIR_SE ~ "seExplosion2.wav",
    DIR_SE ~ "seGaugeFull.wav",
    DIR_SE ~ "seInvincible.wav",
    DIR_SE ~ "seItem.wav",
    DIR_SE ~ "seLaser1.wav",
    DIR_SE ~ "seLaser2.wav",        //10
    DIR_SE ~ "seMasterSpark.wav",
    DIR_SE ~ "seMenuCancel.wav",
    DIR_SE ~ "seMenuDecide.wav",
    DIR_SE ~ "seMenuSelect.wav",
    DIR_SE ~ "sePlayerGraze.wav",
    DIR_SE ~ "sePlayerHit.wav",
    DIR_SE ~ "sePlayerMiss.wav",
    DIR_SE ~ "sePlayerShot.wav",
    DIR_SE ~ "sePlayerVulnerable.wav",
    DIR_SE ~ "sePlayerSpell.wav",   //20
    DIR_SE ~ "seShot1.wav",
    DIR_SE ~ "seShot2.wav",
    DIR_SE ~ "seShot3.wav",
    DIR_SE ~ "seShot4.wav",
    DIR_SE ~ "seTransition.wav",
    DIR_SE ~ "seDamage.wav",
    DIR_SE ~ "seDamageLow.wav",
    DIR_SE ~ "seExtend.wav",
    DIR_SE ~ "seTimer.wav",
    DIR_SE ~ "seTalk.wav",          //30
    DIR_SE ~ "seBossTitle.wav"
];

@Initialize {
    SetAreaCommonData(AREA_TITLE, "SCRIPT_AUDIO", GetOwnScriptID());
    SetAreaCommonData(AREA_TITLE, "SFX_NUM", length(SOUNDS) - 1);
    SetAutoDeleteObject(true);
    InitAudio();
    TMain();
}

@Event {
    alternative (GetEventType())
    //BGM events
    case (EV_PLAY_BGM) { //Set common data for TMain to use
        _currentBGM = GetEventArgument(0);
        SetAreaCommonData(AREA_TITLE, "BGM_ID", _currentBGM); //track ID in BGMData.dnh
        SetAreaCommonData(AREA_TITLE, "BGM_Fade", GetEventArgument(1)); //fade out time in frames
        SetAreaCommonData(AREA_TITLE, "BGM_Delay", GetEventArgument(2)); //delay track start time in frames
    }
    case (EV_STOP_BGM) { //true to pause BGM, false to resume current BGM
        _flagStop = GetEventArgument(0);
    }
    case (EV_GET_BGM_NAME) {
        string[] info = BGM_GetText(GetEventArgument(0));
        SetScriptResult(info[0]);
    }
    //SFX events
    case (EV_PLAY_SFX) {
		int seID = GetEventArgument(0);
        ObjSound_Load(_objSFX, SOUNDS[seID]);
        ObjSound_SetVolumeRate(_objSFX, GetSFXVolume());
        ObjSound_Play(_objSFX);
	}
    case (EV_STOP_SFX) {
        ObjSound_Stop(_objSFX);
    }
}

@MainLoop { yield; }

@Finalize {}

task TMain {
    int BGMID = -1;

    loop {
        if (BGMID != _currentBGM) {
            BGMID = _currentBGM;
            int fade = GetAreaCommonData(AREA_TITLE, "BGM_Fade", -1);
            int delay = GetAreaCommonData(AREA_TITLE, "BGM_Delay", -1);
            TChangeBGM(BGMID, fade, delay);
        }
        yield;
    }
}

task TChangeBGM(int trackID_, int fade_, int delay_) {
    //fade out/end current playing track
    if (!Obj_IsDeleted(_objBGM)) {
        TClearBGM(_objBGM); //called before _objBGM is assigned a new ID, starts track fadeout
    }
    //Play new bgm, set heard flag for music room unlock
    if (trackID_ >= 0) {
        _flagStop = false;
        TPlayBGM(trackID_, fade_, delay_);
        CD_SetBGMHeard(trackID_);
    }
}

//BGM_End value tied to specific track object in TPlayBGM
task TClearBGM(int obj_) {
    Obj_SetValue(obj_, "BGM_End", true);
}

task TPlayBGM(int trackID_, int fade_, int delay_) {
    int ID = ObjSound_Create();
    string path = BGM_GetPath(trackID_);
    int[] sample = BGM_GetSample(trackID_);

    ObjSound_Load(ID, path);
    ObjSound_SetSoundDivision(ID, SOUND_BGM);
    ObjSound_SetLoopEnable(ID, true);
    ObjSound_SetResumeEnable(ID, true);
    ObjSound_SetLoopSampleCount(ID, sample[0], sample[1]);

    _objBGM = ID; //both point to same value. different when a new track is played. ID is used to control fade out while _objBGM prepares a new track to be played

    wait(delay_);

    ObjSound_Play(ID);

    bool stop = false;

    while (!Obj_IsDeleted(ID) && !Obj_GetValueD(ID, "BGM_End", false)) {

        ObjSound_SetVolumeRate(ID, GetBGMVolume());
        if (stop != _flagStop) {
            if (_flagStop) ObjSound_Stop(ID);
            else ObjSound_Play(ID);
            stop = _flagStop;
        }
        yield;
    }
    //fade out
    if (fade_ > 0 && !stop) { //only fade if track ended while actually playing, else skip
        float volTimer = 0;
        while (volTimer < fade_) { //fade time is in frames
            float volume = GetBGMVolume();
            float volDecay = volTimer / fade_; //reduce volume linearly

            ObjSound_SetVolumeRate(ID, volume - volDecay * volume);

            volTimer += 1; //1 frame
            yield;
        }
    }
    Obj_Delete(ID);
}

function<void> InitAudio() { //preload all audio files to prevent weird stuttering upon first play
    //BGM
    int tempID = 0;
    string tempPath = "";
    loop {
        tempPath = BGM_GetPath(tempID);
        if (tempPath == "") break;
        LoadSound(tempPath);
        tempID++;
    }
    //SFX
    ObjSound_SetSoundDivision(_objSFX, SOUND_SE);
    for each (sound in SOUNDS) {
        LoadSound(sound);
    }
}