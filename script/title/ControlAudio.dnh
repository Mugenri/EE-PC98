// Music Manager
#include "./lib/BGMData.dnh"
#include "./lib/lib_TitleCommon.dnh"

//BGM Globals
const int BGM_END = 0; //Key value for bgm stop
const int BGM_FADE = 1; //Key value for bgm fade
int _objBGM = -1; //reference to currently playing sound object
int _currentBGM = -1; //currently playing track ID
int _fadeBGM; //fadeout time in frames
int _delayBGM; //track delay time in frames
bool _flagStop = false; //used to pause/restart bgm
bool _newTrack = false; //new track has started, cutoff old

//SFX Globals
int _objSFX;
const string[] SOUNDS = [
    DIR_SE ~ "seBang1.wav",         //0
    DIR_SE ~ "seBang2.wav",
    DIR_SE ~ "seCharge1.wav",
    DIR_SE ~ "seCharge2.wav",
    DIR_SE ~ "seExplosion1.wav",
    DIR_SE ~ "seExplosion2.wav",
    DIR_SE ~ "seGaugeFull.wav",
    DIR_SE ~ "seInvincible.wav",
    DIR_SE ~ "seItem.wav",
    DIR_SE ~ "seLaser1.wav",
    DIR_SE ~ "seLaser2.wav",        //10
    DIR_SE ~ "seMasterSpark.wav",
    DIR_SE ~ "seMenuCancel.wav",
    DIR_SE ~ "seMenuDecide.wav",
    DIR_SE ~ "seMenuSelect.wav",
    DIR_SE ~ "sePlayerGraze.wav",
    DIR_SE ~ "sePlayerHit.wav",
    DIR_SE ~ "sePlayerMiss.wav",
    DIR_SE ~ "sePlayerShot.wav",
    DIR_SE ~ "sePlayerVulnerable.wav",
    DIR_SE ~ "sePlayerSpell.wav",   //20
    DIR_SE ~ "seShot1.wav",
    DIR_SE ~ "seShot2.wav",
    DIR_SE ~ "seShot3.wav",
    DIR_SE ~ "seShot4.wav",
    DIR_SE ~ "seTransition.wav",
    DIR_SE ~ "seDamage.wav",
    DIR_SE ~ "seDamageLow.wav",
    DIR_SE ~ "seExtend.wav",
    DIR_SE ~ "seTimer.wav",
    DIR_SE ~ "seTalk.wav",          //30
    DIR_SE ~ "seBossTitle.wav",
    DIR_SE ~ "seFire.wav",
    DIR_SE ~ "seSpellYabu1.wav",
    DIR_SE ~ "seSpellYabu2.wav",
    DIR_SE ~ "seSpellTsuba1.wav",
    DIR_SE ~ "seSpellTsuba2.wav",
    DIR_SE ~ "sePressB.wav"
];

@Initialize {
    SetAreaCommonData(AREA_TITLE, "SCRIPT_AUDIO", GetOwnScriptID());
    SetAreaCommonData(AREA_TITLE, "SFX_NUM", length(SOUNDS) - 1);
    SetAutoDeleteObject(true);
    InitAudio();
    TMain();
}

@Event {
    alternative (GetEventType())
    //BGM events
    case (EV_PLAY_BGM) {
        _currentBGM = GetEventArgument(0);
        SetAreaCommonData(AREA_TITLE, "BGM_ID", _currentBGM);
        _fadeBGM = GetEventArgument(1);
        _delayBGM = GetEventArgument(2);
    }
    case (EV_STOP_BGM) { //true to pause BGM, false to resume current BGM
        _flagStop = GetEventArgument(0);
    }
    case (EV_SET_FADE_BGM) { //change fadeout time for currently playing track
        Obj_SetValueI(_objBGM, BGM_FADE, GetEventArgument(0));
    }
    case (EV_GET_BGM_NAME) {
        SetScriptResult(BGM_GetText(GetEventArgument(0))[0]);
    }
    //SFX events
    case (EV_PLAY_SFX) {
		int seID = GetEventArgument(0);
        ObjSound_Load(_objSFX, SOUNDS[seID]);
        ObjSound_SetVolumeRate(_objSFX, GetSFXVolume());
        ObjSound_Play(_objSFX);
	}
    case (EV_STOP_SFX) {
        ObjSound_Stop(_objSFX);
    }
}

@MainLoop { yield; }

@Finalize {}

task TMain {
    int BGMID = -1;

    loop {
        if (BGMID != _currentBGM) {
            BGMID = _currentBGM;
            ChangeBGM(_currentBGM);
        }
        yield;
    }
}

function<void> ChangeBGM(int trackID_) {
    //fade out/end current playing track
    if (!Obj_IsDeleted(_objBGM)) EndBGM(_objBGM);
    //Play new bgm, set heard flag for music room unlock
    if (trackID_ >= 0) {
        _flagStop = false;
        TPlayBGM(trackID_);
        CD_SetBGMHeard(trackID_);
    }
}

//BGM_End value tied to specific track object in TPlayBGM
function<void> EndBGM(int obj_) {
    Obj_SetValueI(obj_, BGM_END, true);
}

task TPlayBGM(int trackID_) {
    int ID = ObjSound_Create();
    string path = BGM_GetPath(trackID_);
    int[] sample = BGM_GetSample(trackID_);

    ObjSound_Load(ID, path);
    ObjSound_SetSoundDivision(ID, SOUND_BGM);
    ObjSound_SetVolumeRate(ID, GetBGMVolume());
    ObjSound_SetLoopEnable(ID, true);
    ObjSound_SetResumeEnable(ID, true);
    ObjSound_SetLoopSampleCount(ID, sample[0], sample[1]);

    _objBGM = ID; //set reference
    Obj_SetValueI(ID, BGM_FADE, _fadeBGM);

    wait(_delayBGM);
    _newTrack = true;

    ObjSound_Play(ID); 
    int fade = 0;
    bool stop = false;
    while (!Obj_GetValueDI(ID, BGM_END, false)) {
        fade = Obj_GetValueDI(ID, BGM_FADE, 0);
        ObjSound_SetVolumeRate(ID, GetBGMVolume());
        if (stop != _flagStop) { //pause/resume toggle
            stop = _flagStop;
            if (_flagStop) ObjSound_Stop(ID);
            else ObjSound_Play(ID);
        }
        yield;
    }
    //fade
    _newTrack = false;
    if (fade > 0 && !stop) { //if unpaused
        int volTimer = 0;
        float volume = GetBGMVolume();
        while (volTimer < fade && !_newTrack) { //if track changes during fade, break
            ObjSound_SetVolumeRate(ID, Interpolate_Linear(volume, 0, volTimer / as_float(fade)));
            volTimer++;
            yield;
        }
    }
    Obj_Delete(ID);
}

function<void> InitAudio() { //Preload audio files
    //BGM
    int ID = 0;
    string path = "";
    loop {
        path = BGM_GetPath(ID);
        if (path == "") break;
        LoadSound(path);
        ID++;
    }
    //SFX
    _objSFX = ObjSound_Create();
    ObjSound_SetSoundDivision(_objSFX, SOUND_SE);
    for each (sound in SOUNDS) {
        LoadSound(sound);
    }
}