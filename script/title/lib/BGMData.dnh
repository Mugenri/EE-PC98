//Music Data library

//Returns loop times for the specified track
function<int[]> GetBGMSample(int bgmID_) {
    alternative (bgmID_)
    case (0) return[0, 4871328]; //Title Track
    case (1) return [352969, 7842912]; //Eternal Dance Engine
    case (2) return [0, 10598280]; //Broken Eternal Dance Engine
    others return [0,0];
}

//Returns path to specified track
function<string> GetBGMPath(int bgmID_) {
    string musicDir = GetCurrentScriptDirectory() ~ "./../../bgm/";
    alternative (bgmID_)
    case (0) return (musicDir ~ "title.ogg"); //To the Village that isn't Real ~ Chain Link?
    case (1) return (musicDir ~ "tsurubami1.ogg"); //Eternal Dance Engine
    case (2) return (musicDir ~ "tsurubami2.ogg"); //Broken Eternal Dance Engine
    others return ("");
}

//Returns text information for the specified track (for music menu)
function<string[]> GetBGMText(int bgmID_) {
    //returns array of name, comment
    string name = "";
    string comment = "";
    alternative (bgmID_)
    case (-1) { //music room default text
        name = "...";
        comment = "Select a track...";
    }
    case (0) { //title
        name = "To the Village that isn't Real ~ Chain Link?";
        comment = "Test description";
    }
    case (1) { //boss 1
        name = "Eternal Dance Engine ~ Shall We Dance!!";
        comment = "testy 2";
    }
    case (2) { //boss 2
        name = "Broken Eternal Dance Engine";
        comment = "test descrippy 3 my guy";
    }
    others{
        name = "Track number " ~ IntToString(bgmID_ + 1);
        comment = "Description number " ~ IntToString(bgmID_ + 1);
    }
    return [name, comment];
}