//Difficulty Selection Screen
function<int> SceneRankSelect(int selectedDefault_) {
    bool exitFlag = false; //Delete certain things upon leaving this menu
    int playMode = GetAreaCommonData(AREA_TITLE, "GameMode", GAME_NONE);

    bool extraMode = (selectedDefault_ == D_EXTRA || selectedDefault_ == D_ABEX);
    int[] imgValue = [0, 1, 2, 3];

    //Extra Stage menu
    if (extraMode) {
        selectedDefault_ = 0;
        imgValue = [4, 5];
    }

    int selectMax = length(imgValue) - 1;
    int resultIndex = -1; //value returned from this menu

    int indexCurrent = selectedDefault_;

    int[] forbidIndex = [];

    TCreateMenuGraphicsRank();

    //Create Menu Items
    int menuX = GetScreenWidth() / 2 - 112;
    int menuY = GetScreenHeight() / 2 - (25 * selectMax) - 9;
    ascent (i in 0..selectMax + 1) {
        TCreateMenuItemRank(i, menuX, menuY, imgValue[i]);
        menuY += 50;
    }

    wait(15); //wait for screen fade from previous menu to clear
    WaitKeysFree([VK_UP, VK_DOWN, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop {
        int userKey = CheckKeyPressed([VK_UP, VK_DOWN, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_DOWN) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_OK) {
            resultIndex = indexCurrent;
            MenuSelect();
            break;
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            ScreenBlackout(10, 5, 10, COLOR_BLACK);
            wait(10);
            break;
        }
    }
    exitFlag = true;
    if (resultIndex == 0 && extraMode) resultIndex = D_EXTRA;
    if (resultIndex == 1 && extraMode) resultIndex = D_ABEX;
    SetAreaCommonData(AREA_TITLE, "Difficulty", resultIndex);
    return(resultIndex);

    function<void> MenuSelect() {
        CallSFX(SND_TT_DECIDE);
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
    }

    task TCreateMenuGraphicsRank() {
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, RP_UI_BG);
        ObjRender_SetColor(bg, COLOR_BLACK);
        int circleOut = InitSprite2D(303, 0, 630, 327, IMG_TT_RANKBG, RP_UI_BG);
        ObjRender_SetPosition(circleOut, 157, 36, 1);
        int circleIn = InitSprite2D(0, 0, 303, 303, IMG_TT_RANKBG, RP_UI_IMG);
        ObjRender_SetPosition(circleIn, 169, 48, 1);

        real radius = 150; //radius of circle
        TCircles();
        while (!exitFlag) {
            real angleT = rand(0, 360);
            MoveParticle(WINDOW_WIDTH_MID + radius * cos(angleT), WINDOW_HEIGHT_MID + radius * sin(angleT), angleT);
            MoveParticle(WINDOW_WIDTH_MID + radius * cos(angleT + 180), WINDOW_HEIGHT_MID + radius * sin(angleT + 180), angleT + 180);
            yield;
        }
        Obj_Delete(bg);
        Obj_Delete(circleIn);
        Obj_Delete(circleOut);

        task TCircles() {
            int primCircle = InitPrim2D(PRIMITIVE_LINESTRIP, 33, RP_UI_IMG);
            int vertices = ObjPrim_GetVertexCount(primCircle);

            real tempRadius = radius;
            int[] color = [COLOR_WHITE, COLOR_GRAY_L, COLOR_GRAY, COLOR_GRAY_D];
            int frame = 0;
            real frames = 120; //to avoid int division
            while (!exitFlag) {
                real angleT = 0;
                tempRadius = Interpolate_Decelerate(radius, 0, frame / frames);
                for (int i = 0; i < ObjPrim_GetVertexCount(primCircle); i++) {
                    ObjPrim_SetVertexPosition(primCircle, i, WINDOW_WIDTH_MID + tempRadius * cos(angleT), WINDOW_HEIGHT_MID + tempRadius * sin(angleT), 1);
                    ObjPrim_SetVertexColor(primCircle, i, color[frame * 4 ~/ frames]);
                    angleT += 360 / (vertices - 1);
                }
                frame++;
                if (frame >= frames) frame = 0;
                yield;
            }
            Obj_Delete(primCircle);
        }

        task MoveParticle(real x_, real y_, real angle_) {
            int[] color = [COLOR_WHITE, COLOR_GRAY_L, COLOR_GRAY, COLOR_GRAY_D];
            real maxSpeed = rand(2, 3.4);
            real speed = maxSpeed;
            int frame = 0;
            int frameRate = 20;
            while (!exitFlag) {
                //add particle
                ObjParticleList_SetPosition(_titleList, x_, y_, 1);
                ObjParticleList_SetExtraData(_titleList, trunc(3 - (frame / frameRate)), 0, 0);
                ObjParticleList_SetColor(_titleList, color[frame / frameRate]);
                ObjParticleList_AddInstance(_titleList);
                //update position variables
                x_ += speed * cos(angle_);
                y_ += speed * sin(angle_);
                speed = Interpolate_Decelerate(maxSpeed, 0, frame / (frameRate * 4.0));
                frame++;
                if (frame >= frameRate * 4) break;
                else yield;
            }
        }
    }

    task TCreateMenuItemRank(int index_, int x_, int y_, int imgIndex_) {
        int objText = InitSprite2D(0, 400 + imgIndex_ * 18, 225, 400 + (imgIndex_ + 1) * 18, IMG_TT_RANKBG, RP_UI_IMG);
        ObjRender_SetPosition(objText, x_, y_, 1);

        while (!exitFlag) {
            int modif = index_ == indexCurrent ? 0 : 225;
            ObjSprite2D_SetSourceRect(objText, 0 + modif, 400 + imgIndex_ * 18, 225 + modif + 1, 400 + (imgIndex_ + 1) * 18); //WHY DOES THIS NEED + 1 WHAT THE FUCK
            yield;
        }
        Obj_Delete(objText);
    }
}