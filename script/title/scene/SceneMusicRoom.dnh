//Music Room
#include "../lib/BGMData.dnh"

function<void> SceneMusicRoom() {
    bool exitFlag = false;

    int selectMax = 19; //number of tracks - 1 (starts from index 0)
    int indexListSize = 7; //number of tracks on screen at once - 1 (starts from index 0)
    int indexListTop = 0; //index at the top of the track list, used for scrolling the list

    int indexCurrent = 0;

    bool revealPrompt = false; //has the player attempted to play an undiscovered track?
    int revealIndex = -1; //used to reveal unknown tracks on prompt

    TCreateMenuGraphicsMusic();
    //default texts
    int playingText = CreateText(32, 268, GetBGMText(-1)[0], COLOR_WHITE); //currently playing track
    int descriptionText = CreateText(32, 288, GetBGMText(-1)[1], COLOR_WHITE); //track comments

    //Create Menu Items
    {
        int menuX = 32;
        int menuY = 64;
        ascent (i in 0..indexListSize + 1) {
            TCreateMenuItemMusic(i, menuX, menuY);
            menuY+= 16;
        }
    }
    ClearBGM(); //fade out title music
    wait(15); //wait for screen fade from previous menu to clear
    WaitKeysFree([VK_UP, VK_DOWN, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop {
        int userKey = CheckKeyPressed([VK_UP, VK_DOWN, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP) {
            //CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax);
            if (revealPrompt == true) {
                CancelReveal();
            }
        }
        case (VK_DOWN) {
            //CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax);
            if (revealPrompt == true) {
                CancelReveal();
            }
        }
        case (VK_OK) {
            MenuSelect();
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            ScreenBlackout(10, 5, 10, COLOR_BLACK);
            ClearBGM();
            wait(10);
            break;
        }
        //check if cursor has scrolled outside music list
        if (indexCurrent > indexListTop + indexListSize) indexListTop = indexCurrent - indexListSize;
        else if (indexCurrent < indexListTop) indexListTop = indexCurrent;
    }
    exitFlag = true;
    Obj_Delete(descriptionText);
    Obj_Delete(playingText);

    function<void> MenuSelect() {
        //play music track if heard previously, change description text
        if (!CD_GetBGMHeardFlag(indexCurrent)) { //prompt player on selecting undiscovered music
            if (revealPrompt) {
                revealIndex = indexCurrent;
                revealPrompt = false;
            } else {
                ObjText_SetVertexColor(playingText, 0xFF000000 + COLOR_RED);
                ObjText_SetVertexColor(descriptionText, 0xFF000000 + COLOR_RED);
                ObjText_SetText(playingText, "???");
                ObjText_SetText(descriptionText, "are you sure?");
                revealPrompt = true;
                return;
            }
        }
        ClearBGM(); //allows restarting the same track if it's already playing
        yield;
        StartBGM(indexCurrent, 15, 15);
        ObjText_SetVertexColor(playingText, 0xFF000000 + COLOR_WHITE);
        ObjText_SetVertexColor(descriptionText, 0xFF000000 + COLOR_WHITE);
        ObjText_SetText(playingText, GetBGMText(indexCurrent)[0]);
        ObjText_SetText(descriptionText, GetBGMText(indexCurrent)[1]);
    }

    task TCreateMenuGraphicsMusic() {
        int bg = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(bg, IMG_TT_BG);
        Obj_SetRenderPriorityI(bg, RP_UI_BG);
        ObjSprite2D_SetSourceRect(bg, 0, 0, 640, 400);
        ObjSprite2D_SetDestRect(bg, 0, 0, 640, 400);

        while (!exitFlag) yield;
        Obj_Delete(bg);
    }

    task TCreateMenuItemMusic(int index_, int x_, int y_) {
        int objText;
        int objTextHighlight;
        int bgmID = indexListTop + index_; //actual track number = index at top of list + position in the list
        string indexNumber = StringFormat("%2.0d%s", "ds", bgmID + 1, ". "); //prepended track number

        //Initial list creation
        if (!CD_GetBGMHeardFlag(bgmID)) {
            objText = CreateText(x_, y_, indexNumber ~ "???", COLOR_WHITE);
            objTextHighlight = CreateText(x_, y_, indexNumber ~ "???", COLOR_YELLOW);
        } else {
            objText = CreateText(x_, y_, indexNumber ~ GetBGMText(bgmID)[0], COLOR_WHITE);
            objTextHighlight = CreateText(x_, y_, indexNumber ~ GetBGMText(bgmID)[0], COLOR_YELLOW);
        }

        while (!exitFlag) {
            if (indexListTop + index_ != bgmID) { //update list if it scrolls beyond the current boundaries
                bgmID = indexListTop + index_;
                indexNumber = StringFormat("%2.0d%s", "ds", bgmID + 1, ". ");
                if (!CD_GetBGMHeardFlag(bgmID)) {
                    ObjText_SetText(objText, indexNumber ~ "???");
                    ObjText_SetText(objTextHighlight, indexNumber ~ "???");
                } else {
                    ObjText_SetText(objText, indexNumber ~ GetBGMText(bgmID)[0]);
                    ObjText_SetText(objTextHighlight, indexNumber ~ GetBGMText(bgmID)[0]);
                }
            }
            if (revealIndex == indexListTop + index_) { //play undiscovered track
                ObjText_SetText(objText, indexNumber ~ GetBGMText(bgmID)[0]);
                ObjText_SetText(objTextHighlight, indexNumber ~ GetBGMText(bgmID)[0]);
                revealIndex = -1;
            }
            Obj_SetVisible(objTextHighlight, bgmID == indexCurrent); //highlight selected index
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objTextHighlight);
    }

    function<void> CancelReveal() { //resets currently playing track and desription text upon cancelling a track reveal
        ObjText_SetVertexColor(playingText, 0xFF000000 + COLOR_WHITE);
        ObjText_SetVertexColor(descriptionText, 0xFF000000 + COLOR_WHITE);
        ObjText_SetText(playingText, GetBGMText(GetAreaCommonData(AREA_TITLE, "BGM_ID", -1))[0]);
        ObjText_SetText(descriptionText, GetBGMText(GetAreaCommonData(AREA_TITLE, "BGM_ID", -1))[1]);
        revealPrompt = false;
    }
}