//Difficulty Selection Screen
function<int> ScenePlayerSelect(int selectedDefault_) {
    bool exitFlag = false;
    bool selectFlag = false; //a player has been selected
    int playMode = GetAreaCommonData(AREA_TITLE, "GameMode", GAME_NONE);
    int selectedDifficulty = GetAreaCommonData(AREA_TITLE, "Difficulty", D_EASY);

    int selectMax = 1;
    int resultIndex = -1;

    int indexCurrent = selectedDefault_;

    int[] forbidIndex = [];
    
    // Check if player has unlocked this difficulty (defaults to true)
    bool[] unlockFlag = [true, true];

    //Extra Unlock
    if (selectedDifficulty >= D_EASYEX) {
        unlockFlag = [
            CD_GetExtraStageFlag(PLAYER_YABUSAME), 
            //CD_GetExtraStageFlag(PLAYER_TSUBAKURA) TODO not in demo
            false
        ];
    }
    //additional else if branch for practice mode unlocks

    //Forbid Indices
    ascent (i in 0..length(unlockFlag)) {
        if (!unlockFlag[i]) forbidIndex ~= [i];
    }

    //Don't select forbidden index as default
    while (CheckForbidden(indexCurrent, forbidIndex)) {
        indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
    }

    TCreateMenuGraphicsPlayer();

    //Create Menu Items
    for (int i = 0; i <= selectMax; i++) {
        TCreateMenuItemPlayer(i);
    }

    wait(15); //wait for screen fade from previous menu to clear
    WaitVirtualKeysFree([VK_LEFT, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop {
        int userKey = CheckVirtualKeyPressed([VK_LEFT, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_LEFT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_RIGHT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_OK) {
            resultIndex = indexCurrent;
            MenuSelect();
            break;
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            ScreenBlackout(10, 5, 10, COLOR_BLACK);
            wait(10);
            break;
        }
    }
    exitFlag = true;
    return resultIndex;

    function<void> MenuSelect() {
        CallSFX(SND_TT_DECIDE);
        //white screen flash then fadeout
        ScreenBlackout(0, 0, 20, COLOR_WHITE);
        selectFlag = true;
        wait(60);
        ScreenBlackout(60, 60, 0, COLOR_BLACK);
        wait(60);
    }

    task TCreateMenuGraphicsPlayer() {
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, RP_UI_BG);
        ObjRender_SetColor(bg, COLOR_BLACK);
        int circleOut = InitSprite2D(486, 0, 1017, 400, IMG_TT_PLAYER, RP_UI_BG);
        ObjRender_SetPosition(circleOut, 55, 0, 1);
        int circleIn = InitSprite2D(0, 0, 486, 400, IMG_TT_PLAYER, RP_UI_IMG);
        ObjRender_SetPosition(circleIn, 78, 0, 1);

        int radius = 241;
        TCircles();
        while (!exitFlag) {
            float angleT = rand(-50, 50); //get angle from center to edge of circle that is on screen
            TMoveParticle(WINDOW_WIDTH_MID + radius * cos(angleT), WINDOW_HEIGHT_MID + radius * sin(angleT), angleT);
            TMoveParticle(WINDOW_WIDTH_MID + radius * cos(angleT + 180), WINDOW_HEIGHT_MID + radius * sin(angleT + 180), angleT + 180);
            yield;
        }
        Obj_Delete(bg);
        Obj_Delete(circleOut);
        Obj_Delete(circleIn);

        task TCircles() {
            int primCircle = InitPrim2D(PRIMITIVE_LINESTRIP, 33, RP_UI_BG);
            int vertices = ObjPrim_GetVertexCount(primCircle);

            float tempRadius = radius;
            int[] color = [COLOR_WHITE, COLOR_GRAY_L, COLOR_GRAY, COLOR_GRAY_D];
            int frame = 0;
            int frames = 120;
            while (!exitFlag) {
                float angleT = 0;
                tempRadius = Interpolate_Decelerate(radius, 0, frame / as_float(frames));
                for (int i = 0; i < ObjPrim_GetVertexCount(primCircle); i++) {
                    ObjPrim_SetVertexPosition(primCircle, i, WINDOW_WIDTH_MID + tempRadius * cos(angleT), WINDOW_HEIGHT_MID + tempRadius * sin(angleT), 1);
                    ObjPrim_SetVertexColor(primCircle, i, color[frame * 4 / frames]);
                    angleT += 360 / (vertices - 1);
                }
                frame++;
                if (frame >= frames) frame = 0;
                yield;
            }
            Obj_Delete(primCircle);
        }

        task TMoveParticle(float x_, float y_, float angle_) {
            int[] color = [COLOR_WHITE, COLOR_GRAY_L, COLOR_GRAY, COLOR_GRAY_D];
            float maxSpeed = rand(2, 3.4);
            float speed = maxSpeed;
            int frame = 0;
            int frameRate = 20;
            while (!exitFlag) {
                //add particle
                ObjParticleList_SetPosition(_titleList, x_, y_, 1);
                ObjParticleList_SetExtraData(_titleList, trunc(3 - (frame / frameRate)), 0, 0);
                ObjParticleList_SetColor(_titleList, color[frame / frameRate]);
                ObjParticleList_AddInstance(_titleList);
                //update position variables
                x_ += speed * cos(angle_);
                y_ += speed * sin(angle_);
                speed = Interpolate_Decelerate(maxSpeed, 0, frame / (frameRate * 4.0));
                frame++;
                if (frame >= frameRate * 4) break;
                else yield;
            }
        }
    }

    task TCreateMenuItemPlayer(int index_) {
        int x;
        int y;

        alternative (index_)
        case (PLAYER_YABUSAME) {
            x = 36;
            y = 160;
        }
        case (PLAYER_TSUBAKURA) {
            x = 468;
            y = 160;
        }

        int objPlayerImg = InitSprite2D(0 + (288 * index_), 400, 144 + (288 * index_), 640, IMG_TT_PLAYER, RP_UI_IMG);
        ObjRender_SetPosition(objPlayerImg, x, y, 1);

        int objPlayerUnselect = InitSprite2D(144 + (288 * index_), 400, 288 + (288 * index_), 640, IMG_TT_PLAYER, RP_UI_IMG);
        ObjRender_SetPosition(objPlayerUnselect, x, y, 1);

        int objPlayerClear = InitSprite2D(0, 640, 64, 656, IMG_TT_PLAYER, RP_UI_IMG);
        ObjRender_SetPosition(objPlayerClear, x + 32, y - 16, 1);

        bool isCleared = CD_GetGameClearFlag(index_);

        while (!exitFlag) {
            Obj_SetVisible(objPlayerUnselect, selectFlag ? false : index_ != indexCurrent);
            Obj_SetVisible(objPlayerImg, selectFlag ? index_ == indexCurrent : true);
            Obj_SetVisible(objPlayerClear, selectFlag ? false : (index_ == indexCurrent && isCleared));
            yield;
        }
        Obj_Delete(objPlayerImg);
        Obj_Delete(objPlayerUnselect);
        Obj_Delete(objPlayerClear);
    }
}

