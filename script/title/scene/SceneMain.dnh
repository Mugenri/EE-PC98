//Title Screen

//Menu Indices
const int INDEX_EXTRA   = 0;
const int INDEX_PRACTICE= 1;
const int INDEX_REPLAY  = 2;
const int INDEX_SCORE   = 3;
const int INDEX_MUSIC   = 4;
const int INDEX_SOUND   = 5;
const int INDEX_OPTION  = 6;
const int INDEX_QUIT    = 7;

task TMainMenu(bool playIntro_, int selectedDefault_, int preloadIndex_) {
    CD_SaveAll(); //write data to save file
    if (preloadIndex_ >= 0) {
        SelectItem(preloadIndex_, true);
        return;
    }
    bool exitFlag = false; //deletes certain things upon leaving this menu

    int selectMax = INDEX_QUIT;
    int indexCurrent = selectedDefault_;

    int[] forbidIndex = []; //Can't select these menu options

    //Don't allow menu cursor to start on a forbidden index
    while (CheckForbidden(indexCurrent, forbidIndex)) {
        indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
    }

    if (playIntro_) {
        MenuIntro();
    } else {
        TCreateMenuGraphicsMain();
    }

    //Init title graphics/replace intro prims with images
    

    //Set up the menu
    {
        int menuX = 428;
        int menuY = 16;
        int[] xOffset = [-15, 110, -30, 90, -50, 75, -20, 100];
        string[] texts = ["Extra Start", "Practice", "Replays", "Result", "Music Room", "Sound Test", "Options", "Quit"];
        ascent (i in 0..selectMax + 1) {
            TCreateMenuItemMain(i, menuX, menuY, xOffset[i], texts[i]);
            menuY += 16;
        }
        TCreateMenuInfo(1, GetScreenHeight() - 16); //version text
    }

    wait(15); //wait for screen fade from previous menu to clear
    WaitKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        int userKey = CheckKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP, VK_LEFT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_DOWN, VK_RIGHT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_OK) {
            CallSFX(SND_TT_DECIDE);
            SelectItem(indexCurrent, false);
            break;
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            indexCurrent = INDEX_QUIT;
        }
    }

    function<int> SelectItem(int index_, bool isPreload_) {
        //preload skips the main title menu and loads into the submenu
        alternative (index_)
        // case (INDEX_START) {
        //     //Game Start
        //     if (!isPreload_) {
        //         ScreenBlackout(10, 5, 10, COLOR_BLACK);
        //         wait(10);
        //     }
        //     TSelectStart();
        // }
        case (INDEX_EXTRA) {
            //Extra Start
            if (!isPreload_) {
                ScreenBlackout(10, 5, 10, COLOR_BLACK);
                wait(10);
            }
            TSelectExtra();
        }
        case (INDEX_PRACTICE) {
            //Spell Practice
            if (!isPreload_) {
                ScreenBlackout(10, 5, 10, COLOR_BLACK);
                wait(10);
            }
            TSelectPractice(isPreload_);
        }
        case (INDEX_REPLAY) {
            //Replays
            if (!isPreload_) {
                ScreenBlackout(10, 5, 10, COLOR_BLACK);
                wait(10);
            }
            TSelectReplay();
        }
        case (INDEX_SCORE) {
            //Result
            if (!isPreload_) {
                ScreenBlackout(10, 5, 10, COLOR_BLACK);
                wait(10);
            }
            TSelectScore();
        }
        case (INDEX_MUSIC) {
            //Music Room
            if (!isPreload_) {
                ScreenBlackout(10, 5, 10, COLOR_BLACK);
                wait(10);
            }
            TSelectMusic();
        }
        case (INDEX_SOUND) {
            //Sound Test
            TSelectSound();
        }
        case (INDEX_OPTION) {
            //Options
            TSelectOption();
        }
        case (INDEX_QUIT) {
            //Exit Game
            CD_SaveAll();
            ScreenBlackout(60, 200, 0, COLOR_BLACK);
            ClearBGM();
            wait(80);
            ClosePackage();
        }
    }

    function<void> MenuIntro() {
        //setup
        bool skipIntro = false;
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, RP_UI_BG);
        ObjRender_SetColor(bg, COLOR_BLACK);
        wait(30);
        int logo1 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo1, COLOR_BLUE_D);
        ObjRender_SetPosition(logo1, WINDOW_WIDTH, 3, 1);
        int logo2 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo2, COLOR_INDIGO_D);
        ObjRender_SetPosition(logo2, WINDOW_WIDTH, 3, 1);
        int logo3 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo3, COLOR_INDIGO_L);
        ObjRender_SetPosition(logo3, WINDOW_WIDTH, 3, 1);
        int logo4 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo4, COLOR_WHITE);
        ObjRender_SetPosition(logo4, WINDOW_WIDTH, 3, 1);

        //anim
        TMoveLogo(logo1, 0);
        TMoveLogo(logo2, 8);
        TMoveLogo(logo3, 16);
        TMoveLogo(logo4, 24);

        //player input to skip intro
        async {
            loop (125) { //animation time
                if (GetVirtualKeyState(VK_OK) == KEY_PUSH) {
                    skipIntro = true;
                    break;
                }
                yield;
            }
        }

        loop (40) { //wait for text scroll
            if (skipIntro) break;
            yield;
        }

        int objWhite = ScreenBlackout(40, 5, 40, COLOR_WHITE);
        
        loop (40) { //fade in anim
            if (skipIntro) break;
            yield;
        }

        //cleanup
        Obj_Delete(bg);
        Obj_Delete(logo1);
        Obj_Delete(logo2);
        Obj_Delete(logo3);
        Obj_Delete(logo4);

        //normal menu
        TCreateMenuGraphicsMain();
        loop (45) { //rest of fade animation
            if (skipIntro) break;
            yield;
        }

        if (!Obj_IsDeleted(objWhite)) Obj_Delete(objWhite);

        task TMoveLogo(int obj_, int wait_) {
            wait(wait_);
            int frames = 40;
            for (int i = 1; i <= frames; i++) {
                if (Obj_IsDeleted(obj_)) return;
                ObjRender_SetPosition(obj_, Interpolate_Accelerate(WINDOW_WIDTH, 5, i / as_float(frames)), 3, 1);
                yield;
            }
        }
    }

    task TCreateMenuGraphicsMain() {
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, IMG_TT_BG, RP_UI_BG);
        int logo = InitSprite2D(0, 0, 327, 87, IMG_TT_LOGO, RP_UI_TEXT);

        ObjRender_SetPosition(logo, 5, 3, 1);

        while (!exitFlag) yield;
        Obj_Delete(bg);
        Obj_Delete(logo);
    }

    task TCreateMenuItemMain(int index_, int x_, int y_, int xOff_, string text_) {
        int color = COLOR_INDIGO_L;
        if (CheckForbidden(index_, forbidIndex)) color = COLOR_BLUE_D;
        int objText = CreateText(x_ + xOff_, y_, text_, color);
        int objCursor = CreateCursor(ObjRender_GetX(objText) + (ObjText_GetTotalWidth(objText) / 2), ObjRender_GetY(objText) + 8);
        while (!exitFlag) {
            ObjText_SetVertexColor(objText, 0xFF000000 + (index_ == indexCurrent ? COLOR_BLACK : color));
            Obj_SetVisible(objCursor, index_ == indexCurrent);
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objCursor);
    }

    task TCreateMenuInfo(int x_, int y_) {
        int objText = CreateText(x_, y_, "Version " ~GAME_VERSION, COLOR_BLACK);
        while (!exitFlag) yield;
        Obj_Delete(objText);
    }

    task TSelectStart() { //UNUSED
        exitFlag = true;
        //Declare variables to be set by submenus
        int selectedRank = D_NORMAL;
        int selectedPlayer = PLAYER_YABUSAME;
        //Main Play Mode
        SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);

        int tempSelect = 0;
        loop {
            //Select Difficulty
            tempSelect = SceneRankSelect(selectedRank);
            if (tempSelect < 0) break;
            selectedRank = tempSelect;
            loop {
                //Select Player
                tempSelect = ScenePlayerSelect(selectedPlayer);
                if (tempSelect < 0) break;
                selectedPlayer = tempSelect;

                //Set CommonData for player selections
                SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);
                SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
                SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

                //Run main stage script
                string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
                int idScript = LoadScript(pathScript);
                StartScript(idScript);
                return;
            }
        }
        //Exited start game menu
        TMainMenu(false, INDEX_EXTRA, -1);
    }

    task TSelectExtra() {
        exitFlag = true;
        //Declare variables to be set by submenus
        int selectedRank = D_EXTRA;
        int selectedPlayer = PLAYER_YABUSAME;
        //Main Play Mode
        SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);

        int tempSelect = 0;
        loop {
            //Select Difficulty
            tempSelect = SceneRankSelect(selectedRank);
            if (tempSelect < 0) break;
            selectedRank = tempSelect;
            loop {
                //Select Player
                tempSelect = ScenePlayerSelect(selectedPlayer);
                if (tempSelect < 0) break;
                selectedPlayer = tempSelect;

                //Set CommonData for player selections
                SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);
                SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
                SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

                //Run main stage script
                int stageIndex = selectedPlayer == 0 ? 0 : 1; //0 yabu, 1 tsuba. this will eventually be replaced by a stage selection system
                SetAreaCommonData(AREA_TITLE, "StageIndex", stageIndex);
                string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
                int idScript = LoadScript(pathScript);
                StartScript(idScript);
                NotifyEvent(GetAreaCommonData(AREA_TITLE, "SCRIPT_TITLE", -1), EV_TITLE_END, 0);
                return;
            }
        }
        //Exited extra start menu
        TMainMenu(false, INDEX_EXTRA, -1);
    }

    task TSelectPractice(bool preload_) { //Spell Practice Mode
        exitFlag = true;
        SetAreaCommonData(AREA_TITLE, "GameMode", GAME_SPELL);

        int[] tempData;
        int[] selectedDefault = [PLAYER_YABUSAME, D_EXTRA, 0, 0];
        if (preload_) {
            int player = GetPlayerType();
            int diff = GetDifficulty();
            int stage = GetStageIndex();
            int spell = GetSpellPracticeID();
            selectedDefault = [player, diff, stage, spell];
        }

        loop {
            tempData = SceneSpellPractice(selectedDefault, preload_);
            if (tempData[0] == -1) break;

            //Set CommonData for player selections
            SetAreaCommonData(AREA_TITLE, "GameMode", GAME_SPELL);
            SetAreaCommonData(AREA_TITLE, "PlayerType", tempData[0]);
            SetAreaCommonData(AREA_TITLE, "Difficulty", tempData[1]);
            SetAreaCommonData(AREA_TITLE, "StageIndex", tempData[2]);
            SetAreaCommonData(AREA_TITLE, "SpellPracticeID", tempData[3]);
            //start stage
            string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
            int idScript = LoadScript(pathScript);
            StartScript(idScript);
            NotifyEvent(GetAreaCommonData(AREA_TITLE, "SCRIPT_TITLE", -1), EV_TITLE_END, 0);
            return;
        }

        //Exited spell practice menu
        TMainMenu(false, INDEX_PRACTICE, -1);
    }

    task TSelectReplay() {
        exitFlag = true;
        //SceneReplay();

        //Exited Replay menu
        TMainMenu(false, INDEX_REPLAY, -1);
    }

    task TSelectScore() {
        exitFlag = true;
        //SceneScore();

        //Exited player score menu
        TMainMenu(false, INDEX_SCORE, -1);
    }

    task TSelectMusic() {
        exitFlag = true;
        SceneMusicRoom();

        //Exited music menu
        StartBGM(0, 60, 15);
        TMainMenu(false, INDEX_MUSIC, -1);
    }

    task TSelectSound() {
        exitFlag = true;
        SceneSoundTest();

        //Exited sound test menu
        TMainMenu(false, INDEX_SOUND, -1);
    }

    task TSelectOption() {
        exitFlag = true;
        SceneOption();

        //Exited option menu
        TMainMenu(false, INDEX_OPTION, -1);
    }
}