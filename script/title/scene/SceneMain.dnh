//Title Screen

//Menu Indices
const int INDEX_START = 0;
const int INDEX_EXTRA = 1;
const int INDEX_PRACTICE = 2;
const int INDEX_REPLAY = 3;
const int INDEX_MUSIC = 4;
const int INDEX_SCORE = 5;
const int INDEX_OPTION = 6;
const int INDEX_QUIT = 7;

int _indexCurrent;

bool _exitFlag = false; //deletes certain things upon leaving this menu

task TMainMenu(bool playIntro_, int selectedDefault_) {
    _exitFlag = false;
    SaveCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE); //write data to save file

    int selectMax = INDEX_QUIT;
    _indexCurrent = selectedDefault_;

    int[] forbidIndex = [INDEX_START, INDEX_PRACTICE]; //Can't select these menu options

    //Don't allow menu cursor to start on a forbidden index
    while (CheckForbidden(_indexCurrent, forbidIndex)) {
        _indexCurrent = IncrementIndex(_indexCurrent, 1, 0, selectMax, forbidIndex);
    }

    if (playIntro_) {
        //TODO play intro anim, this should be blocking and cancel upon pressing a button
    }

    //Init title graphics/replace intro prims with images
    TCreateMenuGraphicsMain();

    //Set up the menu
    {
        int menuX = 400;
        int menuY = 244;
        int[] xOffset = [0, 110, -30, 90, -50, 80, -20, 100];
        int yOffset = 15;
        string[] texts = ["Start", "Extra Start", "Practice", "Replays", "Music Room", "Result", "Options", "Quit"];
        ascent (i in 0..selectMax + 1) {
            TCreateMenuItemMain(i, menuX, menuY, xOffset[i], yOffset, texts[i]);
            menuY += yOffset;
        }
        TCreateMenuInfo(1, GetScreenHeight() - 16); //version text
    }

    wait(15); //wait for screen fade from previous menu to clear
    WaitKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        int userKey = CheckKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP, VK_LEFT) {
            CallSFX(SND_TT_SELECT);
            _indexCurrent = IncrementIndex(_indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_DOWN, VK_RIGHT) {
            CallSFX(SND_TT_SELECT);
            _indexCurrent = IncrementIndex(_indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_OK) {
            MenuSelect();
            int temp = SelectItem(_indexCurrent);
            if (temp > 0) break;
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            _indexCurrent = INDEX_QUIT;
        }
    }

    function<int> SelectItem(int index_) {
        alternative (index_)
        case (INDEX_START) {
            //Game Start
            TSelectStart();
            return 1;
        }
        case (INDEX_EXTRA) {
            //Extra Start
            TSelectExtra();
            return 1;
        }
        case (INDEX_PRACTICE) {
            //Stage Practice
            TSelectPractice();
            return 1;
        }
        case (INDEX_REPLAY) {
            //Replays
            TSelectReplay();
            return 1;
        }
        case (INDEX_MUSIC) {
            //Music Room
            TSelectMusic();
            return 1;
        }
        case (INDEX_SCORE) {
            //Result
            TSelectScore();
            return 1;
        }
        case (INDEX_OPTION) {
            //Options
            TSelectOption();
            return 1;
        }
        case (INDEX_QUIT) {
            //Exit Game
            SaveCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE);
            ScreenBlackout(60, 200, 0, 0x000000);
            wait(80);
            ClosePackage();
            return 1;
        }
    }

    task TCreateMenuGraphicsMain() {
        int bg = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(bg, IMG_TT_BG);
        Obj_SetRenderPriorityI(bg, RP_UI_BG);
        ObjSprite2D_SetSourceRect(bg, 0, 0, 640, 400);
        ObjSprite2D_SetDestRect(bg, 0, 0, 640, 400);

        int yabu = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(yabu, IMG_TT_YABU);
        Obj_SetRenderPriorityI(yabu, RP_UI_BG);
        ObjSprite2D_SetSourceRect(yabu, 0, 0, 288, 360);
        ObjSprite2D_SetDestRect(yabu, 0, 0, 288, 360);

        ObjRender_SetPosition(yabu, 40, 20, 1);

        while (!_exitFlag) yield;
        Obj_Delete(bg);
        Obj_Delete(yabu);
    }

    task TCreateMenuItemMain(int index_, int x_, int y_, int xOff_, int yOff_, string text_) {
        int color = 0xFFFFFFFF;
        if (CheckForbidden(index_, forbidIndex)) color = 0xFF111166;
        int objText = CreateText(x_ + xOff_, y_ + yOff_, text_, color);
        int objTextHighlight = CreateText(x_ + xOff_, y_ + yOff_, text_, 0xFFFFFF00);
        int objCursor = CreateCursor(ObjRender_GetX(objText) + (ObjText_GetTotalWidth(objText) / 2), ObjRender_GetY(objText) + 8);
        while (!_exitFlag) {
            Obj_SetVisible(objTextHighlight, index_ == _indexCurrent);
            Obj_SetVisible(objCursor, index_ == _indexCurrent);
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objTextHighlight);
        Obj_Delete(objCursor);
    }

    task TCreateMenuInfo(int x_, int y_) {
        int objText = CreateText(x_, y_, "Version " ~GAME_VERSION, 0xFFFFFFFF);
        while (!_exitFlag) yield;
        Obj_Delete(objText);
    }
    
    function<void> MenuSelect() {
        CallSFX(SND_TT_DECIDE);
    }
}

task TSelectStart() { //UNUSED
    ScreenBlackout(10, 5, 10, 0x000000);
    wait(10);
    _exitFlag = true;
    //Declare variables to be set by submenus
    int selectedRank = D_NORMAL;
    int selectedPlayer = PLAYER_YABUSAME;
    //Main Play Mode
    SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);

    int tempSelect = 0;
    loop {
        //Select Difficulty
        tempSelect = SceneRankSelect(selectedRank);
        if (tempSelect < 0) break;
        selectedRank = tempSelect;
        loop {
            //Select Player
            tempSelect = ScenePlayerSelect(selectedPlayer);
            if (tempSelect < 0) break;
            selectedPlayer = tempSelect;

            //Set CommonData for player selections
            SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);
            SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
            SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

            //Run main stage script
            string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
            int idScript = LoadScript(pathScript);
            StartScript(idScript);
            return;
        }
    }
    //Only Runs if the submenu is exited
    TMainMenu(false, INDEX_START);
}

task TSelectExtra() {
    ScreenBlackout(10, 5, 10, 0x000000);
    wait(10);
    _exitFlag = true;
    //Declare variables to be set by submenus
    int selectedRank = D_EXTRA;
    int selectedPlayer = PLAYER_YABUSAME;
    //Main Play Mode
    SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);

    int tempSelect = 0;
    loop {
        //Select Difficulty
        tempSelect = SceneRankSelect(selectedRank);
        if (tempSelect < 0) break;
        selectedRank = tempSelect;
        loop {
            //Select Player
            tempSelect = ScenePlayerSelect(selectedPlayer);
            if (tempSelect < 0) break;
            selectedPlayer = tempSelect;

            //Set CommonData for player selections
            SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);
            SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
            SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

            //Run main stage script
            string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
            int idScript = LoadScript(pathScript);
            StartScript(idScript);
            return;
        }
    }
    //Only Runs if the submenu is exited
    TMainMenu(false, INDEX_EXTRA);
}

task TSelectPractice() { //UNUSED
    ScreenBlackout(10, 5, 10, 0x000000);
    wait(10);
    _exitFlag = true;

    //Only Runs if the submenu is exited
    TMainMenu(false, INDEX_PRACTICE);
}

task TSelectReplay() {
    ScreenBlackout(10, 5, 10, 0x000000);
    wait(10);
    _exitFlag = true;

    //Only Runs if the submenu is exited
    TMainMenu(false, INDEX_REPLAY);
}

task TSelectMusic() {
    ScreenBlackout(10, 5, 10, 0x000000);
    wait(10);
    _exitFlag = true;
    SceneMusicRoom();

    //probably reset the bgm track here

    //Exited music menu
    StartBGM(0, 60, 15);
    TMainMenu(false, INDEX_MUSIC);
}

task TSelectScore() {
    ScreenBlackout(10, 5, 10, 0x000000);
    wait(10);
    _exitFlag = true;

    //Exited player score menu
    TMainMenu(false, INDEX_SCORE);
}

task TSelectOption() {
    _exitFlag = true;
    SceneOption();

    //Exited option menu
    TMainMenu(false, INDEX_OPTION);
}