//Title Screen

//Menu Indices
const int INDEX_EXTRA   = 0;
const int INDEX_PRACTICE= 1;
const int INDEX_REPLAY  = 2;
const int INDEX_SCORE   = 3;
const int INDEX_MUSIC   = 4;
const int INDEX_SOUND   = 5;
const int INDEX_OPTION  = 6;
const int INDEX_QUIT    = 7;

task TMainMenu(bool playIntro_, int selectedDefault_) {
    bool exitFlag = false; //deletes certain things upon leaving this menu
    CD_SaveAll(); //write data to save file

    int selectMax = INDEX_QUIT;
    int indexCurrent = selectedDefault_;

    int[] forbidIndex = []; //Can't select these menu options

    //Don't allow menu cursor to start on a forbidden index
    while (CheckForbidden(indexCurrent, forbidIndex)) {
        indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
    }

    if (playIntro_) {
        MenuIntro();
    } else {
        TCreateMenuGraphicsMain();
    }

    //Init title graphics/replace intro prims with images
    

    //Set up the menu
    {
        int menuX = 428;
        int menuY = 16;
        int[] xOffset = [-15, 110, -30, 90, -50, 75, -20, 100];
        string[] texts = ["Extra Start", "Practice", "Replays", "Result", "Music Room", "Sound Test", "Options", "Quit"];
        ascent (i in 0..selectMax + 1) {
            TCreateMenuItemMain(i, menuX, menuY, xOffset[i], texts[i]);
            menuY += 16;
        }
        TCreateMenuInfo(1, GetScreenHeight() - 16); //version text
    }

    wait(15); //wait for screen fade from previous menu to clear
    WaitKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        int userKey = CheckKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP, VK_LEFT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_DOWN, VK_RIGHT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_OK) {
            SelectItem(indexCurrent);
            break;
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            indexCurrent = INDEX_QUIT;
        }
    }

    function<int> SelectItem(int index_) {
        CallSFX(SND_TT_DECIDE);
        alternative (index_)
        // case (INDEX_START) {
        //     //Game Start
        //     TSelectStart();
        // }
        case (INDEX_EXTRA) {
            //Extra Start
            TSelectExtra();
        }
        case (INDEX_PRACTICE) {
            //Stage Practice
            TSelectPractice();
        }
        case (INDEX_REPLAY) {
            //Replays
            TSelectReplay();
        }
        case (INDEX_SCORE) {
            //Result
            TSelectScore();
        }
        case (INDEX_MUSIC) {
            //Music Room
            TSelectMusic();
        }
        case (INDEX_SOUND) {
            //Sound Test
            TSelectSound();
        }
        case (INDEX_OPTION) {
            //Options
            TSelectOption();
        }
        case (INDEX_QUIT) {
            //Exit Game
            CD_SaveAll();
            ScreenBlackout(60, 200, 0, COLOR_BLACK);
            wait(80);
            ClosePackage();
        }
    }

    function MenuIntro() {
        //setup
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, RP_UI_BG);
        ObjRender_SetColor(bg, COLOR_BLACK);
        wait(30);
        int logo1 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo1, COLOR_BLUE_D);
        ObjRender_SetPosition(logo1, WINDOW_WIDTH, 3, 1);
        int logo2 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo2, COLOR_INDIGO_D);
        ObjRender_SetPosition(logo2, WINDOW_WIDTH, 3, 1);
        int logo3 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo3, COLOR_INDIGO_L);
        ObjRender_SetPosition(logo3, WINDOW_WIDTH, 3, 1);
        int logo4 = InitSprite2D(0, 87, 327, 174, IMG_TT_LOGO, RP_UI_TEXT);
        ObjRender_SetColor(logo4, COLOR_WHITE);
        ObjRender_SetPosition(logo4, WINDOW_WIDTH, 3, 1);

        //anim
        MoveLogo(logo1);
        wait(8);
        MoveLogo(logo2);
        wait(8);
        MoveLogo(logo3);
        wait(8);
        MoveLogo(logo4);
        wait(40);
        ScreenBlackout(40, 5, 40, COLOR_WHITE);
        wait(40);

        //cleanup
        Obj_Delete(bg);
        Obj_Delete(logo1);
        Obj_Delete(logo2);
        Obj_Delete(logo3);
        Obj_Delete(logo4);

        //normal menu fadein
        TCreateMenuGraphicsMain();
        wait(45);

        task MoveLogo(int obj_) {
            real frames = 40;
            for (int i = 1; i <= 40; i++) {
                ObjRender_SetPosition(obj_, Interpolate_Accelerate(WINDOW_WIDTH, 5, i / frames), 3, 1);
                yield;
            }
        }
    }

    task TCreateMenuGraphicsMain() {
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, IMG_TT_BG, RP_UI_BG);
        int logo = InitSprite2D(0, 0, 327, 87, IMG_TT_LOGO, RP_UI_TEXT);

        ObjRender_SetPosition(logo, 5, 3, 1);

        while (!exitFlag) yield;
        Obj_Delete(bg);
        Obj_Delete(logo);
    }

    task TCreateMenuItemMain(int index_, int x_, int y_, int xOff_, string text_) {
        int color = COLOR_INDIGO_L;
        if (CheckForbidden(index_, forbidIndex)) color = COLOR_BLUE_D;
        int objText = CreateText(x_ + xOff_, y_, text_, color);
        int objCursor = CreateCursor(ObjRender_GetX(objText) + (ObjText_GetTotalWidth(objText) / 2), ObjRender_GetY(objText) + 8);
        while (!exitFlag) {
            ObjText_SetVertexColor(objText, 0xFF000000 + (index_ == indexCurrent ? COLOR_BLACK : color));
            Obj_SetVisible(objCursor, index_ == indexCurrent);
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objCursor);
    }

    task TCreateMenuInfo(int x_, int y_) {
        int objText = CreateText(x_, y_, "Version " ~GAME_VERSION, COLOR_BLACK);
        while (!exitFlag) yield;
        Obj_Delete(objText);
    }

    task TSelectStart() { //UNUSED
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //Declare variables to be set by submenus
        int selectedRank = D_NORMAL;
        int selectedPlayer = PLAYER_YABUSAME;
        //Main Play Mode
        SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);

        int tempSelect = 0;
        loop {
            //Select Difficulty
            tempSelect = SceneRankSelect(selectedRank);
            if (tempSelect < 0) break;
            selectedRank = tempSelect;
            loop {
                //Select Player
                tempSelect = ScenePlayerSelect(selectedPlayer);
                if (tempSelect < 0) break;
                selectedPlayer = tempSelect;

                //Set CommonData for player selections
                SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);
                SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
                SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

                //Run main stage script
                string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
                int idScript = LoadScript(pathScript);
                StartScript(idScript);
                return;
            }
        }
        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_EXTRA);
    }

    task TSelectExtra() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //Declare variables to be set by submenus
        int selectedRank = D_EXTRA;
        int selectedPlayer = PLAYER_YABUSAME;
        //Main Play Mode
        SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);

        int tempSelect = 0;
        loop {
            //Select Difficulty
            tempSelect = SceneRankSelect(selectedRank);
            if (tempSelect < 0) break;
            selectedRank = tempSelect;
            loop {
                //Select Player
                tempSelect = ScenePlayerSelect(selectedPlayer);
                if (tempSelect < 0) break;
                selectedPlayer = tempSelect;

                //Set CommonData for player selections
                SetAreaCommonData(AREA_TITLE, "GameMode", GAME_MAIN);
                SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
                SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

                //Run main stage script
                int stageIndex = selectedPlayer == 0 ? 0 : 1; //0 yabu, 1 tsuba. this will eventually be replaced by a stage selection system
                SetAreaCommonData(AREA_TITLE, "StageIndex", stageIndex);
                string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
                int idScript = LoadScript(pathScript);
                StartScript(idScript);
                return;
            }
        }
        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_EXTRA);
    }

    task TSelectPractice() { //UNUSED
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //ScenePractice();

        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_PRACTICE);
    }

    task TSelectReplay() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //SceneReplay();

        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_REPLAY);
    }

    task TSelectMusic() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        SceneMusicRoom();

        //Exited music menu
        StartBGM(0, 60, 15);
        TMainMenu(false, INDEX_MUSIC);
    }

    task TSelectSound() {
        exitFlag = true;
        SceneSoundTest();

        //Exited sound test menu
        TMainMenu(false, INDEX_SOUND);
    }

    task TSelectScore() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //SceneScore();

        //Exited player score menu
        TMainMenu(false, INDEX_SCORE);
    }

    task TSelectOption() {
        exitFlag = true;
        SceneOption();

        //Exited option menu
        TMainMenu(false, INDEX_OPTION);
    }
}