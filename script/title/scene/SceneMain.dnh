//Title Screen

//Menu Indices
const int INDEX_EXTRA   = 0;
const int INDEX_PRACTICE= 1;
const int INDEX_REPLAY  = 2;
const int INDEX_SCORE   = 3;
const int INDEX_MUSIC   = 4;
const int INDEX_SOUND   = 5;
const int INDEX_OPTION  = 6;
const int INDEX_QUIT    = 7;

task TMainMenu(bool playIntro_, int selectedDefault_) {
    bool exitFlag = false; //deletes certain things upon leaving this menu
    SaveCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE); //write data to save file

    int selectMax = INDEX_QUIT;
    int indexCurrent = selectedDefault_;

    int[] forbidIndex = []; //Can't select these menu options

    //Don't allow menu cursor to start on a forbidden index
    while (CheckForbidden(indexCurrent, forbidIndex)) {
        indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
    }

    if (playIntro_) {
        //TODO play intro anim, this should be blocking and cancel upon pressing a button
    }

    //Init title graphics/replace intro prims with images
    TCreateMenuGraphicsMain();

    //Set up the menu
    {
        int menuX = 400;
        int menuY = 244;
        int[] xOffset = [-15, 110, -30, 90, -50, 75, -20, 100];
        int yOffset = 15;
        string[] texts = ["Extra Start", "Practice", "Replays", "Result", "Music Room", "Sound Test", "Options", "Quit"];
        ascent (i in 0..selectMax + 1) {
            TCreateMenuItemMain(i, menuX, menuY, xOffset[i], yOffset, texts[i]);
            menuY += yOffset;
        }
        TCreateMenuInfo(1, GetScreenHeight() - 16); //version text
    }

    wait(15); //wait for screen fade from previous menu to clear
    WaitKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        int userKey = CheckKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP, VK_LEFT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_DOWN, VK_RIGHT) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_OK) {
            SelectItem(indexCurrent);
            break;
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            indexCurrent = INDEX_QUIT;
        }
    }

    function<int> SelectItem(int index_) {
        CallSFX(SND_TT_DECIDE);
        alternative (index_)
        // case (INDEX_START) {
        //     //Game Start
        //     TSelectStart();
        // }
        case (INDEX_EXTRA) {
            //Extra Start
            TSelectExtra();
        }
        case (INDEX_PRACTICE) {
            //Stage Practice
            TSelectPractice();
        }
        case (INDEX_REPLAY) {
            //Replays
            TSelectReplay();
        }
        case (INDEX_SCORE) {
            //Result
            TSelectScore();
        }
        case (INDEX_MUSIC) {
            //Music Room
            TSelectMusic();
        }
        case (INDEX_SOUND) {
            //Sound Test
            TSelectSound();
        }
        case (INDEX_OPTION) {
            //Options
            TSelectOption();
        }
        case (INDEX_QUIT) {
            //Exit Game
            SaveCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE);
            ScreenBlackout(60, 200, 0, COLOR_BLACK);
            wait(80);
            ClosePackage();
        }
    }

    task TCreateMenuGraphicsMain() {
        int bg = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(bg, IMG_TT_BG);
        Obj_SetRenderPriorityI(bg, RP_UI_BG);
        ObjSprite2D_SetSourceRect(bg, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        ObjSprite2D_SetDestRect(bg, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);

        int yabu = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(yabu, IMG_TT_YABU);
        Obj_SetRenderPriorityI(yabu, RP_UI_BG);
        ObjSprite2D_SetSourceRect(yabu, 0, 0, 288, 360);
        ObjSprite2D_SetDestRect(yabu, 0, 0, 288, 360);

        ObjRender_SetPosition(yabu, 40, 20, 1);

        while (!exitFlag) yield;
        Obj_Delete(bg);
        Obj_Delete(yabu);
    }

    task TCreateMenuItemMain(int index_, int x_, int y_, int xOff_, int yOff_, string text_) {
        int color = COLOR_WHITE;
        if (CheckForbidden(index_, forbidIndex)) color = COLOR_BLUE_D;
        int objText = CreateText(x_ + xOff_, y_ + yOff_, text_, color);
        int objCursor = CreateCursor(ObjRender_GetX(objText) + (ObjText_GetTotalWidth(objText) / 2), ObjRender_GetY(objText) + 8);
        while (!exitFlag) {
            ObjText_SetVertexColor(objText, 0xFF000000 + (index_ == indexCurrent ? COLOR_YELLOW : color));
            Obj_SetVisible(objCursor, index_ == indexCurrent);
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objCursor);
    }

    task TCreateMenuInfo(int x_, int y_) {
        int objText = CreateText(x_, y_, "Version " ~GAME_VERSION, COLOR_WHITE);
        while (!exitFlag) yield;
        Obj_Delete(objText);
    }

    task TSelectStart() { //UNUSED
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //Declare variables to be set by submenus
        int selectedRank = D_NORMAL;
        int selectedPlayer = PLAYER_YABUSAME;
        //Main Play Mode
        SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);

        int tempSelect = 0;
        loop {
            //Select Difficulty
            tempSelect = SceneRankSelect(selectedRank);
            if (tempSelect < 0) break;
            selectedRank = tempSelect;
            loop {
                //Select Player
                tempSelect = ScenePlayerSelect(selectedPlayer);
                if (tempSelect < 0) break;
                selectedPlayer = tempSelect;

                //Set CommonData for player selections
                SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);
                SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
                SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

                //Run main stage script
                string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
                int idScript = LoadScript(pathScript);
                StartScript(idScript);
                return;
            }
        }
        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_EXTRA);
    }

    task TSelectExtra() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //Declare variables to be set by submenus
        int selectedRank = D_EXTRA;
        int selectedPlayer = PLAYER_YABUSAME;
        //Main Play Mode
        SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);

        int tempSelect = 0;
        loop {
            //Select Difficulty
            tempSelect = SceneRankSelect(selectedRank);
            if (tempSelect < 0) break;
            selectedRank = tempSelect;
            loop {
                //Select Player
                tempSelect = ScenePlayerSelect(selectedPlayer);
                if (tempSelect < 0) break;
                selectedPlayer = tempSelect;

                //Set CommonData for player selections
                SetAreaCommonData(AREA_TITLE, "PlayMode", GAME_MAIN);
                SetAreaCommonData(AREA_TITLE, "PlayerType", selectedPlayer);
                SetAreaCommonData(AREA_TITLE, "Difficulty", selectedRank);

                //Run main stage script
                string pathScript = GetCurrentScriptDirectory() ~ "SceneStage.dnh";
                int idScript = LoadScript(pathScript);
                StartScript(idScript);
                return;
            }
        }
        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_EXTRA);
    }

    task TSelectPractice() { //UNUSED
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //ScenePractice();

        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_PRACTICE);
    }

    task TSelectReplay() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //SceneReplay();

        //Only Runs if the submenu is exited
        TMainMenu(false, INDEX_REPLAY);
    }

    task TSelectMusic() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        SceneMusicRoom();

        //Exited music menu
        StartBGM(0, 60, 15);
        TMainMenu(false, INDEX_MUSIC);
    }

    task TSelectSound() {
        exitFlag = true;
        SceneSoundTest();

        //Exited sound test menu
        TMainMenu(false, INDEX_PRACTICE);
    }

    task TSelectScore() {
        ScreenBlackout(10, 5, 10, COLOR_BLACK);
        wait(10);
        exitFlag = true;
        //SceneScore();

        //Exited player score menu
        TMainMenu(false, INDEX_SCORE);
    }

    task TSelectOption() {
        exitFlag = true;
        SceneOption();

        //Exited option menu
        TMainMenu(false, INDEX_OPTION);
    }
}