//Sound test room

function<void> SceneSoundTest() {
    bool exitFlag = false;

    int listSize = GetAreaCommonData(AREA_TITLE, "SFX_NUM", 0); //0 indexed
    int indexCurrent = 0;

    TCreateMenuGraphicsSound();

    TMenuItem();

    //no fade from previous menu, so no wait time
    WaitVirtualKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        int userKey = CheckVirtualKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP, VK_LEFT) {
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, listSize);
        }
        case (VK_DOWN, VK_RIGHT) {
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, listSize);
        }
        case (VK_OK) {
            MenuSelect();
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            break;
        }
    }
    exitFlag = true;

    function<void> MenuSelect() {
        CallSFX(indexCurrent);
    }

    task TCreateMenuGraphicsSound() {
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, IMG_TT_BG, RP_UI_BG);
        int logo = InitSprite2D(640, 0, 967, 87, IMG_TT_BG, RP_UI_TEXT);

        ObjRender_SetPosition(logo, 5, 3, 1);

        while (!exitFlag) yield;
        Obj_Delete(bg);
        Obj_Delete(logo);
    }

    task TMenuItem() {
        int index = -1;
        int sfxIndex = CreateText(372, 38, RP_UI_TEXT,"ERR", COLOR_BLACK);
        int sfxName = CreateText(372, 56, RP_UI_TEXT, "ERR", COLOR_BLACK);

        ObjText_SetMaxWidth(sfxIndex, 270);
        ObjText_SetMaxWidth(sfxName, 270);
        ObjText_SetHorizontalAlignment(sfxIndex, ALIGNMENT_CENTER);
        ObjText_SetHorizontalAlignment(sfxName, ALIGNMENT_CENTER);

        while (!exitFlag) {
            if (index != indexCurrent) {
                index = indexCurrent;
                ObjText_SetText(sfxIndex, "SFX "~ vtos("2d", ToString(indexCurrent)));
                ObjText_SetText(sfxName, GetSFXName(indexCurrent));
            }
            yield;
        }
        Obj_Delete(sfxIndex);
        Obj_Delete(sfxName);
    }

    function<string> GetSFXName(int index_) {
        alternative (index_)
        case (SND_BANG1) { return "Bang1"; }
        case (SND_BANG2) { return "Bang2"; }
        case (SND_CHARGE1) { return "Charge1"; }
        case (SND_CHARGE2) { return "Charge2"; }
        case (SND_EXPLOSION1) { return "Explosion1"; }
        case (SND_EXPLOSION2) { return "Explosion2"; }
        case (SND_GAUGE_FULL) { return "GaugeFull"; }
        case (SND_INVINCIBLE) { return "Invincible"; }
        case (SND_ITEM) { return "Item"; }
        case (SND_LASER1) { return "Laser1"; }
        case (SND_LASER2) { return "Laser2"; }
        case (SND_MASTERSPARK) { return "MasterSpark"; }
        case (SND_TT_CANCEL) { return "MenuCancel"; }
        case (SND_TT_DECIDE) { return "MenuDecide"; }
        case (SND_TT_SELECT) { return "MenuSelect"; }
        case (SND_PL_GRAZE) { return "PlayerGraze"; }
        case (SND_PL_HIT) { return "PlayerHit"; }
        case (SND_PL_MISS) { return "PlayerMiss"; }
        case (SND_PL_SHOT) { return "PlayerShot"; }
        case (SND_PL_VULNERABLE) { return "PlayerVulnerable"; }
        case (SND_PL_SPELL) { return "PlayerSpell"; }
        case (SND_SHOT1) { return "Shot1"; }
        case (SND_SHOT2) { return "Shot2"; }
        case (SND_SHOT3) { return "Shot3"; }
        case (SND_SHOT4) { return "Shot4"; }
        case (SND_TRANSITION) { return "Transition"; }
        case (SND_DAMAGE) { return "Damage"; }
        case (SND_DAMAGE_LOW) { return "DamageLow"; }
        case (SND_EXTEND) { return "Extend"; }
        case (SND_TIMER) { return "Timer"; }
        case (SND_TALK) { return "Talk"; }
        case (SND_BOSSTITLE) { return "BossTitle"; }
        case (SND_FIRE) { return "Fire"; }
        //Duplicates
        // case (SND_PL_SPELL_Y1) { return "Yabusame Spell 1"; } //duplicate of Shot2
        // case (SND_PL_SPELL_Y2) { return "Yabusame Spell 2"; } //duplicate of Charge1
        // case (SND_PL_SPELL_T1) { return "Tsubakura Spell 1"; } //duplicate of Charge2
        // case (SND_PL_SPELL_T2) { return "Tsubakura Spell 2"; } //duplicate of Shot4
    }
}