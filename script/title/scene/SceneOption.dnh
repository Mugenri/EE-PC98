//Options Menu
function SceneOption() {
    //Menu Indices
    const INDEX_VOLUME_BGM = 0;
    const INDEX_VOLUME_SFX = 1;
    
    const INDEX_DEFAULT = 2;
    const INDEX_QUIT = 3;

    let exitFlag = false;

    let selectMax = INDEX_QUIT;
    let indexCurrent = 0;

    let forbidIndex = [];

    CreateMenuGraphicsOption();

    //Set up the menu
    let commonName = ["BGM_Volume", "SFX_Volume"]; //common area names
    local {
        let menuX = 460;
        let menuY = 280;
        let yOffset = 15;
        let texts = ["BGM Volume    ", "SFX Volume    ", "Default", "Quit"]; //volume given more space to accomodate a space and 3 extra characters (volume numbers)
        ascent(i in 0..selectMax + 1) {
            CreateMenuItemOption(i, menuX, menuY, 0, yOffset, texts[i]);
            menuY += yOffset;
        }
    }

    //no fade from previous menu, so no wait time
    WaitKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        let userKey = CheckKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax, forbidIndex);
        }
        case (VK_DOWN) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax, forbidIndex);
        }
        case (VK_LEFT) {
            if (indexCurrent == INDEX_VOLUME_BGM || indexCurrent == INDEX_VOLUME_SFX) {
                IncrementVolume(indexCurrent, -5);
                CallSFX(SND_TT_SELECT);
            }
        }
        case (VK_RIGHT) {
            if (indexCurrent == INDEX_VOLUME_BGM || indexCurrent == INDEX_VOLUME_SFX) {
                IncrementVolume(indexCurrent, 5);
                CallSFX(SND_TT_SELECT);
            }
        }
        case (VK_OK) {
            MenuSelect();
            if (indexCurrent == INDEX_DEFAULT) {
                LoadConfig(true);
            }
            if (indexCurrent == INDEX_QUIT) {
                SaveConfig();
                break;
            }
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            indexCurrent = INDEX_QUIT;
        }
    }
    exitFlag = true;

    function MenuSelect() {
        CallSFX(SND_TT_DECIDE);
    }

    task CreateMenuGraphicsOption() {
        let bg = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(bg, IMG_TT_BG);
        Obj_SetRenderPriorityI(bg, RP_UI_BG);
        ObjSprite2D_SetSourceRect(bg, 0, 0, 640, 400);
        ObjSprite2D_SetDestRect(bg, 0, 0, 640, 400);

        let yabu = ObjPrim_Create(OBJ_SPRITE_2D);
        ObjPrim_SetTexture(yabu, IMG_TT_YABU);
        Obj_SetRenderPriorityI(yabu, RP_UI_BG);
        ObjSprite2D_SetSourceRect(yabu, 0, 0, 288, 360);
        ObjSprite2D_SetDestRect(yabu, 0, 0, 288, 360);

        ObjRender_SetPosition(yabu, 40, 20, 1);

        while (!exitFlag) {yield;}
        Obj_Delete(bg);
        Obj_Delete(yabu);
    }

    task CreateMenuItemOption(index, x, y, xOff, yOff, text) {
        let objText = CreateText(x + xOff, y + yOff, text, 0xFFFFFFFF);
        let objTextHighlight = CreateText(x + xOff, y + yOff, text, 0xFFFFFF00);
        let objCursor = CreateCursor(ObjRender_GetX(objText) + (ObjText_GetTotalWidth(objText) / 2), ObjRender_GetY(objText) + 8);
        //Align to middle
        ObjRender_SetX(objText, ObjRender_GetX(objText) - ObjText_GetTotalWidth(objText) / 2);
        ObjRender_SetX(objTextHighlight, ObjRender_GetX(objTextHighlight) - ObjText_GetTotalWidth(objTextHighlight) / 2);
        ObjRender_SetX(objCursor, ObjRender_GetX(objCursor) - ObjText_GetTotalWidth(objText) / 2);

        if (index == INDEX_VOLUME_BGM || index == INDEX_VOLUME_SFX) {
            CreateOptionSlider(index);
        }

        //Additional options would go here

        while (!exitFlag) {
            Obj_SetVisible(objTextHighlight, index == indexCurrent);
            Obj_SetVisible(objCursor, index == indexCurrent);
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objTextHighlight);
        Obj_Delete(objCursor);

        task CreateOptionSlider(index) {
            let objSlider = CreateText(x + 8 + ObjText_GetTotalWidth(objText) / 4, y + yOff, "000", 0xFFFFFFFF);
            
            while (!exitFlag) {
                ObjText_SetText(objSlider, IntToString(GetAreaCommonData(AREA_CONFIG, commonName[index], 100)));
                yield;
            }
            Obj_Delete(objSlider);
        }
    }

    function IncrementVolume(index, value) {
        let newValue = clamp(GetAreaCommonData(AREA_CONFIG, commonName[index], 100) + value, 0, 100); 
        SetAreaCommonData(AREA_CONFIG, commonName[index], newValue);
    }

    function SaveConfig() {
        if (IsCommonDataAreaExists("SAVED_CONFIG")) { ClearAreaCommonData("SAVED_CONFIG"); }
		CopyCommonDataArea("SAVED_CONFIG", AREA_CONFIG);
		SaveCommonDataAreaA2("SAVED_CONFIG", SAVE_COMMON_CONFIG);
    }
}