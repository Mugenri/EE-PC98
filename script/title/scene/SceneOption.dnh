//Options Menu
function<void> SceneOption() {
    //Menu Indices
    const int INDEX_VOLUME_BGM = 0;
    const int INDEX_VOLUME_SFX = 1;
    
    const int INDEX_DEFAULT = 2;
    const int INDEX_QUIT = 3;

    bool exitFlag = false;

    int selectMax = INDEX_QUIT;
    int indexCurrent = 0;

    TCreateMenuGraphicsOption();

    //Set up the menu
    string[] commonName = ["BGM_Volume", "SFX_Volume"]; //common data field names
    {
        int menuX = 460;
        int menuY = 280;
        int yOffset = 15;
        string[] texts = ["BGM Volume    ", "SFX Volume    ", "Default", "Quit"]; //volumes given more space to accomodate a space and 3 extra characters (volume numbers)
        ascent (i in 0..selectMax + 1) {
            TCreateMenuItemOption(i, menuX, menuY, 0, yOffset, texts[i]);
            menuY += yOffset;
        }
    }

    //no fade from previous menu, so no wait time
    WaitKeysFree([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
    loop { //Wait for input loop
        int userKey = CheckKeyPressed([VK_UP, VK_LEFT, VK_DOWN, VK_RIGHT, VK_OK, VK_CANCEL, VK_PAUSE]);
        alternative (userKey)
        case (VK_UP) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, -1, 0, selectMax);
        }
        case (VK_DOWN) {
            CallSFX(SND_TT_SELECT);
            indexCurrent = IncrementIndex(indexCurrent, 1, 0, selectMax);
        }
        case (VK_LEFT) {
            if (indexCurrent == INDEX_VOLUME_BGM || indexCurrent == INDEX_VOLUME_SFX) {
                IncrementVolume(indexCurrent, -5);
                CallSFX(SND_TT_SELECT);
            }
        }
        case (VK_RIGHT) {
            if (indexCurrent == INDEX_VOLUME_BGM || indexCurrent == INDEX_VOLUME_SFX) {
                IncrementVolume(indexCurrent, 5);
                CallSFX(SND_TT_SELECT);
            }
        }
        case (VK_OK) {
            MenuSelect();
            if (indexCurrent == INDEX_DEFAULT) CD_LoadConfig(true);
            if (indexCurrent == INDEX_QUIT) {
                SaveConfig();
                break;
            }
        }
        case (VK_CANCEL, VK_PAUSE) {
            CallSFX(SND_TT_CANCEL);
            indexCurrent = INDEX_QUIT;
        }
    }
    exitFlag = true;

    function<void> MenuSelect() {
        CallSFX(SND_TT_DECIDE);
    }

    task TCreateMenuGraphicsOption() {
        int bg = InitSprite2D(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, IMG_TT_BG, RP_UI_BG);

        int yabu = InitSprite2D(0, 0, 288, 360, IMG_TT_YABU, RP_STG_BG);

        ObjRender_SetPosition(yabu, 40, 20, 1);

        while (!exitFlag) yield;
        Obj_Delete(bg);
        Obj_Delete(yabu);
    }

    task TCreateMenuItemOption(int index_, int x_, int y_, int xOff_, int yOff_, string text_) {
        int objText = CreateText(x_ + xOff_, y_ + yOff_, text_, COLOR_WHITE);
        int objCursor = CreateCursor(ObjRender_GetX(objText) + (ObjText_GetTotalWidth(objText) / 2), ObjRender_GetY(objText) + 8);
        //Align to middle
        ObjRender_SetX(objText, ObjRender_GetX(objText) - ObjText_GetTotalWidth(objText) / 2);
        ObjRender_SetX(objCursor, ObjRender_GetX(objCursor) - ObjText_GetTotalWidth(objText) / 2);

        if (index_ == INDEX_VOLUME_BGM || index_ == INDEX_VOLUME_SFX) TCreateOptionSlider(index_);

        //Additional options would go here

        while (!exitFlag) {
            ObjText_SetVertexColor(objText, 0xFF000000 + (index_ == indexCurrent ? COLOR_YELLOW : COLOR_WHITE));
            Obj_SetVisible(objCursor, index_ == indexCurrent);
            yield;
        }
        Obj_Delete(objText);
        Obj_Delete(objCursor);

        task TCreateOptionSlider(int index_) {
            int objSlider = CreateText(x_ + 8 + ObjText_GetTotalWidth(objText) / 4, y_ + yOff_, "000", COLOR_WHITE);
            
            while (!exitFlag) {
                ObjText_SetText(objSlider, IntToString(GetAreaCommonData(AREA_CONFIG, commonName[index_], 100)));
                yield;
            }
            Obj_Delete(objSlider);
        }
    }

    function<void> IncrementVolume(int index_, int value_) {
        int newValue = clamp(GetAreaCommonData(AREA_CONFIG, commonName[index_], 100) + value_, 0, 100); 
        SetAreaCommonData(AREA_CONFIG, commonName[index_], newValue);
    }

    function<void> SaveConfig() {
        if (IsCommonDataAreaExists("SAVED_CONFIG")) { ClearAreaCommonData("SAVED_CONFIG"); }
		CopyCommonDataArea("SAVED_CONFIG", AREA_CONFIG);
		SaveCommonDataAreaA2("SAVED_CONFIG", SAVE_COMMON_CONFIG);
    }
}