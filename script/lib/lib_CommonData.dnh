//Common Data management Library
//Common Data areas
const string AREA_TITLE     = "Title"; //Title Screen
const string AREA_CONFIG    = "Config"; //Options Menu
const string AREA_SAVE      = "SaveData"; //Save Data
const string AREA_SYSTEM    = "System"; //STG System
const string AREA_STAGE     = "Stage"; //Stage Script
const string AREA_REPLAY    = "Replay"; //Replay Values
const string AREA_HIGHSCORE = "HighScore"; //High Score Values
const string AREA_RESULT    = "Result"; //Player Score Records

//Data File Directories
const string DIR_SAVE = GetModuleDirectory() ~ "script/data/";
const string SAVE_COMMON_SAVE   = DIR_SAVE ~ "save.dat";
const string SAVE_COMMON_CONFIG = DIR_SAVE ~ "config.dat";
const string SAVE_COMMON_SCORE  = DIR_SAVE ~ "score.dat";
const string SAVE_COMMON_RESULT = DIR_SAVE ~ "result.dat";

function<void> CD_Init() { //creates common data areas, loads data from files
    //Create Common Data Areas
    CreateCommonDataArea(AREA_TITLE);
    CreateCommonDataArea(AREA_CONFIG);
    CreateCommonDataArea(AREA_SAVE);
    CreateCommonDataArea(AREA_SYSTEM);
    CreateCommonDataArea(AREA_STAGE);
    CreateCommonDataArea(AREA_REPLAY);
    CreateCommonDataArea(AREA_HIGHSCORE);
	CreateCommonDataArea(AREA_RESULT);

    //Load save data from file (extra stage unlocks, heard music, etc)
    LoadCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE);

    //Load player config from file
    CD_LoadConfig(false);

    //load high scores from file
    LoadCommonDataAreaA2(AREA_HIGHSCORE, SAVE_COMMON_SCORE);

    //load in result (player score list)
    LoadCommonDataAreaA2(AREA_RESULT, SAVE_COMMON_RESULT);

    //Unlock Extra for Yabusame. This is specific to this game only. Delete this for other projects.
    CD_SetExtraStageFlag(PLAYER_YABUSAME);
}

function<void> CD_LoadConfig(bool loadDefault_) { //load config settings from file, otherwise create file. also supports resetting options with loadDefault_
    bool saveFile = LoadCommonDataAreaA2("SAVED_CONFIG", SAVE_COMMON_CONFIG);
    if (IsCommonDataAreaExists(AREA_CONFIG)) ClearAreaCommonData(AREA_CONFIG);
    if (loadDefault_) saveFile = false;
    if (saveFile) { //load from save file
		CopyCommonDataArea(AREA_CONFIG, "SAVED_CONFIG");
		SetAreaCommonData(AREA_CONFIG, "VERSION", GAME_VERSION);
    } else { //default options, create save file
        SetAreaCommonData(AREA_CONFIG, "BGM_Volume", 100);
        SetAreaCommonData(AREA_CONFIG, "SFX_Volume", 100);
        CopyCommonDataArea("SAVED_CONFIG", AREA_CONFIG);
    }
}

function<void> CD_SaveAll() {
    SaveCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE);
    SaveCommonDataAreaA2(AREA_HIGHSCORE, SAVE_COMMON_SCORE);
    SaveCommonDataAreaA2(AREA_RESULT, SAVE_COMMON_RESULT);
}
function<void> CD_SaveData() {
    SaveCommonDataAreaA2(AREA_SAVE, SAVE_COMMON_SAVE);
}
function<void> CD_SaveScore() {
    SaveCommonDataAreaA2(AREA_HIGHSCORE, SAVE_COMMON_SCORE);
}
function<void> CD_SaveResult() {
    SaveCommonDataAreaA2(AREA_RESULT, SAVE_COMMON_RESULT);
}
//----------------------------------------------------
//General Functions
//----------------------------------------------------
//add the given value to the common data area and field
function<void> CD_AddAreaCommonData(string area_, string field_, int amount_, int default_) {
    SetAreaCommonData(area_, field_, GetAreaCommonData(area_, field_, default_) + amount_);
}
//Stage clear status
// function<void> CD_SetStageClearFlag(int stageIndex_, int player_, int diff_) {
//     SetAreaCommonData(AREA_SAVE, "StageClear_" ~ IntToString(stageIndex_) ~ "_" ~ IntToString(player_) ~ "_" ~ IntToString(diff_), true);
// }
// function<bool> CD_GetStageClearFlag(int stageIndex_, int player_, int diff_) {
//     return GetAreaCommonData(AREA_SAVE, "StageClear_" ~ IntToString(stageIndex_) ~ "_" ~ IntToString(player_) ~ "_" ~ IntToString(diff_), false);
// }
//Game clear status
function<void> CD_SetGameClearFlag(int player_, int diff_) {
    SetAreaCommonData(AREA_SAVE, "GameClear_" ~ IntToString(player_) ~ "_" ~ IntToString(diff_), true);
}
function<bool> CD_GetGameClearFlag(int player_, int diff_) {
    return GetAreaCommonData(AREA_SAVE, "GameClear_" ~ IntToString(player_) ~ "_" ~ IntToString(diff_), false);
}
//Unlock extra stage
function<void> CD_SetExtraStageFlag(int player_) {
    SetAreaCommonData(AREA_SAVE, "Extra_" ~ IntToString(player_), true);
}
function<bool> CD_GetExtraStageFlag(int player_) {
    return GetAreaCommonData(AREA_SAVE, "Extra_" ~ IntToString(player_), false);
}
//Music room track unlocks
function<void> CD_SetBGMHeard(int trackID_) {
    SetAreaCommonData(AREA_SAVE, "Music_" ~ IntToString(trackID_), true);
}
function<bool> CD_GetBGMHeard(int trackID_) {
    return GetAreaCommonData(AREA_SAVE, "Music_" ~ IntToString(trackID_), false);
}