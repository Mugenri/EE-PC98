//General Game systems library
#include "./lib_CommonData.dnh"
#include "./lib_Constant.dnh"

//----------------------------------------------------
//GENERAL FUNCTIONS
//----------------------------------------------------
function GetStageScriptID() { return(GetAreaCommonData(AREA_TITLE, "SCRIPT_STAGE", -1)); }
function GetPlayMode() { return(GetAreaCommonData(AREA_TITLE, "PlayMode", GAME_NONE)); }
function GetDifficulty() { return(GetAreaCommonData(AREA_TITLE, "Difficulty", D_EASY)); }

function StartDialogueScript(path) { NotifyEvent(GetStageScriptID(), EV_DIALOGUE_START, path); }
//----------------------------------------------------
//MUSIC AND SOUND FUNCTIONS
//----------------------------------------------------
function GetAudioScriptID() { return(GetAreaCommonData(AREA_TITLE, "SCRIPT_AUDIO", -1)); }
// --- BGM Functions --- //
//Play track
function StartBGM(trackID, fade, delay) { NotifyEvent(GetAudioScriptID(), EV_PLAY_BGM, [trackID, fade, delay]); }
//Pause track
function StopBGM() { NotifyEvent(GetAudioScriptID(), EV_STOP_BGM, true); }
//Resume track
function RestartBGM() { NotifyEvent(GetAudioScriptID(), EV_STOP_BGM, false); }
//Reset track
function ClearBGM() { NotifyEvent(GetAudioScriptID(), EV_PLAY_BGM, [-1, 0, 0]); }

function GetBGMVolume() { return(GetAreaCommonData(AREA_CONFIG, "BGM_Volume", 100)); }

// --- SFX Functions --- //
function CallSFX(soundID) { NotifyEvent(GetAudioScriptID(), EV_PLAY_SFX, soundID); }

function GetSFXVolume() { return(GetAreaCommonData(AREA_CONFIG, "SFX_Volume", 100)); }

//----------------------------------------------------
//MENU KEY FUNCTIONS
//----------------------------------------------------
function CheckKeyPressed(keys) { //waits and returns the first key to be pressed in the passed list of keys
    let keyCount = length(keys);
    let keyValue = GetCommonData("key", -1); //last held key
    let holdKey = GetCommonData("hold", 0);

    loop {
        while (holdKey > 0) {
            if (GetVirtualKeyState(keyValue) == KEY_PUSH || GetVirtualKeyState(keyValue) == KEY_HOLD) { //check if key is being held still
                holdKey += 1;
            } else { //if not, reset
                holdKey = 0;
                SetCommonData("key", -1);
                SetCommonData("hold", 0);
            }
            if (holdKey > 30) { //if held long enough, pass most recent key value and set hold value
                SetCommonData("hold", 20);
                return keyValue;
            }
            yield;
        }
        //key wasn't held before entering function or held key was released
        ascent(i in 0..keyCount) {
            if (GetVirtualKeyState(keys[i]) == KEY_PUSH || GetVirtualKeyState(keys[i]) == KEY_HOLD) {
                keyValue = keys[i];
                SetCommonData("key", keyValue);
                SetCommonData("hold", 1);
                return keyValue;
            }
        }
        yield;
    }
}

function WaitKeysFree(keys) { //Wait for the list of keys passed to all be unpressed
    let keyCount = length(keys);
    loop {
        let keysFree = true;
        ascent(i in 0..keyCount) {
            if (GetVirtualKeyState(keys[i]) != KEY_FREE) {
                keysFree = false;
            }
        }
        if (keysFree) {
            break;
        }
        yield;
    }
}

//Achievement get function?