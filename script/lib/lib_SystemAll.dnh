//General Game systems library
#include "./lib_CommonData.dnh"
#include "./lib_Constant.dnh"

//----------------------------------------------------
//GENERAL FUNCTIONS
//----------------------------------------------------
function<int> GetPackageStageScriptID() { return GetAreaCommonData(AREA_TITLE, "SCRIPT_STAGE", -1); }
function<int> GetStageScriptID() { return GetAreaCommonData(AREA_STAGE, "SCRIPT_STAGE", -1); }
//Stage Info
function<int> GetGameMode() { return GetAreaCommonData(AREA_TITLE, "GameMode", GAME_NONE); } //main/extra, spell practice
function<int> GetPlayerType() { return GetAreaCommonData(AREA_TITLE, "PlayerType", 0); }
function<int> GetDifficulty() { return GetAreaCommonData(AREA_TITLE, "Difficulty", D_EASY); }
function<int> GetStageIndex() { return GetAreaCommonData(AREA_TITLE, "StageIndex", -1); } //currently running stage
function<int> GetSpellPracticeID() { return GetAreaCommonData(AREA_TITLE, "SpellPracticeID", -1); } //selected spell to play in spell practice
function<int> GetStartingLives() { return GetAreaCommonData(AREA_CONFIG, "StartingLives", 2); }
//Stage control stuff
function<void> SetPauseEnable(bool enable_) { NotifyEvent(GetPackageStageScriptID(), EV_PAUSE_ENABLE, enable_); }
function<void> StartDialogueScript(string path_) {
    NotifyEvent(GetPackageStageScriptID(), EV_STAGE_EVENT, STAGE_DIALOGUE, path_);
    yield; //bgm will play if called immediately after this function without this yield
}
//Replay Info
function<int> GetReplayIndex() { return GetAreaCommonData(AREA_TITLE, "ReplayIndex", -1); }
function<var> GetReplayVersion(int index_) { return GetReplayUserData(index_, "VERSION"); }
function<int> GetReplayGameMode(int index_) { return GetReplayUserData(index_, "GameMode"); }
function<int> GetReplayPlayerType(int index_) { return GetReplayUserData(index_, "PlayerType"); }
function<int> GetReplayDifficulty(int index_) { return GetReplayUserData(index_, "Difficulty"); }
function<int> GetReplayStageIndex(int index_) { return GetReplayUserData(index_, "StageIndex"); }
function<int> GetReplaySpellPracticeID(int index_) { return GetReplayUserData(index_, "SpellPracticeID"); }
function<int> GetReplayStartingLives(int index_) { return GetReplayUserData(index_, "StartingLives"); }
//----------------------------------------------------
//MUSIC AND SOUND FUNCTIONS
//----------------------------------------------------
function<int> GetAudioScriptID() { return GetAreaCommonData(AREA_TITLE, "SCRIPT_AUDIO", -1); }
// --- BGM Functions --- //
//Play track
function<void> StartBGM(int trackID_, int fade_, int delay_) {
    int currentID = GetCurrentBGMID(); //for stage bgm text display
    NotifyEvent(GetAudioScriptID(), EV_PLAY_BGM, trackID_, fade_, delay_);
    NotifyEvent(GetStageScriptID(), EV_PLAY_BGM, trackID_, delay_, currentID);
}
//Pause track
function<void> StopBGM() { NotifyEvent(GetAudioScriptID(), EV_STOP_BGM, true); }
//Resume track
function<void> ResumeBGM() { NotifyEvent(GetAudioScriptID(), EV_STOP_BGM, false); }
//Change current track fade
function<void> SetFadeBGM(int fade_) { NotifyEvent(GetAudioScriptID(), EV_SET_FADE_BGM, fade_); }
//Reset track
function<void> ClearBGM() { NotifyEvent(GetAudioScriptID(), EV_PLAY_BGM, -1, 0, 0); }

function<int> GetBGMVolume() { return GetAreaCommonData(AREA_CONFIG, "BGM_Volume", 100); }

function<string> GetBGMName(int trackID_) { return NotifyEvent(GetAudioScriptID(), EV_GET_BGM_NAME, trackID_); }
//Currently playing bgm
function<int> GetCurrentBGMID() { return GetAreaCommonData(AREA_TITLE, "BGM_ID", -1); }

// --- SFX Functions --- //
function<void> CallSFX(int soundID_) { NotifyEvent(GetAudioScriptID(), EV_PLAY_SFX, soundID_); }

function<void> StopSFX() { NotifyEvent(GetAudioScriptID(), EV_STOP_SFX, 0); }

function<int> GetSFXVolume() { return GetAreaCommonData(AREA_CONFIG, "SFX_Volume", 100); }

//----------------------------------------------------
//MENU KEY FUNCTIONS
//----------------------------------------------------
function<int> CheckVirtualKeyPressed(int[] keys_) { //waits and returns the first virtual key to be pressed in the passed list of keys
    int keyCount = length(keys_);
    int keyValue = GetCommonData("key", -1); //last held key
    int holdKey = GetCommonData("hold", 0); //held key time

    loop {
        while (holdKey > 0) {
            if (GetVirtualKeyState(keyValue) == KEY_PUSH || GetVirtualKeyState(keyValue) == KEY_HOLD) { //check if key is being held still
                holdKey += 1;
            } else { //if not, reset
                holdKey = 0;
                SetCommonData("key", -1);
                SetCommonData("hold", 0);
            }
            if (holdKey > 30) { //if held long enough, pass most recent key value and set hold value
                SetCommonData("hold", 24);
                return keyValue;
            }
            yield;
        }
        //key wasn't held before entering function or held key was released
        ascent (i in 0..keyCount) {
            if (GetVirtualKeyState(keys_[i]) == KEY_PUSH || GetVirtualKeyState(keys_[i]) == KEY_HOLD) {
                keyValue = keys_[i];
                SetCommonData("key", keyValue);
                SetCommonData("hold", 1);
                return keyValue;
            }
        }
        yield;
    }
}

function<void> WaitVirtualKeysFree(int[] keys_) { //Wait for the list of virtual keys passed to all be unpressed
    int keyCount = length(keys_);
    loop {
        bool keysFree = true;
        ascent (i in 0..keyCount) {
            if (GetVirtualKeyState(keys_[i]) != KEY_FREE) keysFree = false;
        }
        if (keysFree) break;
        yield;
    }
}

function<int> CheckKeyPressed(int[] keys_) { //waits and returns the first key to be pressed in the passed list of keys
    int keyCount = length(keys_);
    int keyValue = GetCommonData("key", -1); //last held key
    int holdKey = GetCommonData("hold", 0); //held key time

    loop {
        while (holdKey > 0) {
            if (GetKeyState(keyValue) == KEY_PUSH || GetKeyState(keyValue) == KEY_HOLD) { //check if key is being held still
                holdKey += 1;
            } else { //if not, reset
                holdKey = 0;
                SetCommonData("key", -1);
                SetCommonData("hold", 0);
            }
            if (holdKey > 30) { //if held long enough, pass most recent key value and set hold value
                SetCommonData("hold", 20);
                return keyValue;
            }
            yield;
        }
        //key wasn't held before entering function or held key was released
        ascent (i in 0..keyCount) {
            if (GetKeyState(keys_[i]) == KEY_PUSH || GetKeyState(keys_[i]) == KEY_HOLD) {
                keyValue = keys_[i];
                SetCommonData("key", keyValue);
                SetCommonData("hold", 1);
                return keyValue;
            }
        }
        yield;
    }
}

function<void> WaitKeysFree(int[] keys_) { //Wait for the list of keys passed to all be unpressed
    int keyCount = length(keys_);
    loop {
        bool keysFree = true;
        ascent (i in 0..keyCount) {
            if (GetKeyState(keys_[i]) != KEY_FREE) keysFree = false;
        }
        if (keysFree) break;
        yield;
    }
}

//Achievement get function?