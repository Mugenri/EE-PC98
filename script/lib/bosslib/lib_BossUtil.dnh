//Boss utility function library

//OBJECT VALUE FUNCTIONS
//Assigns boss ID string to boss object
function<void> Boss_SetID(int obj_, string ID_) { Obj_SetValueI(obj_, BOSS_ID, ID_); }
function<string> Boss_GetID(int obj_) { return Obj_GetValueDI(obj_, BOSS_ID, "INVALID"); }
//Boss health > 0
function<bool> Boss_Alive(int obj_) {
    if (Obj_IsDeleted(obj_)) return false; 
    return Obj_GetValueDI(obj_, BOSS_ALIVE, true);
}
//Boss bomb barrier currently active?
function<bool> Boss_IsBombBarrier(int obj_) { return Obj_GetValueDI(obj_, BOSS_BOMB_BARRIER, false); }
//Boss position
function<float> Boss_X(int obj_) { return Obj_GetValueDI(obj_, BOSS_X, 0); }
function<float> Boss_Y(int obj_) { return Obj_GetValueDI(obj_, BOSS_Y, 0); }
//Boss life
function<float> Boss_Life(int obj_) { return Obj_GetValueDI(obj_, BOSS_LIFE, 0); }
//Damage ratios
function<void> Boss_SetDamageShot(int obj_, float ratio_) { Obj_SetValueI(obj_, BOSS_DMG_SHOT, ratio_); }
function<float> Boss_GetDamageShot(int obj_) { return Obj_GetValueDI(obj_, BOSS_DMG_SHOT, 100); }
function<void> Boss_SetDamageSpell(int obj_, float ratio_) { Obj_SetValueI(obj_, BOSS_DMG_SPELL, ratio_); }
function<float> Boss_GetDamageSpell(int obj_) { return Obj_GetValueDI(obj_, BOSS_DMG_SPELL, 100); }

//UTILITY FUNCTIONS
//Moves the boss object associated with bossID_ to the position it was located at the end of the last single.
function<void> Boss_GetInitPosition(int obj_) {
    float[] pos = GetAreaCommonData(AREA_STAGE, "Pos_" ~ Boss_GetID(obj_), [0, 0]);
    ObjMove_SetPosition(obj_, pos[0], pos[1]);
}
//Sets the last position of the boss object associated with bossID OR uses bossID directly to be used in the next single.
function<void> Boss_SetInitPosition(var obj_, float x_, float y_) {
    if (typeof(obj_) == VAR_STRING) SetAreaCommonData(AREA_STAGE, "Pos_" ~ obj_, [x_, y_]);
    else SetAreaCommonData(AREA_STAGE, "Pos_" ~ Boss_GetID(obj_), [x_, y_]);
}
//Sets the boss object intersection for 1 frame
function<void> Boss_SetIntersection(int obj_, int toShot_, int toPlayer_) {
    ObjEnemy_SetIntersectionCircleToShot(obj_, ObjMove_GetX(obj_), ObjMove_GetY(obj_), toShot_);
    ObjEnemy_SetIntersectionCircleToPlayer(obj_, ObjMove_GetX(obj_), ObjMove_GetY(obj_), toPlayer_);
}
//Sets another hitbox for obj_ at target_'s location for 1 frame
function<void> Boss_SetIntersection(int obj_, int target_, int toShot_, int toPlayer_) {
    ObjEnemy_SetIntersectionCircleToShot(obj_, ObjMove_GetX(target_), ObjMove_GetY(target_), toShot_);
    ObjEnemy_SetIntersectionCircleToPlayer(obj_, ObjMove_GetX(target_), ObjMove_GetY(target_), toPlayer_);
}
//sets invulnerability of the given boss object
function<void> Boss_SetVulnerable(int obj_, bool isVulnerable_) {
    if (isVulnerable_ && !Boss_IsBombBarrier(obj_) && !_isSurvival) { //if no spell barrier is active and the spell is not a survival spell
        if (_isSpellVulnerable) ObjEnemy_SetDamageRate(obj_, Boss_GetDamageShot(obj_), Boss_GetDamageSpell(obj_));
        else ObjEnemy_SetDamageRate(obj_, Boss_GetDamageShot(obj_), 0.000001);
    } else {
        ObjEnemy_SetDamageRate(obj_, 0.000001, 0.000001); //relates to how invuln sounds are handled, no actual damage is dealt.
    }
}
//checks if player has died/bombed during the current boss scene
function<bool> Boss_IsSpellCaptured() {
    int timer = ObjEnemyBossScene_GetInfo(_objScene, INFO_TIMERF);
    return (ObjEnemyBossScene_GetInfo(_objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(_objScene, INFO_PLAYER_SPELL_COUNT) == 0
        && ((!_isSurvival && timer > 0) || _isSurvival));
}
//Sets boss position indicator at bottom of screen
function<void> Boss_SetIndicator(int parent_) {
    int indicator = InitSprite2D(0, 464, 48, 480, IMG_SYSTEM_UI, RP_UI_OVERLAY);
    ObjSprite2D_SetDestCenter(indicator);

    async {
        while (!Obj_IsDeleted(parent_)) {
            ObjRender_SetPosition(indicator, clamp(ObjMove_GetX(parent_), MIN_X + 24, MAX_X - 24) + 32, MAX_Y + 16, 1); //account for difference in coordinate systems
            Obj_SetVisible(indicator, Obj_IsVisible(parent_));
            yield;
        }
        Obj_Delete(indicator);
    }
}

//MOVEMENT FUNCTIONS
//Move randomly in rectangular area
function<void> Boss_MoveInArea(int obj_, float xMin_, float xMax_, float yMin_, float yMax_, int frames_, int interpolation_) {
    ObjMove_SetDestAtFrame(obj_, rand(xMin_, xMax_), rand(yMin_, yMax_), frames_, interpolation_);
}
//Move randomly in circular area
function<void> Boss_MoveInArea(int obj_, float xPos_, float yPos_, float radius_, int frames_, int interpolation_) {
    float angleT = rand(0, 360);
    float dist = rand(0, radius_);
    ObjMove_SetDestAtFrame(obj_, xPos_ + dist * cos(angleT), yPos_ + dist * sin(angleT), frames_, interpolation_);
}