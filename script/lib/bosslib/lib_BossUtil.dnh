//Boss utility function library
//Assigns boss ID string to boss object
function<void> Boss_SetID(int obj_, string ID_) {
    Obj_SetValue(obj_, BOSS_ID, ID_);
}
//Returns boss ID string attached to boss object.
function<string> Boss_GetID(int obj_) {
    return Obj_GetValueD(obj_, BOSS_ID, "INVALID");
}
//Moves the boss object associated with bossID_ to the position it was located at the end of the last single.
function<void> Boss_GetInitPosition(int obj_) {
    real[] pos = GetAreaCommonData(AREA_STAGE, "POS_" ~ Boss_GetID(obj_), [0, 0]);
    ObjMove_SetPosition(obj_, pos[0], pos[1]);
}
//Sets the last position of the boss object associated with bossID OR uses bossID directly to be used in the next single.
function<void> Boss_SetInitPosition(var obj_, real x_, real y_) {
    if (typeof(obj_) == VAR_STRING) SetAreaCommonData(AREA_STAGE, "POS_" ~ obj_, [x_, y_]);
    else SetAreaCommonData(AREA_STAGE, "POS_" ~ Boss_GetID(obj_), [x_, y_]);
}
//Sets the boss object intersection for 1 frame
function<void> Boss_SetIntersection(int obj_, int toShot_, int toPlayer_) {
    ObjEnemy_SetIntersectionCircleToShot(obj_, ObjMove_GetX(obj_), ObjMove_GetY(obj_), toShot_);
    ObjEnemy_SetIntersectionCircleToPlayer(obj_, ObjMove_GetX(obj_), ObjMove_GetY(obj_), toPlayer_);
}
function<void> Boss_SetVulnerable(int obj_, bool isVulnerable_) {
    if (isVulnerable_) ObjEnemy_SetDamageRate(obj_, 100, 100);
    else ObjEnemy_SetDamageRate(obj_, 0.000001, 0.000001);
}
//Sets boss position indicator at bottom of screen
function<void> Boss_SetIndicator(int parent_) {
    int indicator = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(indicator, IMG_SYSTEM_TEXT);
    Obj_SetRenderPriorityI(indicator, RP_UI_OVERLAY);
    ObjSprite2D_SetSourceRect(indicator, 0, 464, 48, 480);
    ObjSprite2D_SetDestCenter(indicator);

    async {
        while (!Obj_IsDeleted(parent_)) {
            ObjRender_SetPosition(indicator, clamp(ObjMove_GetX(parent_), MIN_X + 24, MAX_X - 24) + 32, MAX_Y + 16, 1); //account for difference in coordinate systems
            Obj_SetVisible(indicator, Obj_IsVisible(parent_));
            yield;
        }
        Obj_Delete(indicator);
    }
}
//Call at the end of a single
task Boss_Finalize(int obj_, bool isFinal_) {
    real xPos = ObjMove_GetX(obj_);
    real yPos = ObjMove_GetY(obj_);
    SetAreaCommonData(AREA_STAGE, "POS_BONUS", [xPos, yPos]); //Spell bonus yellow ascii text position
    _objScene = GetEnemyBossSceneObjectID();
    bool isSpell = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_SPELL);
    bool isCapture = ObjEnemyBossScene_GetInfo(_objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(_objScene, INFO_PLAYER_SPELL_COUNT) > 0 ? false : true;

    if (isFinal_) {
        SetPlayerInvincibilityFrame(60);
        Particle_RandomExplosionBig(xPos, yPos); //this function is blocking
        Obj_SetVisible(obj_, false);
        StartSlow(TARGET_ALL, 30);
    } else {
        Particle_RandomExplosionSmall(xPos, yPos);
    }

    //Items and Bullet Cancel score values (only for spell cards)
    int scoreTotal = 0;
    if (isCapture && isSpell) {
        int score = 10;
        int scoreBonus = 10;
        int numBullets = 0;
        real radius = 200;
        loop (5) {
            for each (shot in GetShotIdInCircleA2(MID_X, MID_Y - GetStgFrameHeight() / 2, radius, TARGET_ENEMY)) {
                if (ObjMove_GetX(shot) < -16 || ObjMove_GetX(shot) > GetStgFrameWidth() + 16 || ObjMove_GetY(shot) < -16 || ObjMove_GetY(shot) > GetStgFrameHeight() + 16) {
                    continue; //no items spawn off screen
                } else if (radius == 600) { //assign shot score bonus, only runs on final loop
                    Obj_SetValueI(shot, SHOT_SCORE, score);
                    scoreTotal += score;
                    score += scoreBonus;
                    scoreBonus += 10;
                    score = clamp(score, 0, 12800);
                }
                if (numBullets < 40 && Obj_GetType(shot) == OBJ_SHOT && rand_int(1, 4) == 1) { //random <= 40 bullets drop point items
                    Obj_SetValueI(shot, SHOT_DROP_ITEM, true);
                    numBullets++;
                }
            }
            radius += 100;
        }
    } else {
        scoreTotal = -1;
    }
    DeleteShotAll(TYPE_ALL, TYPE_ITEM); //Delete to item for score text
    if (isSpell) NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_CANCEL_BONUS, scoreTotal); //Shot cancel bonus text
    wait(64); //explosion time
    StopSlow(TARGET_ALL);
    wait(60);
    //Setup boss init position for next single
    xPos = ObjMove_GetX(obj_);
    yPos = ObjMove_GetY(obj_);
    Boss_SetInitPosition(obj_, xPos, yPos);
    Obj_Delete(obj_);
    //Close script
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
}