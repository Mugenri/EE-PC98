//Boss utility function library
//Assigns boss ID string to boss object
function<void> Boss_SetID(int obj_, string ID_) {
    Obj_SetValue(obj_, BOSS_ID, ID_);
}
//Returns boss ID string attached to boss object.
function<string> Boss_GetID(int obj_) {
    return Obj_GetValueD(obj_, BOSS_ID, "INVALID");
}
//Moves the boss object associated with bossID_ to the position it was located at the end of the last single.
function<void> Boss_InitPosition(int obj_) {
    real[] pos = GetAreaCommonData(AREA_STAGE, "POS_" ~ Boss_GetID(obj_), [0, 0]);
    ObjMove_SetPosition(obj_, pos[0], pos[1]);
}
//Sets the last position of the boss object associated with bossID OR uses bossID directly to be used in the next single.
function<void> Boss_SetInitPosition(var obj_, real x_, real y_) {
    if (typeof(obj_) == VAR_STRING) SetAreaCommonData(AREA_STAGE, "POS_" ~ obj_, [x_, y_]);
    else SetAreaCommonData(AREA_STAGE, "POS_" ~ Boss_GetID(obj_), [x_, y_]);
}
//Sets the boss object intersection for 1 frame
function<void> Boss_Intersection(int obj_, int toShot_, int toPlayer_) {
    ObjEnemy_SetIntersectionCircleToShot(obj_, ObjMove_GetX(obj_), ObjMove_GetY(obj_), toShot_);
    ObjEnemy_SetIntersectionCircleToPlayer(obj_, ObjMove_GetX(obj_), ObjMove_GetY(obj_), toPlayer_);
}
//Check if boss has health
function<bool> Boss_CheckAlive(int obj_) {
    return ObjEnemy_GetInfo(obj_, INFO_LIFE) > 0;
}
//Call at the end of a single
task Boss_Finalize(int obj_) {
    real xPos = ObjMove_GetX(obj_);
    real yPos = ObjMove_GetY(obj_);
    SetAreaCommonData(AREA_STAGE, "POS_BONUS", [xPos, yPos]); //Spell bonus yellow ascii text position
    _objScene = GetEnemyBossSceneObjectID();
    bool isCapture = true;
    bool isSpell = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_SPELL);
    if (ObjEnemyBossScene_GetInfo(_objScene, INFO_PLAYER_SHOOTDOWN_COUNT) + ObjEnemyBossScene_GetInfo(_objScene, INFO_PLAYER_SPELL_COUNT) > 0) isCapture = false;

    //TODO explosion effects
    //yield here or something while final explosion is happening

    //Items and Bullet Cancel score values (only for spell cards)
    int scoreTotal = 0;
    if (isCapture && isSpell) {
        int score = 10;
        int scoreBonus = 10;
        int numBullets = 0;
        real radius = 200;
        loop (5) {
            for each (shot in GetShotIdInCircleA2(MID_X, MID_Y - GetStgFrameHeight() / 2, radius, TARGET_ENEMY)) {
                if (ObjMove_GetX(shot) < -16 || ObjMove_GetX(shot) > GetStgFrameWidth() + 16 || ObjMove_GetY(shot) < -16 || ObjMove_GetY(shot) > GetStgFrameHeight() + 16) {
                    continue; //no items spawn off screen
                } else if (radius == 600) { //assign shot score bonus, only runs on final loop
                    Obj_SetValueI(shot, SHOT_SCORE, score);
                    scoreTotal += score;
                    score += scoreBonus;
                    scoreBonus += 10;
                    score = clamp(score, 0, 12800);
                }
                if (numBullets < 40 && Obj_GetType(shot) == OBJ_SHOT && rand_int(1, 4) == 1) { //random <= 40 bullets drop point items
                    Obj_SetValueI(shot, SHOT_DROP_ITEM, true);
                    numBullets++;
                }
            }
            radius += 100;
        }
    } else {
        scoreTotal = -1;
    }
    DeleteShotAll(TYPE_ALL, TYPE_ITEM); //Delete to item for score text
    if (isSpell) NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_CANCEL_BONUS, scoreTotal); //Shot cancel bonus text
    wait(120);
    //Setup boss init position for next single
    xPos = ObjMove_GetX(obj_);
    yPos = ObjMove_GetY(obj_);
    Boss_SetInitPosition(obj_, xPos, yPos);
    Obj_Delete(obj_);
    //Close script
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
}