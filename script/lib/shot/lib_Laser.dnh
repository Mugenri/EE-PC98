//Custom laser behavior library

function<int> CreateLooseLaserUA1(real x_, real y_, real speed_, real angle_, real maxLength_, int color_, int delay_) {
    //Object Creation
    //Hitbox and position/angle
    int time = 550/speed_ + maxLength_/speed_; //rough amount of frames it will take the laser to leave the screen (550px is hypotenuse of stg window)
    int hitbox = CreateStraightLaserA1(x_, y_, angle_, 0, 12, time, 1, delay_);
    Obj_SetValueI(hitbox, SHOT_CANCEL, true);
    ObjLaser_SetInvalidLength(hitbox, 0, 0);
    Obj_SetVisible(hitbox, false);
    //colored
    int circle1 = CreateCircle(true);
    int line1 = CreateLine(true);
    //white
    int circle2 = CreateCircle(false);
    int line2 = CreateLine(false);

    //Update loop 
    async {
        wait(delay_);
        Obj_SetVisible(circle1, true);
        Obj_SetVisible(line1, true);
        Obj_SetVisible(circle2, true);
        Obj_SetVisible(line2, true);

        real laserLength = 0;
        real x = ObjMove_GetX(hitbox);
        real y = ObjMove_GetY(hitbox);
        real angle = ObjStLaser_GetAngle(hitbox);
        bool full = false;

        while (!Obj_IsDeleted(hitbox)) {
            x = ObjMove_GetX(hitbox);
            y = ObjMove_GetY(hitbox);
            angle = ObjStLaser_GetAngle(hitbox);
            if (laserLength < maxLength_) {
                laserLength = min(laserLength + speed_, maxLength_);
                ObjLaser_SetLength(hitbox, laserLength);
                UpdateCircle(x, y);
            } else if (!full) {
                full = true;
                Obj_Delete(circle1);
                Obj_Delete(circle2);
            }
            
            if (full) {
                x += speed_ * cos(angle);
                y += speed_ * sin(angle);
                ObjMove_SetX(hitbox, x);
                ObjMove_SetY(hitbox, y);
            }

            UpdateLine(x, y, angle, laserLength);
            yield;
        }

        if (!Obj_IsDeleted(circle1)) Obj_Delete(circle1);
        if (!Obj_IsDeleted(circle2)) Obj_Delete(circle2);
        Obj_Delete(line1);
        Obj_Delete(line2);

        function<void> UpdateCircle(real x_, real y_) {
            //all circles' positions are casted as integers so their shape is the same regardless of location on screen
            ObjPrim_SetVertexPosition(circle1, 0, as_int(x_), as_int(y_), 1); //colored
            ascent (i in 1..14) {
                real angleT = 360/12 * i;
                ObjPrim_SetVertexPosition(circle1, i, as_int(x_) + 6 * cos(angleT), as_int(y_) + 6 * sin(angleT), 1);
            }
            ObjPrim_SetVertexPosition(circle2, 0, as_int(x_), as_int(y_), 1); //white
            ascent (i in 1..14) {
                real angleT = 360/12 * i;
                ObjPrim_SetVertexPosition(circle2, i, as_int(x_) + 4 * cos(angleT), as_int(y_) + 4 * sin(angleT), 1);
            }
        }

        function<void> UpdateLine(real x_, real y_, real angle_, real length_) {
            //colored
            ObjPrim_SetVertexPosition(line1, 0, x_ + 4 * cos(angle_ + 90), y_ + 4 * sin(angle_ + 90), 1);
            ObjPrim_SetVertexPosition(line1, 1, x_ + 4 * cos(angle_ - 90), y_ + 4 * sin(angle_ - 90), 1);
            ObjPrim_SetVertexPosition(line1, 2, x_ + 4 * cos(angle_ + 90) + length_ * cos(angle_), y_ + 4 * sin(angle_ + 90) + length_ * sin(angle_), 1);
            ObjPrim_SetVertexPosition(line1, 3, x_ + 4 * cos(angle_ - 90) + length_ * cos(angle_), y_ + 4 * sin(angle_ - 90) + length_ * sin(angle_), 1);
            //white
            ObjPrim_SetVertexPosition(line2, 0, x_ + 2 * cos(angle_ + 90), y_ + 2 * sin(angle_ + 90), 1);
            ObjPrim_SetVertexPosition(line2, 1, x_ + 2 * cos(angle_ - 90), y_ + 2 * sin(angle_ - 90), 1);
            ObjPrim_SetVertexPosition(line2, 2, x_ + 2 * cos(angle_ + 90) + length_ * cos(angle_), y_ + 2 * sin(angle_ + 90) + length_ * sin(angle_), 1);
            ObjPrim_SetVertexPosition(line2, 3, x_ + 2 * cos(angle_ - 90) + length_ * cos(angle_), y_ + 2 * sin(angle_ - 90) + length_ * sin(angle_), 1);
        }
    }

    return hitbox;

    function<int> CreateCircle(bool colored_) {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
        ObjPrim_SetVertexCount(obj, 14);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        Obj_SetVisible(obj, false);
        //set color
        int color = colored_ ? color_ : COLOR_WHITE;
        ascent (i in 0..14) {
        ObjPrim_SetVertexColor(obj, i, color);
        }
        return obj;
    }

    function<int> CreateLine(bool colored_) {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
        ObjPrim_SetVertexCount(obj, 4);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        Obj_SetVisible(obj, false);
        //set color
        int color = colored_ ? color_ : COLOR_WHITE;
        ascent (i in 0..4) {
            ObjPrim_SetVertexColor(obj, i, color);
        }
        return obj;
    }
}

function<int> CreateStraightLaserUA1(real x_, real y_, real angle_, real length_, real sustain_, int color_, int delay_) {
    //Object Creation
    //Hitbox and position/angle
    int hitbox = CreateStraightLaserA1(x_, y_, angle_, length_, 16, sustain_, 1, delay_);
    Obj_SetValueI(hitbox, SHOT_CANCEL, false);
    ObjLaser_SetInvalidLength(hitbox, 0, 0);
    Obj_SetVisible(hitbox, false);
    //colored
    int circle1 = CreateCircle(true);
    int line1 = CreateLine(true);
    //white
    int circle2 = CreateCircle(false);
    int line2 = CreateLine(false);
    //delay laser
    int guide1 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(guide1, PRIMITIVE_LINESTRIP);
    ObjPrim_SetVertexCount(guide1, 2);
    Obj_SetRenderPriorityI(guide1, RP_STG_LASER);
    //delay laser origin
    int guide2 = CreateCircle(false);
    Obj_SetVisible(guide2, true);

    //Update loop 
    async {
        real radius = 0.5; //radius of white part
        loop (max(0, delay_ - 9)) {
            if (Obj_IsDeleted(hitbox)) break;
            UpdatePosition(0);
            yield;
        }
        Obj_SetVisible(circle1, true);
        Obj_SetVisible(line1, true);
        Obj_SetVisible(circle2, true);
        Obj_SetVisible(line2, true);
        //declared in this scope so they can be stored if the hitbox is deleted before the laser animation is completed
        real angle = ObjStLaser_GetAngle(hitbox);
        real len = ObjLaser_GetLength(hitbox);
        while (radius <= 2) { //expand laser
            loop (3) {
                if (Obj_IsDeleted(hitbox)) break;
                UpdatePosition(radius);
                yield;
            }
            radius *= 2;
        }
        loop (sustain_) {
            if (Obj_IsDeleted(hitbox)) break;
            UpdatePosition(3);
            yield;
        }
        if (!Obj_IsDeleted(hitbox)) ObjShot_SetIntersectionEnable(hitbox, false);
        if (radius > 2) radius = 2;
        while (radius >= 0.5) { //contract laser
            loop (3) {
                UpdatePosition(radius);
                yield;
            }
            radius /= 2;
        }

        Obj_Delete(guide1);
        Obj_Delete(guide2);
        Obj_Delete(circle1);
        Obj_Delete(line1);
        Obj_Delete(circle2);
        Obj_Delete(line2);

        function<void> UpdatePosition(int radius_) {
            if (!Obj_IsDeleted(hitbox)) {
                x_ = ObjMove_GetX(hitbox);
                y_ = ObjMove_GetY(hitbox);
                angle = ObjStLaser_GetAngle(hitbox);
                len = ObjLaser_GetLength(hitbox);
            }
            //delay laser
            if (!Obj_IsDeleted(guide1)) {
                ObjPrim_SetVertexPosition(guide1, 0, x_, y_, 1);
                ObjPrim_SetVertexPosition(guide1, 1, x_ + len * cos(angle), y_ + len * sin(angle), 1);
            }
            //all circles' positions are casted as integers so their shape is the same regardless of location on screen
            //delay laser bulb
            ObjPrim_SetVertexPosition(guide2, 0, as_int(x_), as_int(y_), 1);
            ascent (i in 1..14) {
                real angleT = 360/12 * i;
                ObjPrim_SetVertexPosition(guide2, i, as_int(x_) + 2 * cos(angleT), as_int(y_) + 2 * sin(angleT), 1);
            }
            //circles
            ObjPrim_SetVertexPosition(circle1, 0, as_int(x_), as_int(y_), 1); //colored
            ascent (i in 1..14) {
                real angleT = 360/12 * i;
                ObjPrim_SetVertexPosition(circle1, i, as_int(x_) + (radius_ * 2 + 2) * cos(angleT), as_int(y_) + (radius_ * 2 + 2) * sin(angleT), 1);
            }
            ObjPrim_SetVertexPosition(circle2, 0, as_int(x_), as_int(y_), 1); //white
            ascent (i in 1..14) {
                real angleT = 360/12 * i;
                ObjPrim_SetVertexPosition(circle2, i, as_int(x_) + (radius_ * 2) * cos(angleT), as_int(y_) + (radius_ * 2) * sin(angleT), 1);
            }
            //lines
            //colored
            ObjPrim_SetVertexPosition(line1, 0, x_ + (radius_ + 2) * cos(angle + 90), y_ + (radius_ + 2) * sin(angle + 90), 1);
            ObjPrim_SetVertexPosition(line1, 1, x_ + (radius_ + 2) * cos(angle - 90), y_ + (radius_ + 2) * sin(angle - 90), 1);
            ObjPrim_SetVertexPosition(line1, 2, x_ + (radius_ + 2) * cos(angle + 90) + len * cos(angle), y_ + (radius_ + 2) * sin(angle + 90) + len * sin(angle), 1);
            ObjPrim_SetVertexPosition(line1, 3, x_ + (radius_ + 2) * cos(angle - 90) + len * cos(angle), y_ + (radius_ + 2) * sin(angle - 90) + len * sin(angle), 1);
            //white
            ObjPrim_SetVertexPosition(line2, 0, x_ + radius_ * cos(angle + 90), y_ + radius_ * sin(angle + 90), 1);
            ObjPrim_SetVertexPosition(line2, 1, x_ + radius_ * cos(angle - 90), y_ + radius_ * sin(angle - 90), 1);
            ObjPrim_SetVertexPosition(line2, 2, x_ + radius_ * cos(angle + 90) + len * cos(angle), y_ + radius_ * sin(angle + 90) + len * sin(angle), 1);
            ObjPrim_SetVertexPosition(line2, 3, x_ + radius_ * cos(angle - 90) + len * cos(angle), y_ + radius_ * sin(angle - 90) + len * sin(angle), 1);
        }
    }

    return hitbox;

    function<int> CreateCircle(bool colored_) {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
        ObjPrim_SetVertexCount(obj, 14);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        Obj_SetVisible(obj, false);
        //set color
        int color = colored_ ? color_ : COLOR_WHITE;
        ascent (i in 0..14) {
        ObjPrim_SetVertexColor(obj, i, color);
        }
        return obj;
    }

    function<int> CreateLine(bool colored_) {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
        ObjPrim_SetVertexCount(obj, 4);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        Obj_SetVisible(obj, false);
        //set color
        int color = colored_ ? color_ : COLOR_WHITE;
        ascent (i in 0..4) {
            ObjPrim_SetVertexColor(obj, i, color);
        }
        return obj;
    }
}

function<int> CreateCurveLaserUA1(real x_, real y_, real speed_, real angle_, int length_, int color_, int delay_) {
    int hitbox = CreateCurveLaserA1(x_, y_, speed_, angle_, length_, 24, 1, delay_);
    Obj_SetValueI(hitbox, SHOT_CANCEL, false);
    ObjLaser_SetInvalidLength(hitbox, 0, 0);
    Obj_SetVisible(hitbox, false);

    async {
        wait(delay_);
        while (!Obj_IsDeleted(hitbox)) {
            int[] nodes = ObjCrLaser_GetNodePointerList(hitbox);
            for each (node in nodes) {
                real[] pos = ObjCrLaser_GetNodePosition(hitbox, node);
                ObjParticleList_SetPosition(_effectParticle16, pos[0], pos[1], 1);
                ObjParticleList_SetColor(_effectParticle16, color_);
                ObjParticleList_SetExtraData(_effectParticle16, 0, 3, 0);
                ObjParticleList_AddInstance(_effectParticle16);
            }
            yield;
        }
    }
    return hitbox;
}

function<int> MasterSpark(real x_, real y_, real angle_, real length_, real maxWidth_, real sustain_, int colorOut_, int colorIn_, int delay_) {
    //This will fuck up the hitbox if it isn't true.
    if (maxWidth_ > length_) length_ = maxWidth_;
    //Object Creation
    //Hitbox and position/angle
    int controller = CreateStraightLaserA1(x_, y_, angle_, length_, 0, sustain_ + 50, 1, delay_);
    Obj_SetValueI(controller, SHOT_CANCEL, false);
    ObjLaser_SetInvalidLength(controller, 0, 0);
    Obj_SetVisible(controller, false);
    //colorOut
    int circle1 = CreateCircle(colorOut_);
    int line1 = CreateLine(colorOut_);
    //colorIn
    int circle2 = CreateCircle(colorIn_);
    int line2 = CreateLine(colorIn_);
    //white
    int circle3 = CreateCircle(COLOR_WHITE);
    int line3 = CreateLine(COLOR_WHITE);

    //delay laser
    int guide1 = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(guide1, PRIMITIVE_LINESTRIP);
    ObjPrim_SetVertexCount(guide1, 2);
    Obj_SetRenderPriorityI(guide1, RP_STG_LASER);

    //Update loop 
    async {
        int frames = 30; //laser expansion time
        real width = 0;
        loop (delay_) {
            if (Obj_IsDeleted(controller)) break;
            UpdatePosition(0);
            yield;
        }
        Obj_SetVisible(guide1, false);
        Obj_SetVisible(circle1, true);
        Obj_SetVisible(line1, true);
        Obj_SetVisible(circle2, true);
        Obj_SetVisible(line2, true);
        Obj_SetVisible(circle3, true);
        Obj_SetVisible(line3, true);
        //declared in this scope so they can be stored if the controller is deleted before the laser animation is completed
        real angle = ObjStLaser_GetAngle(controller);
        real len = ObjLaser_GetLength(controller);
        //expand laser
        while (width < maxWidth_) {
            if (Obj_IsDeleted(controller)) break;
            UpdatePosition(width / 2); //radius
            width += maxWidth_ / frames;
            yield;
        }
        loop (sustain_) { //hold
            if (Obj_IsDeleted(controller)) break;
            UpdatePosition(width / 2);
            yield;
        }
        //contract laser
        while (width > 0) {
            UpdatePosition(width / 2);
            width -= maxWidth_ / frames;
            yield;
        }
        Obj_Delete(guide1);
        Obj_Delete(circle1);
        Obj_Delete(line1);
        Obj_Delete(circle2);
        Obj_Delete(line2);
        Obj_Delete(circle3);
        Obj_Delete(line3);

        function<void> UpdatePosition(int radius_) {
            real radiusOut = min(radius_ * 1.32, radius_ + 16);
            real radiusIn = min(radius_ * 1.16, radius_ + 8);
            if (!Obj_IsDeleted(controller)) { //update laser position/angle/length if the controller still exists
                x_ = ObjMove_GetX(controller);
                y_ = ObjMove_GetY(controller);
                angle = ObjStLaser_GetAngle(controller);
                len = ObjLaser_GetLength(controller) - radius_; //length of laser after the center of the circular part
            }
            //center of circular part, base of line part
            real x = x_ + radiusOut * cos(angle);
            real y = y_ + radiusOut * sin(angle);
            
            //delay laser
            if (!Obj_IsDeleted(guide1)) {
                ObjPrim_SetVertexPosition(guide1, 0, x, y, 1);
                ObjPrim_SetVertexPosition(guide1, 1, x + len * cos(angle), y + len * sin(angle), 1);
            }
            if (radius_ > 0) {
                SetShotIntersectionCircle(x, y, radius_);
                SetShotIntersectionLine(x, y, x + len * cos(angle), y + len * sin(angle), radius_ * 2);
            }
            //uses half circles to save on vertices but still look smooth at large sizes
            //circles
            ObjPrim_SetVertexPosition(circle1, 0, x, y, 1); //colorOut
            ascent (i in 1..34) {
                real angleT = 360/64 * (i - 1) + angle + 90;
                ObjPrim_SetVertexPosition(circle1, i, x + (radiusOut) * cos(angleT), y + (radiusOut) * sin(angleT), 1);
            }
            ObjPrim_SetVertexPosition(circle2, 0, x, y, 1); //colorIn
            ascent (i in 1..34) {
                real angleT = 360/64 * (i - 1) + angle + 90;
                ObjPrim_SetVertexPosition(circle2, i, x + (radiusIn) * cos(angleT), y + (radiusIn) * sin(angleT), 1);
            }
            ObjPrim_SetVertexPosition(circle3, 0, x, y, 1); //white
            ascent (i in 1..34) {
                real angleT = 360/64 * (i - 1) + angle + 90;
                ObjPrim_SetVertexPosition(circle3, i, x + (radius_) * cos(angleT), y + (radius_) * sin(angleT), 1);
            }
            //lines
            //colorOut
            ObjPrim_SetVertexPosition(line1, 0, x + (radiusOut) * cos(angle + 90), y + (radiusOut) * sin(angle + 90), 1);
            ObjPrim_SetVertexPosition(line1, 1, x + (radiusOut) * cos(angle - 90), y + (radiusOut) * sin(angle - 90), 1);
            ObjPrim_SetVertexPosition(line1, 2, x + (radiusOut) * cos(angle + 90) + len * cos(angle), y + (radiusOut) * sin(angle + 90) + len * sin(angle), 1);
            ObjPrim_SetVertexPosition(line1, 3, x + (radiusOut) * cos(angle - 90) + len * cos(angle), y + (radiusOut) * sin(angle - 90) + len * sin(angle), 1);
            //colorIn
            ObjPrim_SetVertexPosition(line2, 0, x + (radiusIn) * cos(angle + 90), y + (radiusIn) * sin(angle + 90), 1);
            ObjPrim_SetVertexPosition(line2, 1, x + (radiusIn) * cos(angle - 90), y + (radiusIn) * sin(angle - 90), 1);
            ObjPrim_SetVertexPosition(line2, 2, x + (radiusIn) * cos(angle + 90) + len * cos(angle), y + (radiusIn) * sin(angle + 90) + len * sin(angle), 1);
            ObjPrim_SetVertexPosition(line2, 3, x + (radiusIn) * cos(angle - 90) + len * cos(angle), y + (radiusIn) * sin(angle - 90) + len * sin(angle), 1);
            //white
            ObjPrim_SetVertexPosition(line3, 0, x + radius_ * cos(angle + 90), y + radius_ * sin(angle + 90), 1);
            ObjPrim_SetVertexPosition(line3, 1, x + radius_ * cos(angle - 90), y + radius_ * sin(angle - 90), 1);
            ObjPrim_SetVertexPosition(line3, 2, x + radius_ * cos(angle + 90) + len * cos(angle), y + radius_ * sin(angle + 90) + len * sin(angle), 1);
            ObjPrim_SetVertexPosition(line3, 3, x + radius_ * cos(angle - 90) + len * cos(angle), y + radius_ * sin(angle - 90) + len * sin(angle), 1);
        }
    }

    return controller;

    function<int> CreateCircle(int color_) {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLEFAN);
        ObjPrim_SetVertexCount(obj, 34);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        Obj_SetVisible(obj, false);
        //set color
        ascent (i in 0..34) {
        ObjPrim_SetVertexColor(obj, i, color_);
        }
        return obj;
    }

    function<int> CreateLine(int color_) {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
        ObjPrim_SetVertexCount(obj, 4);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        Obj_SetVisible(obj, false);
        //set color
        ascent (i in 0..4) {
            ObjPrim_SetVertexColor(obj, i, color_);
        }
        return obj;
    }
}