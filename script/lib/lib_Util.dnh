//General utility function library

//Move selection index, wrap between min/max, omit forbidden indices
function<int> IncrementIndex(int index_, int amount_, int min_, int max_, int[] forbidden_) {
    index_ += amount_;
    if (index_ < min_) {
        index_ = max_;
    } else if (index_ > max_) {
        index_ = min_;
    }

    //check forbidden
    while (CheckForbidden(index_, forbidden_)) {
        index_ += amount_;
        if (index_ < min_) {
            index_ = max_;
        } else if (index_ > max_) {
            index_ = min_;
        }
    }
    return index_;
}
//overload without forbidden idices
function<int> IncrementIndex(int index_, int amount_, int min_, int max_) {
    return IncrementIndex(index_, amount_, min_, max_, []);
}
//Check if index is forbidden
function<bool> CheckForbidden(int index_, int[] forbidden_) {
    if (length(forbidden_) > 0) {
        ascent (i in 0..length(forbidden_)) {
            if (index_ == forbidden_[i]) return true;
        }
    }
    return false;
}

//Create Text object with pc9800 font
function<int> CreateText(int x_, int y_, int priority_, string text_, int color_) { //color_ is an RGB hex value added to 255 alpha (0xFF000000)
    int obj = ObjText_Create();
    Obj_SetRenderPriorityI(obj, priority_);
    ObjRender_SetPosition(obj, x_, y_, 1);
    ObjText_SetText(obj, text_);
    ObjText_SetFontSize(obj, 16);
    ObjText_SetFontType(obj, SYS_FONT);
    ObjText_SetVertexColor(obj, 0xFF000000 + color_);
    ObjText_SetFontBorderType(obj, BORDER_NONE);
    return obj;
}
//overload with no specified priority
function<int> CreateText(int x_, int y_, string text_, int color_) {
    return CreateText(x_, y_, RP_UI_TEXT, text_, color_);
}

//Initializes a 2D particle list
function<int> InitParticleList(string path_, int priority_, int l_, int t_, int r_, int b_) {
    int obj = ObjParticleList_Create(OBJ_PARTICLE_LIST_2D);
	Obj_SetRenderPriorityI(obj, priority_);
	ObjPrim_SetTexture(obj, path_);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(obj, l_, t_, r_, b_);
	ObjSprite2D_SetDestCenter(obj);
	ObjPrim_SetVertexIndex(obj, [0, 1, 2, 3]);
    return obj;
}
//Allows for asynchronous sprite animation frames of particles
function<void> ParticleListShader(int list_, real floatX_, real floatY_) { //float values are (cell size / image size) of the sprite sheet
    ObjShader_SetShaderF(list_, HLSL_PARTICLE);
    ObjShader_SetTechnique(list_, "Render");
    ObjShader_SetFloat(list_, "STEP_X", floatX_);
    ObjShader_SetFloat(list_, "STEP_Y", floatY_);
}