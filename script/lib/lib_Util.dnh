//General utility function library

//Move selection index, wrap between min/max, omit forbidden indices
function IncrementIndex(index, amount, min, max, forbidden) {
    index += amount;
    if (index < min) {
        index = max;
    } else if (index > max) {
        index = min;
    }

    //check forbidden
    while (CheckForbidden(index, forbidden)) {
        index += amount;
        if (index < min) {
            index = max;
        } else if (index > max) {
            index = min;
        }
    }
    return index;
}
//overload without forbidden idices
function IncrementIndex(index, amount, min, max) {
    return IncrementIndex(index, amount, min, max, []);
}
//Check if index is forbidden
function CheckForbidden(index, forbidden) {
    if (length(forbidden) > 0) {
        ascent(i in 0..length(forbidden)) {
            if (index == forbidden[i]) {return true;}
        }
    }
    return false;
}

//Create Text object with pc9800 font
function CreateText(x, y, priority, text, color) { //color is an ARGB hex value eg. 0xFFFFFFFF
    let obj = ObjText_Create();
    Obj_SetRenderPriorityI(obj, priority);
    ObjRender_SetPosition(obj, x, y, 1);
    ObjText_SetText(obj, text);
    ObjText_SetFontSize(obj, 16);
    ObjText_SetFontType(obj, SYS_FONT);
    ObjText_SetVertexColor(obj, color);
    ObjText_SetFontBorderType(obj, BORDER_NONE);
    return obj;
}
//overload with no specified priority
function CreateText(x, y, text, color) {
    return CreateText(x, y, RP_UI_TEXT, text, color);
}

//Initializes a 2D particle list
function InitParticleList(path, priority, l, t, r, b) {
    let obj = ObjParticleList_Create(OBJ_PARTICLE_LIST_2D);
	Obj_SetRenderPriorityI(obj, priority);
	ObjPrim_SetTexture(obj, path);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(obj, l, t, r, b);
	ObjSprite2D_SetDestCenter(obj);
	ObjPrim_SetVertexIndex(obj, [0, 1, 2, 3]);
    return obj;
}
//Allows for asynchronous sprite animation frames of particles
function ParticleListShader(list, floatX, floatY) { //float values are cell size/image size of the sprite sheet
    ObjShader_SetShaderF(list, HLSL_PARTICLE);
    ObjShader_SetTechnique(list, "Render");
    ObjShader_SetFloat(list, "STEP_X", floatX);
    ObjShader_SetFloat(list, "STEP_Y", floatY);
}