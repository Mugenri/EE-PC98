//General utility function library

//Takes an integer, returns an array containing each digit, pads with 0's
function<int[]> DigitToArray(int digit_, int count_) {
	int[] res = [];
	loop {
		int tnum = trunc(digit_ % 10);
		digit_ /= 10;
		res = [tnum] ~ res;
		if (trunc(digit_) == 0) break;
	}
	loop (max(0, count_ - length(res))) {
		res = [0] ~ res;
	}
	return res;
}
//Doesn't pad with 0's
function<int[]> DigitToArray(int digit_) {
	int[] res = [];
	digit_ = trunc(digit_);
	loop {
		int tnum = trunc(digit_ % 10);
		digit_ /= 10;
		res = [tnum] ~ res;
		if (trunc(digit_) == 0) break;
	}
	return res;
}
//Returns the length of a passed digit.
function<int> GetDigitLength(int digit_) {
    return floor(log10(digit_)) + 1;
}
//Move selection index, wrap between min/max, omit forbidden indices
function<int> IncrementIndex(int index_, int amount_, int min_, int max_, int[] forbidden_) {
    //if index != min or max before adding the amount, clamp to min or max
    index_ = (index_ == min_ || index_ == max_) ? (index_ + amount_) : clamp(index_ + amount_, min_, max_);
    if (index_ < min_) index_ = max_;
    else if (index_ > max_) index_ = min_;

    //check forbidden
    while (CheckForbidden(index_, forbidden_)) {
        index_ += amount_ / (|amount_|); //reduce to +- 1
        if (index_ < min_) index_ = max_;
        else if (index_ > max_) index_ = min_;
    }
    return index_;
}
//overload without forbidden idices
function<int> IncrementIndex(int index_, int amount_, int min_, int max_) {
    return IncrementIndex(index_, amount_, min_, max_, []);
}
//Check if index is forbidden
function<bool> CheckForbidden(int index_, int[] forbidden_) {
    if (length(forbidden_) > 0) {
        ascent (i in 0..length(forbidden_)) {
            if (index_ == forbidden_[i]) return true;
        }
    }
    return false;
}
//Initializes a 2D primitive object texture
function<int> InitPrim2D(int primType_, int vertices_, string texPath_, int priority_) {
    int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjRender_SetTextureFilter(obj, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    ObjPrim_SetPrimitiveType(obj, primType_);
    ObjPrim_SetVertexCount(obj, vertices_);
    Obj_SetRenderPriorityI(obj, priority_);
    ObjPrim_SetTexture(obj, texPath_);
    return obj;
}
//Initializes a 2D primitive object without a texture
function<int> InitPrim2D(int primType_, int vertices_, int priority_) {
    int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjRender_SetTextureFilter(obj, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    ObjPrim_SetPrimitiveType(obj, primType_);
    ObjPrim_SetVertexCount(obj, vertices_);
    Obj_SetRenderPriorityI(obj, priority_);
    return obj;
}
//Initializes a 2D sprite object
function<int> InitSprite2D(int l_, int t_, int r_, int b_, string texPath_, int priority_) {
    int obj = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(obj, texPath_);
    ObjRender_SetTextureFilter(obj, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    ObjSprite2D_SetSourceRect(obj, l_, t_, r_, b_);
    ObjSprite2D_SetDestRect(obj, 0, 0, r_ - l_, b_ - t_);
    Obj_SetRenderPriorityI(obj, priority_);
    return obj;
}
//Initializes a 2D sprite object without a texture
function<int> InitSprite2D(int l_, int t_, int r_, int b_, int priority_) {
    int obj = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjRender_SetTextureFilter(obj, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    ObjSprite2D_SetSourceRect(obj, l_, t_, r_, b_);
    ObjSprite2D_SetDestRect(obj, 0, 0, r_ - l_, b_ - t_);
    Obj_SetRenderPriorityI(obj, priority_);
    return obj;
}
//Initializes a 2D sprite list object
function<int> InitSpriteList2D(string texture_, int priority_) {
    int obj = ObjPrim_Create(OBJ_SPRITE_LIST_2D);
    ObjPrim_SetTexture(obj, texture_);
    ObjRender_SetTextureFilter(obj, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    Obj_SetRenderPriorityI(obj, priority_);
    return obj;
}
//Sets the source and dest rect of a sprite list object
function<void> ObjSpriteList2D_SetSourceDestRect(int obj_, int l_, int t_, int r_, int b_) {
    ObjSpriteList2D_SetSourceRect(obj_, l_, t_, r_, b_);
    ObjSpriteList2D_SetDestRect(obj_, 0, 0, r_ - l_, b_ - t_);
}
//Create Text object with pc9800 font
function<int> CreateText(int x_, int y_, int priority_, string text_, int color_) { //color_ is an RGB hex value added to 255 alpha (0xFF000000)
    int obj = ObjText_Create();
    Obj_SetRenderPriorityI(obj, priority_);
    ObjRender_SetPosition(obj, x_, y_, 1);
    ObjText_SetText(obj, text_);
    ObjText_SetFontSize(obj, 16);
    ObjText_SetFontType(obj, SYS_FONT);
    ObjText_SetVertexColor(obj, 0xFF000000 + color_);
    ObjText_SetFontBorderType(obj, BORDER_NONE);
    return obj;
}
//overload with no specified priority
function<int> CreateText(int x_, int y_, string text_, int color_) {
    return CreateText(x_, y_, RP_UI_TEXT, text_, color_);
}
//Initializes a 2D particle list
function<int> InitParticleList(string path_, int priority_, int[] bounds_) {
    int obj = ObjParticleList_Create(OBJ_PARTICLE_LIST_2D);
	Obj_SetRenderPriorityI(obj, priority_);
	ObjPrim_SetTexture(obj, path_);
    ObjRender_SetTextureFilter(obj, FILTER_NONE, FILTER_NONE, FILTER_NONE);
	ObjRender_SetBlendType(obj, BLEND_ALPHA);
	ObjSprite2D_SetSourceRect(obj, bounds_);
	ObjSprite2D_SetDestCenter(obj); //MUST BE EVEN NUMBERED SPRITES
	ObjPrim_SetVertexIndex(obj, [0, 1, 2, 3]);
    return obj;
}
//Allows for asynchronous sprite animation frames of particles
function<void> ParticleListShader(int list_, float floatX_, float floatY_) { //float values are (cell size / image size) of the sprite sheet
    ObjShader_SetShaderF(list_, HLSL_PARTICLE);
    ObjShader_SetTechnique(list_, "Render");
    ObjShader_SetFloat(list_, "STEP_X", floatX_);
    ObjShader_SetFloat(list_, "STEP_Y", floatY_);
}