//Primitives effect library

function<void> Primitive_ExpandPolygon2D(float x_, float y_, float angle_, float radius_, float maxRadius_, float rotation_, int frames_, int sides_, int color_, bool solid_, int priority_) {
    int polygon = Primitive_CreatePolygon2D(x_, y_, angle_, 0, sides_, color_, solid_, priority_);
    int vertices = ObjPrim_GetVertexCount(polygon);
    int startVertex = vertices == sides_ + 2 ? 1 : 0;
    maxRadius_ -= radius_;
    async {
        loop (frames_) {
            float angleT = angle_;
            for (int i = startVertex; i < vertices; i++) {
                ObjPrim_SetVertexPosition(polygon, i, x_ + radius_ * cos(angleT), y_ + radius_ * sin(angleT), 1);
                angleT += 360 / sides_;
            }
            angle_ += rotation_ / frames_;
            radius_ += maxRadius_ / frames_;
            yield;
        }
        Obj_Delete(polygon);
    }
}
//overload with object
function<void> Primitive_ExpandPolygon2D(int obj_, float angle_, float radius_, float maxRadius_, float rotation_, int frames_, int sides_, int color_, bool solid_, int priority_) {
    int polygon = Primitive_CreatePolygon2D(ObjMove_GetX(obj_), ObjMove_GetY(obj_), angle_, 0, sides_, color_, solid_, priority_);
    int vertices = ObjPrim_GetVertexCount(polygon);
    int startVertex = vertices == sides_ + 2 ? 1 : 0;
    maxRadius_ -= radius_;
    async {
        loop (frames_) {
            float angleT = angle_;
            for (int i = startVertex; i < vertices; i++) {
                ObjPrim_SetVertexPosition(polygon, i, ObjMove_GetX(obj_) + radius_ * cos(angleT), ObjMove_GetY(obj_) + radius_ * sin(angleT), 1);
                angleT += 360 / sides_;
            }
            angle_ += rotation_ / frames_;
            radius_ += maxRadius_ / frames_;
            yield;
        }
        Obj_Delete(polygon);
    }
}

function<void> Primitive_ContractPolygon2D(float x_, float y_, float angle_, float radius_, float rotation_, int frames_, int sides_, int color_, bool solid_, int priority_) {
    int polygon = Primitive_CreatePolygon2D(x_, y_, angle_, radius_, sides_, color_, solid_, priority_);
    int vertices = ObjPrim_GetVertexCount(polygon);
    int startVertex = vertices == sides_ + 2 ? 1 : 0;
    async {
        float initRadius = radius_;
        loop (frames_) {
            float angleT = angle_;
            for (int i = startVertex; i < vertices; i++) {
                ObjPrim_SetVertexPosition(polygon, i, x_ + radius_ * cos(angleT), y_ + radius_ * sin(angleT), 1);
                angleT += 360 / sides_;
            }
            angle_ += rotation_ / frames_;
            radius_ -= initRadius / frames_;
            yield;
        }
        Obj_Delete(polygon);
    }
}
//overload with object
function<void> Primitive_ContractPolygon2D(int obj_, float angle_, float radius_, float rotation_, int frames_, int sides_, int color_, bool solid_, int priority_) {
    int polygon = Primitive_CreatePolygon2D(ObjMove_GetX(obj_), ObjMove_GetY(obj_), angle_, radius_, sides_, color_, solid_, priority_);
    int vertices = ObjPrim_GetVertexCount(polygon);
    int startVertex = vertices == sides_ + 2 ? 1 : 0;
    async {
        float initRadius = radius_;
        loop (frames_) {
            float angleT = angle_;
            for (int i = startVertex; i < vertices; i++) {
                ObjPrim_SetVertexPosition(polygon, i, ObjMove_GetX(obj_) + radius_ * cos(angleT), ObjMove_GetY(obj_) + radius_ * sin(angleT), 1);
                angleT += 360 / sides_;
            }
            angle_ += rotation_ / frames_;
            radius_ -= initRadius / frames_;
            yield;
        }
        Obj_Delete(polygon);
    }
}

function<int> Primitive_CreatePolygon2D(float x_, float y_, float angle_, float radius_, int sides_, int color_, bool solid_, int priority_) {
    int type = solid_ ? PRIMITIVE_TRIANGLEFAN : PRIMITIVE_LINESTRIP;
    int vertices = type == PRIMITIVE_TRIANGLEFAN ? sides_ + 2 : sides_ + 1;
    int startVertex = vertices == sides_ + 2 ? 1 : 0;

    int polygon = InitPrim2D(type, vertices, priority_);

    ObjRender_SetColor(polygon, color_);
    if (startVertex > 0) ObjPrim_SetVertexPosition(polygon, 0, x_, y_, 1);
    for (int i = startVertex; i < vertices; i++) {
        ObjPrim_SetVertexPosition(polygon, i, x_ + radius_ * cos(angle_), y_ + radius_ * sin(angle_), 1);
        angle_ += 360 / sides_;
    }
    return polygon;
}

function<void> Primitive_ScreenFlashFinal() { //boss explosion screen flash
    int mask = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 4, RP_STG_MAX);

    ObjPrim_SetVertexPosition(mask, 0, 0, 0, 1);
    ObjPrim_SetVertexPosition(mask, 1, MAX_X, 0, 1);
    ObjPrim_SetVertexPosition(mask, 2, 0, MAX_Y, 1);
    ObjPrim_SetVertexPosition(mask, 3, MAX_X, MAX_Y, 1);

    ObjRender_SetColor(mask, COLOR_WHITE);

    async { //camera shake
        loop (15) {
            Set2DCameraFocusX(MID_X + (prand_int(0, 1) == 0 ? 1 : -1) * 8);
            Set2DCameraFocusY(MID_Y + (prand_int(0, 1) == 0 ? 1 : -1) * 8);
            yield;
        }
        Set2DCameraFocusX(MID_X);
        Set2DCameraFocusY(MID_Y);
    }

    async { //screen flash
        loop (4) {
            ObjRender_SetAlpha(mask, 0);
            yield;
            ObjRender_SetAlpha(mask, 255 * 0.5);
            yield;
        }
        float alpha = (255 * 0.5);
        int frames = 5;
        loop (frames) {
            alpha -= 255 * 0.5 / frames;
            ObjRender_SetAlpha(mask, alpha);
            wait(2);
        }
        Obj_Delete(mask);
    }
}