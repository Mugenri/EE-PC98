//Particle Effect library

int _effectParticle16;
int _effectParticle64;

function<void> Particle_Init() {
    _effectParticle16 = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_EFF_MID, [0, 0, 16, 16]);
    ParticleListShader(_effectParticle16, 16/512, 16/512);
    _effectParticle64 = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_EFF_MID, [0, 0, 64, 64]);
    ParticleListShader(_effectParticle64, 64/512, 64/512);
}

function<void> Particle_ContractRing(float x_, float y_, float angle_, float radius_, float rotation_, int frames_, int count_, int color_) {
    async {
        float initRadius = radius_;
        loop (frames_) {
            Particle_CreateRing(x_, y_, angle_, radius_, count_, color_);
            angle_ += rotation_ / frames_;
            radius_ -= initRadius / frames_;
            yield;
        }
    }
}

function<void> Particle_CreateRing(float x_, float y_, float angle_, float radius_, int count_, int color_) {
    loop (count_) {
        ObjParticleList_SetPosition(_effectParticle16, x_ + radius_ * cos(angle_), y_ + radius_ * sin(angle_), 1);
        ObjParticleList_SetColor(_effectParticle16, color_);
        ObjParticleList_SetExtraData(_effectParticle16, 3, 0, 0);
        ObjParticleList_AddInstance(_effectParticle16);
        angle_ += 360 / count_;
    }
}

function<void> Particle_ExplosionSmall(float x_, float y_, float radiusW_, float radiusH_, float angle_, int count_) {
    float angleT = 0;
    int frame = 0;
    int frameRate = 5;
    float xStep = radiusW_;
    float yStep = radiusH_;
    async {
        while (frame < 8 * frameRate) {
            loop (count_) {
                float[] pos = Rotate2D(radiusW_ * cos(angleT), radiusH_ * sin(angleT), angle_);
                ObjParticleList_SetPosition(_effectParticle16, x_ + pos[0], y_ + pos[1], 0);
                ObjParticleList_SetExtraData(_effectParticle16, frame / frameRate, 1, 0);
                ObjParticleList_AddInstance(_effectParticle16);

                angleT += 360/count_;
            }
            radiusW_ += xStep;
            radiusH_ += yStep;
            frame++;
            yield;
        }
    }
}

function<void> Particle_ExplosionBig(float x_, float y_) {
    float angleT = 0;
    int frame = 0;
    int frameRate = 4;
    float step = 10;
    float radius = 0;
    async {
        while (frame < 16 * frameRate) {
            loop (16) { //explosion ring
                ObjParticleList_SetPosition(_effectParticle64, x_ + radius * cos(angleT), y_ + radius * sin(angleT), 0);
                ObjParticleList_SetExtraData(_effectParticle64, (frame / frameRate) % 4, 4, 0);
                ObjParticleList_AddInstance(_effectParticle64);

                angleT += 360 / 16;
            }
            //flame ball on boss location
            ObjParticleList_SetPosition(_effectParticle64, x_, y_, 0);
            ObjParticleList_SetExtraData(_effectParticle64, (frame / frameRate / 2i), 5, 0); //half frame rate
            ObjParticleList_AddInstance(_effectParticle64);

            radius += step;
            frame++;
            yield;
        }
    }
}

function<void> Particle_RandomExplosionSmall(float x_, float y_) {
    int type = prand_int(0, 1);
    alternative (type)
    case (0) Particle_ExplosionSmall(x_, y_, 7.5, 7.5, 0, 64); //circle
    case (1) { //random ellipse
        float angleT = prand_int(0, 3) * 45;
        Particle_ExplosionSmall(x_, y_, 10, 5, angleT, 64);
    }
    CallSFX(SND_EXPLOSION1);
}

function<void> Particle_RandomExplosionBig(float x_, float y_) { //each of these should take 40 frames before last explosion
    int type = prand_int(0, 2);
    alternative (type)
    case (0) { //circle & vertical ellipses
        Particle_ExplosionSmall(x_, y_, 7.5, 7.5, 0, 64);
        Particle_ExplosionSmall(x_, y_, 10, 5, 90, 64);
        CallSFX(SND_EXPLOSION1);
        wait(20);
        Particle_ExplosionSmall(x_, y_, 10, 5, 90, 64);
        CallSFX(SND_EXPLOSION1);
        wait(20);
        Particle_ExplosionBig(x_, y_);
        CallSFX(SND_EXPLOSION3);
    }
    case (1) { //crosses
        Particle_ExplosionSmall(x_, y_, 10, 5, 90, 64);
        Particle_ExplosionSmall(x_, y_, 10, 5, 0, 64);
        CallSFX(SND_EXPLOSION1);
        wait(20);
        Particle_ExplosionSmall(x_, y_, 10, 5, 45, 64);
        Particle_ExplosionSmall(x_, y_, 10, 5, 135, 64);
        CallSFX(SND_EXPLOSION1);
        wait(20);
        Particle_ExplosionBig(x_, y_);
        CallSFX(SND_EXPLOSION3);
    }
    case (2) { //fast triple
        Particle_ExplosionSmall(x_, y_, 10, 5, 45, 64);
        CallSFX(SND_EXPLOSION1);
        wait(10);
        Particle_ExplosionSmall(x_, y_, 10, 5, 135, 64);
        CallSFX(SND_EXPLOSION1);
        wait(10);
        Particle_ExplosionSmall(x_, y_, 10, 5, 90, 64);
        CallSFX(SND_EXPLOSION1);
        wait(20);
        Particle_ExplosionBig(x_, y_);
        CallSFX(SND_EXPLOSION3);
    }

    Primitive_ScreenFlashFinal();
}