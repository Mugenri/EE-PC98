//Spell/background transition library

//----------------------------------------------------
//Utility
//----------------------------------------------------
function<void> Transition_ChangeBG(int index_, int transitionTime_) { //change background to selected index with transition graphic time
    NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_BG", -1), EV_CHANGE_BG, index_, transitionTime_);
}

function<int> GetTransitionObject(bool useShader_) { //get a transition effect sprite object
    int transition = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(transition, IMG_EFFECT_TRANSITION);
    ObjRender_SetTextureFilter(transition, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    Obj_SetRenderPriorityI(transition, useShader_ ? RP_STG_TRANSITION1 : RP_STG_TRANSITION2);
    return transition;
}

task TTransitionAnimation(int obj_, int animFrames_, int l_, int t_) { //with shader
    ObjSprite2D_SetDestRect(obj_, 0, 0, MAX_X, MAX_Y);
    int frame = 0;
    loop (animFrames_) {
        ObjSprite2D_SetSourceRect(obj_, l_ + frame * 24, t_, l_ + 24 + frame * 24, t_ + 23);
        frame++;
        wait(5);
    }
    Obj_Delete(obj_);
}

task TTransitionAnimation(int obj_, int index_, int color_, int animFrames_, int cutFrames_, int l_, int t_) { //no shader
    ObjSprite2D_SetDestRect(obj_, 0, 0, MAX_X, MAX_Y);
    ObjRender_SetColor(obj_, color_);
    int frame = 0;
    loop (cutFrames_) { //cut bg after cutFrames_ amount of frames
        ObjSprite2D_SetSourceRect(obj_, l_ + frame * 24, t_, l_ + 24 + frame * 24, t_ + 23);
        frame++;
        wait(5);
    }
    Transition_ChangeBG(index_, 0); //cut
    loop (animFrames_ - cutFrames_) { //rest of animation
        ObjSprite2D_SetSourceRect(obj_, l_ + frame * 24, t_, l_ + 24 + frame * 24, t_ + 23);
        frame++;
        wait(5);
    }
    Obj_Delete(obj_);
}

//----------------------------------------------------
//Effects With Shaders
//----------------------------------------------------
function<void> Transition_Circle(int index_, int delay_) {
    int transition = GetTransitionObject(true);
    Transition_ChangeBG(index_, 85 + delay_);
    wait(delay_);
    TTransitionAnimation(transition, 17, 0, 280);
}

function<void> Transition_Rise(int index_, int delay_) {
    int transition = GetTransitionObject(true);
    Transition_ChangeBG(index_, 60 + delay_);
    wait(delay_);
    TTransitionAnimation(transition, 12, 0, 256);
}

//----------------------------------------------------
//Effects Without Shaders
//----------------------------------------------------
function<void> Transition_Swirl(int index_, int delay_, int color_) {
    int transition = GetTransitionObject(false);
    wait(delay_);
    TTransitionAnimation(transition, index_, color_, 15, 8, 0, 24);
}

function<void> Transition_Tilt(int index_, int delay_, int color_) {
    int transition = GetTransitionObject(false);
    wait(delay_);
    TTransitionAnimation(transition, index_, color_, 16, 8, 0, 0);
}

function<void> Transition_Zoom(int index_, int delay_, int color_) {
    int transition = GetTransitionObject(false);
    wait(delay_);
    TTransitionAnimation(transition, index_, color_, 15, 8, 0, 48);
}