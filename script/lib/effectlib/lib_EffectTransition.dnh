//Spell/background transition library

//----------------------------------------------------
//Utility
//----------------------------------------------------
function<void> Transition_ChangeBG(int index_, int transitionTime_) { //change background to selected index with transition graphic time
    NotifyEvent(GetAreaCommonData(AREA_STAGE, "SCRIPT_BG", -1), EV_CHANGE_BG, index_, transitionTime_);
}

function<int> GetTransitionObject(bool useShader_) { //get a transition effect sprite object
    int transition = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(transition, IMG_EFFECT_TRANSITION);
    ObjRender_SetTextureFilter(transition, FILTER_NONE, FILTER_NONE, FILTER_NONE);
    Obj_SetRenderPriorityI(transition, useShader_ ? RP_STG_TRANSITION1 : RP_STG_TRANSITION2);
    return transition;
}

task TTransitionAnimation(int obj_, int animFrames_, int row_) { //with shader
    ObjSprite2D_SetDestRect(obj_, 0, 0, MAX_X, MAX_Y);
    int frame = 0;
    loop (animFrames_) {
        ObjSprite2D_SetSourceRect(obj_, 512 + frame * 24, row_ * 23, 512 + frame * 24 + 24, row_ * 23 + 23);
        frame++;
        wait(5);
    }
    Obj_Delete(obj_);
}

task TTransitionAnimation(int obj_, int index_, int color_, int animFrames_, int cutFrames_, int row_) { //no shader
    ObjSprite2D_SetDestRect(obj_, 0, 0, MAX_X, MAX_Y);
    ObjRender_SetColor(obj_, color_);
    int frame = 0;
    loop (cutFrames_) { //cut bg after cutFrames_ amount of frames
        ObjSprite2D_SetSourceRect(obj_, frame * 24, row_ * 23, frame * 24 + 24, row_ * 23 + 23);
        frame++;
        wait(5);
    }
    Transition_ChangeBG(index_, 0); //cut
    loop (animFrames_ - cutFrames_) { //rest of animation
        ObjSprite2D_SetSourceRect(obj_, frame * 24, row_ * 23, frame * 24 + 24, row_ * 23 + 23);
        frame++;
        wait(5);
    }
    Obj_Delete(obj_);
}

//Shader
function<void> Transition_Spell(int row_, int index_, int delay_) {
    int frames = [
        11,     //0  Fall
        16,     //1  Circle
        15,     //2  Splash
        12,     //3  Reflect
        15,     //4  Beams
        13,     //5  Slice
        14,     //6  Twist
        16,     //7  Star
        15,     //8  Wave
        13,     //9  Tiles
        15,     //10 Flare
        15,     //11 Squares
        20,     //12 Senri
        17,     //13 Heart
        12,     //14 Coin
        11,     //15 Chess
        19,     //16 Cross
        15,     //17 Spikes
    ][row_];

    int transitionObj = GetTransitionObject(true);
    Transition_ChangeBG(index_, frames * 5 + delay_);
    wait(delay_);
    TTransitionAnimation(transitionObj, frames, row_);
}
//No Shader
function<void> Transition_Spell(int row_, int index_, int delay_, int color_) {
    //[frames, cutFrames]
    int[] frames = [
        [16, 8],    //0  Tilt
        [15, 8],    //1  Swirl
        [15, 8],    //2  Zoom
        [21, 11]    //3  Sweep
    ][row_];

    int transitionObj = GetTransitionObject(false);
    wait(delay_);
    TTransitionAnimation(transitionObj, index_, color_, frames[0], frames[1], row_);
}