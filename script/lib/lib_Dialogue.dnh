//Dialogue library
//keep in mind this is run from the package because the stage needs to pause
//therefore, stage-only libraries like lib_Common.dnh cannot be included
#include "./lib_SystemAll.dnh" //Boss ID constants
#include "./lib_File.dnh" //file directory constants
#include "./lib_Util.dnh" //utility functions
#include "./bosslib/lib_Character.dnh" //boss sprites/portrait retrieval

bool _endDialogue = false; //flag for end of dialogue sequence
bool _skip = false; //flag for skipping dialogue
bool _reading = false; //text currently scrolling
bool _firstLine = true; //flag to prevent accidental skipping upon loading the first line of dialogue

//Text objects
int _playerText;
int _bossText;

function<void> Dialogue_Start() { //call to start dialogue sequence
    TCreateTextBoxes(); //player and enemy text boxes
    _playerText = CreateDialogueText(false);
    _bossText = CreateDialogueText(true);
    wait(48); //animation time
    TSkipPrompt();
}

function<void> Dialogue_End() { //call to end dialogue sequence
    Obj_Delete(_playerText);
    Obj_Delete(_bossText);
    _endDialogue = true;
    wait(48); //animation time
}

task TCreateTextBoxes() {
    int[] playerBoxPos = [80, 320];
    int[] enemyBoxPos = [48, 192];
    int playerBox = InitSprite2D(0, 0, 320, 48, IMG_SYSTEM_TEXTBOX, RP_UI_IMG);
    ObjRender_SetPosition(playerBox, 80, 320, 1);
    int enemyBox = InitSprite2D(0, 0, 320, 48, IMG_SYSTEM_TEXTBOX, RP_UI_IMG);
    ObjRender_SetPosition(enemyBox, 48, 192, 1);
    
    //fade in animation
    wait(12);
    ChangeFrame(playerBox, 1, false);
    ChangeFrame(enemyBox, 1, true);
    wait(12);
    ChangeFrame(playerBox, 2, false);
    ChangeFrame(enemyBox, 2, true);

    while (!_endDialogue) yield;
    //fade out animation
    wait(12);
    ChangeFrame(playerBox, 1, false);
    ChangeFrame(enemyBox, 1, true);
    wait(12);
    ChangeFrame(playerBox, 0, false);
    ChangeFrame(enemyBox, 0, true);
    wait(12);

    Obj_Delete(playerBox);
    Obj_Delete(enemyBox);

    function<void> ChangeFrame(int obj_, int frame_, bool isBoss_) {
        ObjSprite2D_SetSourceRect(obj_, 0, 0 + 48 * frame_, 320, 48 + 48 * frame_);
        ObjSprite2D_SetDestRect(obj_, 0, 0, 320, 48);
    }

}

task TSkipPrompt() {
    int objText = CreateText(32, MAX_Y + 16, RP_UI_TEXT, "", COLOR_WHITE);

    while (!_endDialogue) {
        ObjText_SetText(objText, "> Hold SHOT to skip");
        loop (30) {
            if (_endDialogue) break;
            yield;
        }
        ObjText_SetText(objText, "> Hold SHOT to skip.");
        loop (30) {
            if (_endDialogue) break;
            yield;
        }
        ObjText_SetText(objText, "> Hold SHOT to skip..");
        loop (30) {
            if (_endDialogue) break;
            yield;
        }
        ObjText_SetText(objText, "> Hold SHOT to skip...");
        loop (30) {
            if (_endDialogue) break;
            yield;
        }
    }

    Obj_Delete(objText);
}

//----------------------------------------------------
//Character Portraits
//----------------------------------------------------
function<int> Dialogue_CreatePortrait(string characterID_, bool isBoss_) { //creates a portrait in the player or boss position with the given characterID
    int xPos = isBoss_ ? 288 : 32;
    int yPos = isBoss_ ? 112 : 240;

    int obj = InitSprite2D(0, 0, 0, 0, GetBossPortrait(characterID_), RP_UI_IMG);
    ObjRender_SetPosition(obj, xPos, yPos, 1);

    return obj;
}

function<void> Dialogue_SetPortrait(int obj_, int frame_) { //assumes character portraits are in a 4x3 grid of 128x128 images. frames advance from top left to bottom right
    int top = 128 * trunc(frame_ / 4);
    int left = 128 * (frame_ % 4);
    //change portrait frame
    ObjSprite2D_SetSourceRect(obj_, left, top, left+128, top+128);
    ObjSprite2D_SetDestRect(obj_, 0, 0, 128, 128); //position controlled by objrender_setposition();
}

//----------------------------------------------------
//Text Control
//----------------------------------------------------
function<int> CreateDialogueText(bool isBoss_) { //creates the dialogue text object
    int xPos = isBoss_ ? 49 : 161;
    int yPos = isBoss_ ? 191 : 319;

    int obj = CreateText(xPos, yPos, RP_UI_TEXT, "", COLOR_WHITE);
    ObjText_SetFontBorderColor(obj, COLOR_BLACK);
    ObjText_SetFontBorderType(obj, BORDER_FULL);
    ObjText_SetFontBorderWidth(obj, 1);
    ObjText_SetSidePitch(obj, -1);
    ObjText_SetLinePitch(obj, -1);
    ObjText_SetMaxWidth(obj, 242);

    return obj;
}

function<void> Dialogue_SetText(bool isBoss_, string text_) { //Sets selected text field to desired new text. Colors blue if left unchanged for a line
    //29 characters per line max, font is unispaced
    //-----------------------------   <-- this long
    if (isBoss_) {
        ObjText_SetHorizontalAlignment(_bossText, ALIGNMENT_LEFT);
        ObjText_SetVertexColor(_bossText, 0xFF000000 | COLOR_WHITE);
        ObjText_SetVertexColor(_playerText, 0xFF000000 | COLOR_BLUE);
        TTextScroll(_bossText, text_, true);
    } else {
        ObjText_SetVertexColor(_playerText, 0xFF000000 | COLOR_WHITE);
        ObjText_SetVertexColor(_bossText, 0xFF000000 | COLOR_BLUE);
        TTextScroll(_playerText, text_, true);
    }
}

function<void> Dialogue_BossTitle(string text_) { //Centers text for use in boss titles/names
    ObjText_SetHorizontalAlignment(_bossText, ALIGNMENT_CENTER);
    ObjText_SetVertexColor(_bossText, 0xFF000000 | COLOR_WHITE);
    ObjText_SetVertexColor(_playerText, 0xFF000000 | COLOR_BLUE);
    TTextScroll(_bossText, text_, false);
}

task TTextScroll(int obj_, string text_, bool isSpeech_) { //Makes text fill gradually in text boxes
    _reading = true;
    string[] tempStrings = SplitString(text_, "/"); //use / for newlines instead of [r]
    string tempString = "";
    char lastChar;
    if (GetVirtualKeyState(VK_OK) == KEY_PUSH) { //Prevents skipping the yield
        SetVirtualKeyState(VK_OK, KEY_FREE);
    }
    ascent (i in 0..length(tempStrings)) { //list of substrings
        ascent (j in 0..length(tempStrings[i])) { //for each character in a substring
            tempString ~= [tempStrings[i][j]];
            lastChar = tempString[-1];
            ObjText_SetText(obj_, tempString);
            if (GetVirtualKeyState(VK_OK) != KEY_PUSH && !_skip) { //skip if player presses button or dialogue is being skipped
                if (lastChar != ' ') {
                    if (isSpeech_) CallSFX(SND_TALK);
                    else CallSFX(SND_BOSSTITLE);
                }
                loop (GetWaitTime()) { //isSpeech_ being used as an int
                    if (GetVirtualKeyState(VK_OK) != KEY_PUSH && !_skip) yield;
                    else break;
                }
            }
        }
        tempString ~= ['[','r',']']; //append a newline after each substring
    }
    if (GetVirtualKeyState(VK_OK) == KEY_PUSH) SetVirtualKeyState(VK_OK, KEY_FREE); //Prevents the keystate from carrying over to the reading check in WaitForInput()
    _reading = false;

    function<int> GetWaitTime() {
        if (!isSpeech_) return 5;
        alternative (lastChar)
        case ('.', '!', '?', '~', ',', ';') { return 10; } //end of sentence/verbal pause
        case (' ') { return 3; }
        others { return 1; }
    }
}

//----------------------------------------------------
//Utility
//----------------------------------------------------
function<void> Dialogue_Wait() { //waits for player input to advance text
    if (_firstLine) {
		_firstLine = false;
		while (GetVirtualKeyState(VK_OK) != KEY_FREE) yield;
	}
    yield;
    int skipFlag = 0;
	loop {
        SkipCheck(skipFlag);
		if ((_skip || (!_reading && GetVirtualKeyState(VK_OK) == KEY_PUSH))) return;
		if (GetVirtualKeyState(VK_OK) == KEY_HOLD || GetVirtualKeyState(VK_OK) == KEY_PUSH) skipFlag++;
		else skipFlag = 0;
		yield;
    }
}

function<bool> SkipCheck(int flag_) { //hold key to skip dialogue
    if (!_skip && flag_ > 30) {
        _skip = true;
        flag_ = 0;
    }
    if (GetVirtualKeyState(VK_OK) != KEY_HOLD) _skip = false;
}

function<void> Dialogue_SummonBoss(int fadeIn_, int between_, int fadeOut_, string bossID_, int xPos_, int yPos_) { //Screen whiteout that places the boss sprite 
    //boss sprite to be placed, autodeletes upon script closure
    int bossSprite = InitSprite2D(0, 0, 64, 64, GetBossSprite(bossID_), RP_UI_IMG);
    ObjSprite2D_SetDestCenter(bossSprite);
    Obj_SetVisible(bossSprite, false);

    //screen whiteout
    int whiteout = InitSprite2D(0, 0, MAX_X, MAX_Y, RP_UI_MAX);
    ObjRender_SetColor(whiteout, COLOR_WHITE);
    ObjRender_SetPosition(whiteout, 32, 16, 1); //corner of stg window

    //animation
    for (int i = 1; i <= fadeIn_; i++) {
        ObjRender_SetAlpha(whiteout, 255 / 14 * as_int(Interpolate_Linear(0, 14, i / as_float(fadeIn_))));
        yield;
    }

    Obj_SetVisible(bossSprite, true);
    ObjRender_SetPosition(bossSprite, xPos_ + 32, yPos_ + 16, 1); //shifted to align with stg window coordinates
    wait(between_);

    for (int i = 1; i <= fadeIn_; i++) {
        ObjRender_SetAlpha(whiteout, 255 / 14 * as_int(Interpolate_Linear(14, 0, i / as_float(fadeIn_))));
        yield;
    }

    Obj_Delete(whiteout);
}