//Bullet deletion effect library

int _effectDelete;

function<void> InitEffectList() {
    _effectDelete = InitParticleList(IMG_EFFECT_DELETE, RP_STG_SHOT, 0, 0, 32, 32); 
    ParticleListShader(_effectDelete, 32/128, 1);
}

task TDeleteEffectShot(int obj_) { //Shot cancel effect
    if (!Obj_GetValueDI(obj_, SHOT_CANCEL, true)) return;
    real x = ObjMove_GetX(obj_);
    real y = ObjMove_GetY(obj_);
    real speed = ObjMove_GetSpeed(obj_);
    real angle = ObjMove_GetAngle(obj_);
    //int ID = ObjShot_GetImageID(obj_); TODO either base delete effects on the bullet or give the bullet a key/value for the delete effect

    real frame = 0;
    while (frame < 4) {
        ObjParticleList_SetPosition(_effectDelete, x, y, 1);
        ObjParticleList_SetExtraData(_effectDelete, trunc(frame), 0, 0);

        ObjParticleList_AddInstance(_effectDelete);
        frame += 1/5;
        x += speed * cos(angle);
        y += speed * sin(angle);
        yield;
    }
}

task TDeleteEffectLaser(int obj_) { //Laser cancel effect
    if (!Obj_GetValueDI(obj_, SHOT_CANCEL, true)) return;
    real x = ObjMove_GetX(obj_);
    real y = ObjMove_GetY(obj_);
    real angle = ObjStLaser_GetAngle(obj_);
    real len = ObjLaser_GetLength(obj_);
    real speed = 4.5;

    int deleteLine1 = CreateDeleteLine(); //clockwise to laser
    int deleteLine2 = CreateDeleteLine(); //counterclockwise to laser

    real dist = 0; //distance of delete line to the original laser center
    loop (15) {
        ObjPrim_SetVertexPosition(deleteLine1, 0, x + dist * cos(angle + 90), y + dist * sin(angle + 90), 1);
        ObjPrim_SetVertexPosition(deleteLine1, 1, x + dist * cos(angle + 90) + len * cos(angle), y + dist * sin(angle + 90) + len * sin(angle), 1);
        ObjPrim_SetVertexPosition(deleteLine2, 0, x + dist * cos(angle - 90), y + dist * sin(angle - 90), 1);
        ObjPrim_SetVertexPosition(deleteLine2, 1, x + dist * cos(angle - 90) + len * cos(angle), y + dist * sin(angle - 90) + len * sin(angle), 1);

        x += speed * cos(angle) / 2;
        y += speed * sin(angle) / 2;
        dist += 0.5;
        yield;
    }

    Obj_Delete(deleteLine1);
    Obj_Delete(deleteLine2);

    function<int> CreateDeleteLine() {
        int obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
        ObjPrim_SetPrimitiveType(obj, PRIMITIVE_LINESTRIP);
        ObjPrim_SetVertexCount(obj, 2);
        Obj_SetRenderPriorityI(obj, RP_STG_LASER);
        return obj;
    }
}