//Constants library
const bool DEBUG_MODE = false;
//----------------------------------------------------
//VERSION
//----------------------------------------------------
const string GAME_VERSION = "0.52b";

//----------------------------------------------------
//FONT CONSTANTS
//----------------------------------------------------
const string SYS_FONT = "PC-9800";
const string SYS_FONT_PATH = "script/img/system/font/PC-9800.ttf";
const string HEADER_FONT = "Magic Decimal Sharp";
const string HEADER_FONT_PATH = "script/img/system/font/MagicDecimalSharp.ttf";

//----------------------------------------------------
//EVENT CONSTANTS
//----------------------------------------------------
//Stage Constants
const int EV_STAGE_START        = EV_USER_STAGE + 1;    //Starts the dialogue/plural scripts after the stage intro animation completes
const int EV_STAGE_INTRO_START  = EV_USER_STAGE + 2;    //Stage intro fade begins and player can move/shoot/pause the game
const int EV_CHANGE_BG          = EV_USER_STAGE + 3;    //Change background index number, pass (index, transitionTime)
const int EV_CONTINUE           = EV_USER_STAGE + 4;    //Player used a continue

//System Constants
const int EV_CREATE_ITEM        = EV_USER_SYSTEM + 1;   //Create Item, pass (x, y, TYPE_CONSTANT)
const int EV_CANCEL_BONUS       = EV_USER_SYSTEM + 2;   //Bullet cancel score bonus text, pass (score)
const int EV_SCORE_EXTEND       = EV_USER_SYSTEM + 3;   //Give the player an extra life without using a life item
const int EV_BANNER             = EV_USER_SYSTEM + 4;   //Display banner text across top, pass (type, row, score)

//Package Constants
const int EV_PLAY_BGM           = EV_USER_PACKAGE + 1;  //Stops current track, plays new track. pass (trackID, fade, delay)
const int EV_PAUSE_ENABLE       = EV_USER_PACKAGE + 2;  //Enable/disable pausing in the stage control script. pass (enable)
const int EV_GET_ACHIEVEMENT    = EV_USER_PACKAGE + 3;  //unlock specified achievement. pass (achievementID)
const int EV_STOP_BGM           = EV_USER_PACKAGE + 4;  //pass true to pause, pass false to resume
const int EV_PLAY_SFX           = EV_USER_PACKAGE + 5;  //Play sfx from audio script. pass (sfxID) 
const int EV_TITLE_END          = EV_USER_PACKAGE + 6;  //End title screen script
const int EV_STAGE_EVENT        = EV_USER_PACKAGE + 7;  //Package stage script local event. pass (STAGE_EVENT) or option arguments
const int EV_GET_BGM_NAME       = EV_USER_PACKAGE + 8;  //returns an array of [name, comment]. pass (bgmID)
const int EV_STOP_SFX           = EV_USER_PACKAGE + 9;  //Stop currently playing sfx
const int EV_STAGE_VICTORY      = EV_USER_PACKAGE + 10; //Calls CloseStgScene() through an event

//----------------------------------------------------
//PACKAGE STAGE CONSTANTS
//----------------------------------------------------
//stage event constants
const int STAGE_NONE            = 0; //No event
const int STAGE_PAUSE           = 1; //Main game pause
const int STAGE_PAUSE_SPELL     = 2; //Spell practice pause
const int STAGE_VICTORY_SPELL   = 3; //Spell practice victory
const int STAGE_GAMEOVER        = 4; //Main game gameover
const int STAGE_GAMEOVER_SPELL  = 5; //Spell practice gameover
const int STAGE_PAUSE_REPLAY    = 6; //Replay pause
const int STAGE_GAMEOVER_REPLAY = 7; //Replay end
const int STAGE_DIALOGUE        = 8; //start dialogue (pass with path)
const int STAGE_VICTORY         = 9; //normal game mode stage victory

//Script Result Constants
const int RESULT_CONTINUE = 0; //player used a continue (game over menu)

//----------------------------------------------------
//SYSTEM CONSTANTS
//----------------------------------------------------
//spell cap, bullet cancel, life, bomb, highscore
const int BANNER_BONUS_SPELL    = 0;
const int BANNER_BONUS_CANCEL   = 1;
const int BANNER_BONUS_FAIL     = 2;
const int BANNER_EXTEND         = 3;
const int BANNER_EXTEND_SPELL   = 4;
const int BANNER_HIGHSCORE      = 5;

//----------------------------------------------------
//GAME CONSTANTS
//----------------------------------------------------
//Boss ID Constants
const string BOSS_ID_TSURUBAMI = "Tsurubami";
const string BOSS_ID_YABUSAME  = "Yabusame";
const string BOSS_ID_TSUBAKURA = "Tsubakura";

//Player Shot Type Constants
const int PLAYER_YABUSAME  = 0;
const int PLAYER_TSUBAKURA = 1;

//Difficulty Constants
const int D_EASY    = 0;
const int D_NORMAL  = 1;
const int D_HARD    = 2;
const int D_LUNATIC = 3;
const int D_EASYEX  = 4;
const int D_EXTRA   = 5;
const int D_ABEX    = 6;

//Game Mode Constants
const int GAME_NONE     = 0; //None
const int GAME_MAIN     = 1; //Normal Game
const int GAME_SPELL    = 2; //Spell Practice Mode


//----------------------------------------------------
//SOUND CONSTANTS
//----------------------------------------------------
//Title
const int SND_TT_SELECT     = 14;
const int SND_TT_DECIDE     = 13;
const int SND_TT_CANCEL     = 12;
//Player
const int SND_PL_SHOT       = 18;
const int SND_PL_GRAZE      = 15;
const int SND_PL_HIT        = 16;
const int SND_PL_MISS       = 17;
const int SND_PL_VULNERABLE = 19;
const int SND_PL_SPELL      = 20;
//Stage
const int SND_SHOT1         = 21;
const int SND_SHOT2         = 22;
const int SND_SHOT3         = 23;
const int SND_SHOT4         = 24;
const int SND_CHARGE1       = 2;
const int SND_CHARGE2       = 3;
const int SND_LASER1        = 9;
const int SND_LASER2        = 10;
const int SND_MASTERSPARK   = 11;
const int SND_FIRE          = 32;
const int SND_EXPLOSION1    = 4;
const int SND_EXPLOSION2    = 5;
const int SND_BANG1         = 0;
const int SND_BANG2         = 1;
const int SND_ITEM          = 8;
const int SND_DAMAGE        = 26;
const int SND_DAMAGE_LOW    = 27;
const int SND_INVINCIBLE    = 7;
const int SND_TRANSITION    = 25;
const int SND_EXTEND        = 28;
const int SND_TIMER         = 29;
const int SND_GAUGE_FULL    = 6;
//Other
const int SND_TALK          = 30;
const int SND_BOSSTITLE     = 31;

//----------------------------------------------------
//RENDER PRIORITY CONSTANTS
//----------------------------------------------------
const int RP_UI_MIN         = 0;  //Min render priority
const int RP_UI_BG          = 2;  //Menu/UI backgrounds
const int RP_UI_PARTICLE    = 4;  //Menu/UI particle effects
const int RP_UI_IMG         = 7;  //Menu/UI images
const int RP_UI_TEXT        = 10; //Menu/UI text
const int RP_STG_MIN        = 20; //Min stage render priority
const int RP_STG_BG         = 21; //Background render layer
const int RP_STG_BG1        = 22; //Background layer 1          (INVALID)
const int RP_STG_EFF_BG1    = 23; //Background layer 1 effects  (INVALID)
const int RP_STG_BG2        = 24; //Background layer 2          (INVALID)
const int RP_STG_EFF_BG2    = 25; //Background layer 2 effects  (INVALID)
const int RP_STG_TRANSITION1= 26; //Background transition effect(INVALID)
const int RP_STG_TRANSITION2= 27; //Background transition effect(no shader)
const int RP_STG_EFF_LO     = 28; //Effects that render over the background only (particles mainly)
const int RP_STG_EFF_SPELL  = 29; //Player spell effects that render over backgrounds
const int RP_STG_ENEMY      = 30; //Enemy/familiar sprites
const int RP_STG_BOSS       = 31; //Boss sprites
const int RP_STG_EFF_MID    = 35; //Effects that render over the boss sprites, but below the player
const int RP_STG_EFF_PLR_LO = 39; //Player effects that render below the player
const int RP_STG_PLAYER     = 40; //Player sprite/bullets
const int RP_STG_EFF_PLR_HI = 41; //Player effects that render above the player, but below other effects
const int RP_STG_THRILLTIME = 43; //On-screen thrill time gauge
const int RP_STG_EFF_HI     = 45; //Effects that render over the player, but below bullets
const int RP_STG_ITEM       = 50; //Items
const int RP_STG_LASER      = 57; //Enemy Lasers
const int RP_STG_SHOT       = 60; //Bullets
const int RP_STG_LASER_HI   = 63; //Fire wall laser graphic if render above shots 
const int RP_STG_EFF_MAX    = 65; //Effects that render over bullets
const int RP_STG_HITBOX     = 70; //Player hitbox
const int RP_STG_TEXT       = 75; //Item pickup text
const int RP_STG_SPELL      = 76; //Spell name and graphics
const int RP_STG_SPELLNUM   = 77; //Spell bonus and history numbers
const int RP_STG_END        = 78; //End of stage screen
const int RP_STG_MAX        = 80; //Max stage render priority
const int RP_UI_OVERLAY     = 90; //Renders above the game window and stg frame
const int RP_UI_MAX         = 100;//Max render priority

//----------------------------------------------------
//RENDER TARGET CONSTANTS
//----------------------------------------------------
const string RT_BG1         = GetReservedRenderTargetName(0); //background layer 1 (22-23)
const string RT_BG2         = GetReservedRenderTargetName(1); //background layer 2 (24-25)
const string RT_TRANSITION  = GetReservedRenderTargetName(2); //transition layer (26)
const string RT_SCREENSHOT  = "RT_SCREENSHOT"; //layers 0-21, 27-100
const string RT_ENDSCREEN   = "RT_ENDSCREEN"; //layer 78

//----------------------------------------------------
//POSITION CONSTANTS
//----------------------------------------------------
//STG frame
const float MIN_X = 0;
const float MIN_Y = 0;
const float MAX_X = 384;         //384
const float MAX_Y = 368;         //368
const float MID_X = MAX_X / 2;   //192
const float MID_Y = MAX_Y / 2;   //184
//window frame
const float WINDOW_WIDTH = GetScreenWidth(); //640
const float WINDOW_HEIGHT = GetScreenHeight(); //400
const float WINDOW_WIDTH_MID = WINDOW_WIDTH / 2; //320
const float WINDOW_HEIGHT_MID = WINDOW_HEIGHT / 2; //200

//----------------------------------------------------
//ITEM CONSTANTS
//----------------------------------------------------
const int ITEM_POW      = 1; //Power
const int ITEM_SCORE    = 2; //Point
const int ITEM_DREAM    = 3; //Dream
const int ITEM_POW_L    = 4; //Large Power
const int ITEM_POW_FULL = 5; //Full Power
const int ITEM_BOMB     = 6; //Bomb
const int ITEM_EXTEND   = 7; //Life

//----------------------------------------------------
//KEY/VALUE FIELD CONSTANTS
//----------------------------------------------------
//Shot
const int SHOT_SCORE        = 0; //How much score the bullet should give
const int SHOT_DROP_ITEM    = 1; //If the bullet spawns a point item when cancelled
const int SHOT_SCORE_TEXT   = 2; //If the bullet gets score ascii text
const int SHOT_CANCEL       = 3; //If the bullet/laser should be given a cancel effect
const int SHOT_EFFECT       = 4; //Key field for bullet deletion effect
//Boss
const int BOSS_ID           = 5; //Boss ID string constant
const int BOSS_ALIVE        = 6; //Boss health > 0
const int BOSS_BOMB_BARRIER = 7; //Bomb barrier currently active (bool)
const int BOSS_X            = 8; //X position of boss
const int BOSS_Y            = 9; //Y position of boss
const int BOSS_LIFE         = 10;//Boss health
const int BOSS_LIFE_PREV    = 11;//Boss health previous frame
const int BOSS_DMG_PREV     = 12;//Amount of damage the boss took in the previous frame (used for score calculaton)
const int BOSS_DMG_SHOT     = 13;//Boss damage ratio to shot
const int BOSS_DMG_SPELL    = 14;//Boss damage ratio to spells
const int BOSS_DAMAGED      = 15;//Boss took damage this frame (bool)
//Boss animations
const int BOSS_CHARGE       = 16;//Boss Charge animation flag
const int BOSS_SPECIAL      = 17;//Boss Special animation flag
//Item
const int ITEM_AUTOCOLLECT  = 18;//Item was autocollected

//----------------------------------------------------
//COLOR CONSTANTS
//----------------------------------------------------
const int COLOR_BLACK       = 0x000000;
const int COLOR_GRAY_D      = 0x555555;
const int COLOR_GRAY        = 0x666666;
const int COLOR_GRAY_L      = 0x999999;
const int COLOR_WHITE       = 0xFFFFFF;
const int COLOR_RED_DD      = 0x550000;
const int COLOR_RED_D       = 0x880000;
const int COLOR_RED         = 0xFF0000;
const int COLOR_RED_L       = 0xFF4444;
const int COLOR_TAN         = 0xEEBBAA;
const int COLOR_ORANGE_D    = 0xBB5500;
const int COLOR_BROWN       = 0xAA6622;
const int COLOR_BROWN_D     = 0x995500;
const int COLOR_ORANGE      = 0xFF9900;
const int COLOR_PAPER       = 0xFFEECC;
const int COLOR_YELLOW_D    = 0xDDCC44;
const int COLOR_OLIVE_D     = 0x888855;
const int COLOR_OLIVE       = 0x999966;
const int COLOR_YELLOW      = 0xFFFF00;
const int COLOR_YELLOW_L    = 0xFFFF55;
const int COLOR_GREEN       = 0x44BB33;
const int COLOR_GREEN_D     = 0x226622;
const int COLOR_ICE         = 0xAADDFF;
const int COLOR_WATER       = 0x1188FF;
const int COLOR_BLUE        = 0x0000FF;
const int COLOR_BLUE_D      = 0x111166;
const int COLOR_BLUE_L      = 0xAAAAFF;
const int COLOR_INDIGO_L    = 0xBBBBFF;
const int COLOR_SKY         = 0xDDDDFF;
const int COLOR_INDIGO      = 0x6655BB;
const int COLOR_INDIGO_D    = 0x554499;
const int COLOR_MAGENTA     = 0xCC33AA;
const int COLOR_PURPLE      = 0x880088;
const int COLOR_PURPLE_D    = 0x660055;
const int COLOR_MAGENTA_D   = 0x880066;
const int COLOR_PINK        = 0xFFBBCC; //Used in shot sheet
const int COLOR_PURPLE_L    = 0xDD66DD; //Used in shot sheet
const int COLOR_MAGENTA_L   = 0xFF00FF; //Used in health bar
const int COLOR_GREEN_L     = 0x00FF00; //Used in health bar
const int COLOR_TEAL        = 0x00FFFF; //Used in health bar