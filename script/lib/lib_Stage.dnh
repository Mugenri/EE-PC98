//Stage function library
bool _introPlaying = true; //assume screen is fading from black

function<void> Stage_Event() { //Generic stage events (can create another event block in the stage script for specialized events)
    alternative (GetEventType())
    case (EV_STAGE_INTRO_START) { //immediately as intro fade begins
        TIntroTimer(90);
        SetPauseEnable(true);
    }
    case (EV_STAGE_START) _start = true; //immediately after intro fade ends
    case (EV_PLAY_BGM) {
        wait(GetEventArgument(1));
        Stage_SetBGMText(GetBGMName(GetEventArgument(0)));
    }
    case (EV_CHANGE_BG) { UpdateBackground(GetEventArgument(0), GetEventArgument(1)); }
}

task TIntroTimer(int time_) { //time the intro fade takes to play
    loop (time_) yield;
    _introPlaying = false;
}

function<void> Stage_SetBGMText(string text_) { //newly playing bgm text (228 frames of animation)
    int objText = CreateText(0, MAX_Y - 17, RP_STG_MAX, text_, COLOR_WHITE);
    ObjText_SetMaxWidth(objText, MAX_X - 1);
    ObjText_SetHorizontalAlignment(objText, ALIGNMENT_RIGHT);
    Obj_SetVisible(objText, false);

    real width = ObjText_GetTotalWidth(objText);
    int steps = (round(width / 16)); //number of particles to spawn
    int notePos = (MAX_X - width - 24); //x position of note graphic

    //music note
    int note = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjPrim_SetTexture(note, IMG_SYSTEM_TEXT);
    ObjSprite2D_SetSourceRect(note, 0, 224, 16, 240);
    ObjSprite2D_SetDestRect(note, 0, 0, 16, 16);
    ObjRender_SetColor(note, COLOR_YELLOW);
    ObjRender_SetPosition(note, notePos, MAX_Y - 17, 1);
    Obj_SetVisible(note, false);

    int particles = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_MAX, 0, 192, 32, 224);
    ParticleListShader(particles, 32/512, 32/512);

    real frame = 0;
    async {
        yield; //stops if stage script is paused
        while (_introPlaying) yield;
        while (frame < 6) { //particles in
            UpdateParticle(0);
            frame += 1/4;
            yield;
        }
        //show text/note icon
        Obj_SetVisible(objText, true);
        Obj_SetVisible(note, true);

        while (frame < 12) { //rest of animation
            UpdateParticle(0);
            frame += 1/4;
            yield;
        }

        wait(132);
        Obj_Delete(objText);
        Obj_Delete(note);

        frame = 0;
        while (frame < 12) { //particles out
            UpdateParticle(1);
            frame += 1/4;
            yield;
        }

        Obj_Delete(particles);

        function<void> UpdateParticle(bool isOut_) { //bool value used as 0 or 1
            for (int i = 0; i < steps; i++) {
                ObjParticleList_SetPosition(particles, MAX_X - 9 - 16 * i, MAX_Y - 9, 1);
                ObjParticleList_SetExtraData(particles, trunc(frame), isOut_, 0);
                ObjParticleList_SetColor(particles, COLOR_WHITE);
                ObjParticleList_AddInstance(particles);
            }
            //particle for music note
            ObjParticleList_SetPosition(particles, notePos + 9, MAX_Y - 9, 1);
            ObjParticleList_SetExtraData(particles, trunc(frame), isOut_, 0);
            ObjParticleList_SetColor(particles, COLOR_YELLOW);
            ObjParticleList_AddInstance(particles);
        }
    }
}

function<void> Stage_SetIntroText(string header_, string subtitle_) { //stage name and subtitle text (228 frames of animation)
    int header = CreateText(0, MID_Y - 24, RP_STG_MAX, header_, COLOR_YELLOW);
    ObjText_SetFontType(header, HEADER_FONT); //header font
    int subtitle = CreateText(0, MID_Y + 8, RP_STG_MAX, subtitle_, COLOR_WHITE);
    //setup text object properties
    ObjText_SetMaxWidth(header, MAX_X);
    ObjText_SetMaxWidth(subtitle, MAX_X);
    ObjText_SetHorizontalAlignment(header, ALIGNMENT_CENTER);
    ObjText_SetHorizontalAlignment(subtitle, ALIGNMENT_CENTER);
    Obj_SetVisible(header, false);
    Obj_SetVisible(subtitle, false);

    //particle spawning info
    real width = ObjText_GetTotalWidth(header);
    int stepHeader = (round(width / 16)); //number of particles to spawn
    int headerX = MID_X + 8 - round(stepHeader * 8);

    width = ObjText_GetTotalWidth(subtitle);
    int stepSubtitle = (round(width / 16));
    int subtitleX = MID_X + 8 - round(stepSubtitle * 8);

    int particles = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_MAX, 0, 192, 32, 224);
    ParticleListShader(particles, 32/512, 32/512);

    real frame = 0;
    async {
        while (_introPlaying) yield;
        while (frame < 6) { //particles in
            UpdateParticle(0);
            frame += 1/4;
            yield;
        }
        //show text/note icon
        Obj_SetVisible(header, true);
        Obj_SetVisible(subtitle, true);

        while (frame < 12) { //rest of animation
            UpdateParticle(0);
            frame += 1/4;
            yield;
        }

        wait(132);
        Obj_Delete(header);
        Obj_Delete(subtitle);

        frame = 0;
        while (frame < 12) { //particles out
            UpdateParticle(1);
            frame += 1/4;
            yield;
        }

        Obj_Delete(particles);

        function<void> UpdateParticle(bool isOut_) { //bool value used as 0 or 1
            for (int i = 0; i < stepHeader; i++) {
                ObjParticleList_SetPosition(particles, headerX + i * 16, MID_Y - 16, 1);
                ObjParticleList_SetExtraData(particles, trunc(frame), isOut_, 0);
                ObjParticleList_SetColor(particles, COLOR_YELLOW);
                ObjParticleList_AddInstance(particles);
            }
            for (int i = 0; i < stepSubtitle; i++) {
                ObjParticleList_SetPosition(particles, subtitleX + i * 16, MID_Y + 16, 1);
                ObjParticleList_SetExtraData(particles, trunc(frame), isOut_, 0);
                ObjParticleList_SetColor(particles, COLOR_WHITE);
                ObjParticleList_AddInstance(particles);
            }
        }
    }
}