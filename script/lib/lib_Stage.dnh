//Stage function library
bool _introPlaying = true; //assume screen is fading from black
real[] tempSpeed = []; //store player speed to stop movement during intro fade

function<void> Stage_Init(int lives_, int bombs_) {
    SetAreaCommonData(AREA_STAGE, "SCRIPT_STAGE", GetOwnScriptID());
    SetPlayerLife(lives_);
    SetPlayerSpell(bombs_);
    //Stop player movement while screen is black
    SetForbidPlayerShot(true);
    SetForbidPlayerSpell(true);
    tempSpeed = GetPlayerSpeed();
    SetPlayerSpeed(0, 0);
}

function<void> Stage_Event() { //Generic stage events (can create another event block in the stage script for specialized events)
    alternative (GetEventType())
    case (EV_STAGE_INTRO_START) { //immediately as intro fade begins
        TIntroTimer(80); //if bgm starts here, delay bgm text for 80 frames
        SetPauseEnable(true);
        //resume player movement when the transition begins
        SetForbidPlayerShot(false);
        SetForbidPlayerSpell(false);
        SetPlayerSpeed(tempSpeed[0], tempSpeed[1]);
    }
    case (EV_STAGE_START) _start = true; //immediately after intro fade ends
    case (EV_PLAY_BGM) {
        Stage_SetBGMText(GetEventArgument(0), GetEventArgument(1), GetEventArgument(2));
    }
    case (EV_CONTINUE) { ///used a continue
        CD_AddAreaCommonData(AREA_STAGE, "Continues", 1, 0);

        SetPlayerLife(2); //TODO set this to initial lives config setting
        SetPlayerSpell(3);

        AddScore(-GetScore() + GetAreaCommonData(AREA_STAGE, "Continues", 0));
    }
    case (EV_PLAYER_SHOOTDOWN) CheckContinue(); //player out of lives
}

function<void> CheckContinue() {
    if (GetPlayerLife() < 0) {
        NotifyEvent(GetAreaCommonData(AREA_TITLE, "SCRIPT_STAGE", 0), EV_CONTINUE, 0);
    }
}

task TIntroTimer(int time_) { //time the intro fade takes to play
    loop (time_) yield;
    _introPlaying = false;
}

function<void> Stage_SetBGMText(int index_, int delay_, int current_) { //newly playing bgm text (228 frames of animation)
    if (index_ == current_) return; //already playing, cancel
    wait(delay_);
    string text = GetBGMName(index_);
    int objText = CreateText(0, MAX_Y - 17, RP_STG_MAX, text, COLOR_WHITE);
    ObjText_SetMaxWidth(objText, MAX_X - 1);
    ObjText_SetHorizontalAlignment(objText, ALIGNMENT_RIGHT);
    Obj_SetVisible(objText, false);

    real width = ObjText_GetTotalWidth(objText);
    int steps = (round(width / 16)); //number of particles to spawn
    int notePos = (MAX_X - width - 24); //x position of note graphic

    //music note
    int note = InitSprite2D(0, 224, 16, 240, IMG_SYSTEM_UI, RP_STG_MAX);
    ObjRender_SetColor(note, COLOR_YELLOW);
    ObjRender_SetPosition(note, notePos, MAX_Y - 17, 1);
    Obj_SetVisible(note, false);

    int particles = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_MAX, 0, 192, 32, 224);
    ParticleListShader(particles, 32/512, 32/512);

    int frame = 0;
    int frameRate = 4;
    async {
        yield; //stops if stage script is paused
        while (_introPlaying) yield;
        while (frame < 6 * frameRate) { //particles in
            UpdateParticle(0);
            frame++;
            yield;
        }
        //show text/note icon
        Obj_SetVisible(objText, true);
        Obj_SetVisible(note, true);

        while (frame < 12 * frameRate) { //rest of animation
            UpdateParticle(0);
            frame++;
            yield;
        }

        wait(132);
        Obj_Delete(objText);
        Obj_Delete(note);

        frame = 0;
        while (frame < 12 * frameRate) { //particles out
            UpdateParticle(1);
            frame++;
            yield;
        }

        Obj_Delete(particles);

        function<void> UpdateParticle(bool isOut_) { //bool value used as 0 or 1
            for (int i = 0; i < steps; i++) {
                ObjParticleList_SetPosition(particles, MAX_X - 9 - 16 * i, MAX_Y - 9, 1);
                ObjParticleList_SetExtraData(particles, frame / frameRate, isOut_, 0);
                ObjParticleList_SetColor(particles, COLOR_WHITE);
                ObjParticleList_AddInstance(particles);
            }
            //particle for music note
            ObjParticleList_SetPosition(particles, notePos + 9, MAX_Y - 9, 1);
            ObjParticleList_SetExtraData(particles, frame / frameRate, isOut_, 0);
            ObjParticleList_SetColor(particles, COLOR_YELLOW);
            ObjParticleList_AddInstance(particles);
        }
    }
}

function<void> Stage_SetIntroText(string header_, string subtitle_) { //stage name and subtitle text (228 frames of animation)
    int header = CreateText(0, MID_Y - 24, RP_STG_MAX, header_, COLOR_YELLOW);
    ObjText_SetFontType(header, HEADER_FONT); //header font
    int subtitle = CreateText(0, MID_Y + 8, RP_STG_MAX, subtitle_, COLOR_WHITE);
    //setup text object properties
    ObjText_SetMaxWidth(header, MAX_X);
    ObjText_SetMaxWidth(subtitle, MAX_X);
    ObjText_SetHorizontalAlignment(header, ALIGNMENT_CENTER);
    ObjText_SetHorizontalAlignment(subtitle, ALIGNMENT_CENTER);
    Obj_SetVisible(header, false);
    Obj_SetVisible(subtitle, false);

    //particle spawning info
    real width = ObjText_GetTotalWidth(header);
    int stepHeader = (round(width / 16)); //number of particles to spawn
    int headerX = MID_X + 8 - round(stepHeader * 8);

    width = ObjText_GetTotalWidth(subtitle);
    int stepSubtitle = (round(width / 16));
    int subtitleX = MID_X + 8 - round(stepSubtitle * 8);

    int particles = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_MAX, 0, 192, 32, 224);
    ParticleListShader(particles, 32/512, 32/512);

    int frame = 0;
    int frameRate = 4;
    while (frame < 6 * frameRate) { //particles in
        UpdateParticle(0);
        frame++;
        yield;
    }
    //show text/note icon
    Obj_SetVisible(header, true);
    Obj_SetVisible(subtitle, true);

    while (frame < 12 * frameRate) { //rest of animation
        UpdateParticle(0);
        frame++;
        yield;
    }

    wait(132);
    Obj_Delete(header);
    Obj_Delete(subtitle);

    frame = 0;
    while (frame < 12 * frameRate) { //particles out
        UpdateParticle(1);
        frame++;
        yield;
    }

    Obj_Delete(particles);

    function<void> UpdateParticle(bool isOut_) { //bool value used as 0 or 1
        for (int i = 0; i < stepHeader; i++) {
            ObjParticleList_SetPosition(particles, headerX + i * 16, MID_Y - 16, 1);
            ObjParticleList_SetExtraData(particles, frame / frameRate, isOut_, 0);
            ObjParticleList_SetColor(particles, COLOR_YELLOW);
            ObjParticleList_AddInstance(particles);
        }
        for (int i = 0; i < stepSubtitle; i++) {
            ObjParticleList_SetPosition(particles, subtitleX + i * 16, MID_Y + 16, 1);
            ObjParticleList_SetExtraData(particles, frame / frameRate, isOut_, 0);
            ObjParticleList_SetColor(particles, COLOR_WHITE);
            ObjParticleList_AddInstance(particles);
        }
    }
}

function<void> Stage_EndScreen(int stageBonus_) { //end of stage score screen
    SetPauseEnable(false);
    SetForbidPlayerShot(true);
    SetForbidPlayerSpell(true);

    //SCORE VARIABLES ----------------------------------
    real grazeBonus = min(GetGraze(), 9999) * 50;
    real lifeBonus = GetPlayerLife() * 10000;
    real pointCount = min(GetPoint(), 999);
    int missCount = GetAreaCommonData(AREA_STAGE, "Player_Miss", 0);
    int bombCount = GetAreaCommonData(AREA_STAGE, "Player_Bomb", 0);
    real noMissBonus = 500000;
    real noBombBonus = 500000;
    int continues = GetAreaCommonData(AREA_STAGE, "Continues", 0);
    real[] multContinue = [1.0, 0.8, 0.6, 0.4]; //0, 1, 2, 3 continues used
    int difficulty = GetAreaCommonData(AREA_TITLE, "Difficulty", 0);
    real[] multDifficulty = [0.5, 1.0, 1.2, 1.4, 0.5, 1.0, 1.4];
    string[] difficultyTexts = ["Easy", "Normal", "Hard", "Unreal", "Easy Extra", "Extra", "Absurdly Extra"];
    //TODO starting lives multiplier at some point maybe

    //SCORE CALCULATION ----------------------------------
    //stage bonus + graze * 50 + (lives * 10000) * point items + nomiss + nobomb * continue mult * diff mult = total
    int totalScore = (stageBonus_ + grazeBonus + lifeBonus) * pointCount;
    if (missCount == 0) totalScore += noMissBonus;
    if (bombCount == 0) totalScore += noBombBonus;
    totalScore *= multContinue[continues];
    totalScore *= multDifficulty[difficulty];
    totalScore = min(totalScore, 99999999); //cap to 100 million
    AddScore(totalScore);

    //TEXT SETUP --------------------------------------
    //Screen dim
    int objBlack = InitSprite2D(0, 0, MAX_X, MAX_Y, RP_STG_END);
    ObjRender_SetColor(objBlack, COLOR_BLACK);
    ObjRender_SetAlpha(objBlack, 96);
    //Clear Bonus!! text
    int headerText = InitSprite2D(0, 352, 128, 368, IMG_SYSTEM_UI, RP_STG_END);
    ObjRender_SetPosition(headerText, 128, 48, 1);
    //score bonuses
    int stageText = CreateText(16, 112, RP_STG_END, "All Clear:", COLOR_WHITE);
    int grazeText = CreateText(16, 144, RP_STG_END, "Graze Count x 50:", COLOR_WHITE);
    int livesText = CreateText(16, 176, RP_STG_END, "Lives Remaining x 10000:", COLOR_WHITE);
    int pointText = CreateText(16, 208, RP_STG_END, "  x   Point Items Collected:", COLOR_WHITE);
    //conditional
    int noMissText = CreateText(16, 240, RP_STG_END, "  +   No Miss Bonus:", COLOR_TEAL);
    int noBombText = CreateText(16, 256, RP_STG_END, "  +   No Bomb Bonus:", COLOR_TEAL);
    Obj_SetVisible(noMissText, missCount == 0);
    Obj_SetVisible(noBombText, bombCount == 0);
    //multipliers
    string tempText = " Continues";
    if (continues == 1) tempText = " Continue";
    int continueText = CreateText(16, 288, RP_STG_END, IntToString(continues) ~ tempText ~ " Used:", COLOR_RED);
    Obj_SetVisible(continueText, continues > 0);
    int difficultyText = CreateText(16, 304, RP_STG_END, difficultyTexts[difficulty] ~ " Rank:", COLOR_GREEN_L);
    //total
    int totalText = CreateText(16, 320, RP_STG_END, "Total:", COLOR_WHITE);

    //SCORE NUMBERS --------------------------------------

    int endList = InitParticleList(IMG_SYSTEM_UI, RP_STG_END, 0, 0, 16, 16); //score number list
    ParticleListShader(endList, 16/256, 16/512);
    ObjSprite2D_SetDestRect(endList, 0, 0, 16, 16);

    //number arrays
    int[] stageList = DigitToArray(stageBonus_);
    int[] grazeList = DigitToArray(grazeBonus);
    int[] livesList = DigitToArray(lifeBonus);
    int[] pointList = DigitToArray(pointCount);
    int[] noMissList = DigitToArray(noMissBonus);
    int[] noBombList = DigitToArray(noBombBonus);
    int[] continueList = DigitToArray(multContinue[continues] * 10, 2); // *10 to get a whole number, put a . between them. always has 2 digits
    int[] difficultyList = DigitToArray(multDifficulty[difficulty] * 10, 2); // same as above
    int[] totalList = DigitToArray(totalScore);

    //length variables so they don't get called every frame
    int stageLength = length(stageList);
    int grazeLength = length(grazeList);
    int livesLength = length(livesList);
    int pointLength = length(pointList);
    int noMissLength = length(noMissList);
    int noBombLength = length(noBombList);
    int totalLength = length(totalList);

    //wait for input
    while (GetVirtualKeyState(VK_SHOT) != KEY_PUSH) {
        UpdateList(stageList, stageLength, ObjRender_GetY(stageText)); //stage bonus
        UpdateList(grazeList, grazeLength, ObjRender_GetY(grazeText)); //graze bonus
        UpdateList(livesList, livesLength, ObjRender_GetY(livesText)); //lives bonus
        UpdateList(pointList, pointLength, ObjRender_GetY(pointText)); //point items
        if (missCount == 0) UpdateList(noMissList, noMissLength, ObjRender_GetY(noMissText)); //no miss bonus
        if (bombCount == 0) UpdateList(noBombList, noBombLength, ObjRender_GetY(noBombText)); //no bomb bonus
        if (continues > 0) UpdateListDecimal(continueList, ObjRender_GetY(continueText), COLOR_RED); //continue multiplier
        UpdateListDecimal(difficultyList, ObjRender_GetY(difficultyText), COLOR_GREEN_L); //difficulty multiplier
        UpdateList(totalList, totalLength, ObjRender_GetY(totalText)); //total score
        yield;
        
    }

    function<void> UpdateList(int[] list_, int listLength_, int y_) { //draw score number right to left
        for (int i = 0; i < listLength_; i++) {
            int num = list_[listLength_ - i - 1];
            ObjParticleList_SetPosition(endList, 352 - i * 16, y_, 1);
            ObjParticleList_SetExtraData(endList, num, 1, 0);
            ObjParticleList_AddInstance(endList);
        }
    }

    function<void> UpdateListDecimal(int[] list_, int y_, int color_) { //for multiplier numbers. length is always 2
        ObjParticleList_SetColor(endList, color_);
        for (int i = 0; i < 2; i++) {
            int num = list_[1 - i];
            ObjParticleList_SetPosition(endList, 352 - i * 32, y_, 1);
            ObjParticleList_SetExtraData(endList, num, 1, 0);
            ObjParticleList_AddInstance(endList);
        }
        //decimal point
        ObjParticleList_SetPosition(endList, 352 - 16, y_, 1);
        ObjParticleList_SetExtraData(endList, 14, 0, 0);
        ObjParticleList_AddInstance(endList);
        ObjParticleList_SetColor(endList, COLOR_WHITE);
    }
}