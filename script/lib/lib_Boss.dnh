//Boss common functions library, includes all libraries in /bosslib
#include "./lib_Common.dnh"
#include "./lib_Shot.dnh"
#include "./lib_Effect.dnh"
#include "./lib_Item.dnh"

#include "./bosslib/lib_Character.dnh"
#include "./bosslib/lib_BossUtil.dnh"

bool _bossAlive = true;
bool _isDamaged = false;

real _bossLife;
real _previousLife = 0;

real intersectionShot = 32;
real intersectionPlayer = 24;

function<void> InitBoss() {
    SetAreaCommonData(AREA_STAGE, "SCRIPT_SINGLE", GetOwnScriptID());
    InitCommon();
    InitEffectParticle();
    //if spell practice, set variables (drop no items)
    LoadShotData();
}

function<int> CreateBoss(string bossID_) {
    int objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    Boss_SetID(objBoss, bossID_);
    Boss_GetInitPosition(objBoss);
    Boss_SetVulnerable(objBoss, false); //Must set damage rate manually after transition effects
    ObjEnemy_Regist(objBoss);
    return objBoss;
}

function<void> UpdateBoss(int mainBoss_) { //update function to be run in mainloop of single (mainBoss_ is the primary boss object for multiple boss fights)
    _isDamaged = false;
    _bossLife = ObjEnemy_GetInfo(mainBoss_, INFO_LIFE);

    if (_bossLife < _previousLife) {
        if (_previousLife - _bossLife > 0.01) { //if the boss has lost more than a hundredth of a point of health from the last frame
            CallSFX(SND_DAMAGE);
            _isDamaged = true;
            AddScore(10 * (round (_previousLife - _bossLife))); //~10 points per point of boss health
        } else {
            CallSFX(SND_INVINCIBLE);
            ObjEnemy_SetLife(mainBoss_, ceil(_bossLife)); //accounts for how invincibility is handled
        }
    }

    if (_bossLife < 0) _bossAlive = false; //health check

    _previousLife = _bossLife;
}