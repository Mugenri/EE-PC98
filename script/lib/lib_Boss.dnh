//Boss common functions library, includes all libraries in /bosslib
#include "./lib_Common.dnh"
#include "./lib_Shot.dnh"
#include "./lib_Effect.dnh"
#include "./lib_Item.dnh"

#include "./bosslib/lib_Character.dnh"
#include "./bosslib/lib_BossUtil.dnh"

bool _bossAlive = true; //boss health > 0
bool _isDamaged = false; //used for damage animation
bool _isSpellVulnerable = true; //is vulnerable to bomb damage
bool _spellBarrier = false; //is spell barrier active

bool _isSurvival = false; //survival spell

real _bossLife; //current life
real _previousLife = 0; //life of previous frame

real intersectionShot = 32; //default intersection to shot
real intersectionPlayer = 24; //default intersection to player

function<void> InitBoss(bool isVulnerable_) { //Initialize a boss scene
    SetAreaCommonData(AREA_STAGE, "SCRIPT_SINGLE", GetOwnScriptID());
    InitCommon();
    InitEffectParticle();

    _isSpellVulnerable = isVulnerable_;

    //if spell practice, set variables (drop no items)
    //else ?
    _isSurvival = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_DURABLE_SPELL);

    if (_isSurvival) _isSpellVulnerable = false; //just in case

    LoadShotData();
}

function<int> CreateBoss(string bossID_) { //Initialize a boss object
    int objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    Boss_SetID(objBoss, bossID_);
    Boss_GetInitPosition(objBoss);
    Boss_SetVulnerable(objBoss, false); //Must set damage rate manually after transition effects
    Boss_SetIndicator(objBoss);
    ObjEnemy_Regist(objBoss);
    return objBoss;
}

function<void> UpdateBoss(int mainBoss_) { //update function to be run in mainloop of single (mainBoss_ is the primary boss object for multiple boss fights)
    _isDamaged = false;
    _bossLife = ObjEnemy_GetInfo(mainBoss_, INFO_LIFE);

    if (_bossLife < _previousLife) { //damage check
        if (_previousLife - _bossLife > 0.01 && !_isSurvival) { //if the boss has lost more than a hundredth of a point of health from the last frame
            CallSFX(SND_DAMAGE);
            _isDamaged = true;
            AddScore(10 * (round (_previousLife - _bossLife))); //~10 points per point of boss health
        } else {
            CallSFX(SND_INVINCIBLE);
            ObjEnemy_SetLife(mainBoss_, ceil(_bossLife)); //accounts for how invincibility is handled
        }
    }

    if (_bossLife <= 0) _bossAlive = false; //health check

    if (!_isSpellVulnerable && !_isSurvival && _spellBarrier == false && IsPlayerSpellActive() && _bossAlive) TSpellBarrier(mainBoss_); //bomb invulnerability check

    _previousLife = _bossLife;
}

task TSpellBarrier(int mainBoss_) {
    _spellBarrier = true;
    while (IsPlayerSpellActive() && _bossAlive) { //_bossAlive just in case
        Boss_SetVulnerable(mainBoss_, false);
        yield;
    }
    wait(15);
    Boss_SetVulnerable(mainBoss_, true);
    _spellBarrier = false;
}