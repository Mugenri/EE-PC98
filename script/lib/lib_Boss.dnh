//Boss common functions library, includes all libraries in /bosslib
#include "./lib_Common.dnh"
#include "./lib_Effect.dnh"
#include "./lib_Item.dnh"
#include "./lib_Shot.dnh"
#include "./lib_Spell.dnh"

#include "./bosslib/lib_Animation.dnh"
#include "./bosslib/lib_BossUtil.dnh"
#include "./bosslib/lib_Character.dnh"

int _spellID = -1; // currently running spell

bool _bossAlive = true; //boss health > 0
bool _isDamaged = false; //used for damage animation
bool _isSpellVulnerable = true; //is vulnerable to bomb damage
bool _spellBarrier = false; //is spell barrier active

bool _isSurvival = false; //survival spell

float _bossLife; //current life
float _previousLife = 0; //life of previous frame

float _intersectionShot = 28; //default intersection to shot
float _intersectionPlayer = 20; //default intersection to player

//Initialize a boss scene
function<void> Boss_Init(bool isVulnerable_) {
    SetAreaCommonData(AREA_STAGE, "SCRIPT_SINGLE", GetOwnScriptID());
    Spell_SetCurrent(_spellID);
    Common_Init();
    Particle_Init();

    _isSpellVulnerable = isVulnerable_;

    _isSurvival = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_DURABLE_SPELL);

    if (_isSurvival) _isSpellVulnerable = false; //just in case

    Shot_Init();
}
//Initialize a boss object
function<int> Boss_Create(string bossID_) {
    int objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    Boss_SetID(objBoss, bossID_);
    Animation_DrawBoss(objBoss);
    Boss_GetInitPosition(objBoss);
    Boss_SetVulnerable(objBoss, false); //Must set damage rate manually after transition effects
    Boss_SetIndicator(objBoss);
    ObjEnemy_Regist(objBoss);
    return objBoss;
}
//Initialize a boss object at a given coordinate
function<int> Boss_Create(string bossID_, float x_, float y_) {
    Boss_SetInitPosition(bossID_, x_, y_);
    return Boss_Create(bossID_);
}
//update function to be run in mainloop of single TODO test double bosses with two health pools
function<void> Boss_Update(int objBoss_) {
    _isDamaged = false;
    _bossLife = ObjEnemy_GetInfo(objBoss_, INFO_LIFE);

    if (_bossLife <= 0) {
        _bossAlive = false; //health check
        return;
    }

    if (_bossLife < _previousLife) { //damage check
        if (_previousLife - _bossLife > 0.01 && !_isSurvival) { //if the boss has lost more than a hundredth of a point of health from the last frame
            CallSFX(SND_DAMAGE);
            _isDamaged = true;
            AddScore(10 * (round (_previousLife - _bossLife))); //~10 points per point of boss health
        } else {
            CallSFX(SND_INVINCIBLE);
            ObjEnemy_SetLife(objBoss_, ceil(_bossLife)); //accounts for how invincibility is handled
        }
    }

    if (!_isSpellVulnerable && !_isSurvival && _spellBarrier == false && IsPlayerSpellActive() && _bossAlive) TSpellBarrier(objBoss_); //bomb invulnerability check

    _previousLife = _bossLife;

    task TSpellBarrier(int objBoss_) {
        _spellBarrier = true;
        while (IsPlayerSpellActive() && _bossAlive) { //_bossAlive just in case
            Boss_SetVulnerable(objBoss_, false);
            yield;
        }
        wait(15);
        _spellBarrier = false;
        Boss_SetVulnerable(objBoss_, true);
    }
}

//Call at the end of a single
function<void> Boss_Finalize(int obj_) {
    float xPos = ObjMove_GetX(obj_);
    float yPos = ObjMove_GetY(obj_);
    SetAreaCommonData(AREA_STAGE, "Pos_Bonus", [xPos, yPos]); //Spell bonus yellow ascii text position

    bool isSpell = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_SPELL);
    bool isFinal = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_LAST_STEP);
    bool isCapture = Boss_IsSpellCaptured();

    int currentStage = GetStageIndex();
    int currentSpell = Spell_GetCurrent();
    if (isCapture) Spell_Captured(currentStage, currentSpell);

    if (isFinal) {
        ObjMove_CancelMovement(obj_); //stop movement if final spell/spell practice
        SetPlayerInvincibilityFrame(60);
        Particle_RandomExplosionBig(xPos, yPos); //this function is blocking
        Obj_SetVisible(obj_, false);
        StartSlow(TARGET_ALL, 30);
    } else {
        Particle_RandomExplosionSmall(xPos, yPos);
    }

    //Boss drops 5 point items regardless
    loop (5) CreateItem(xPos + rand(-32, 32), yPos + rand(-32, 32), ITEM_SCORE);

    //Items and Bullet Cancel score values (only for spell cards)
    int scoreTotal = 0;
    if (isCapture && isSpell) { //spell capture
        int score = 10;
        int scoreBonus = 10;
        int numBullets = 0;
        float radius = 200;
        loop (5) {
            for each (shot in GetShotIdInCircleA2(MID_X, MID_Y - GetStgFrameHeight() / 2, radius, TARGET_ENEMY)) { //TODO maybe change to boss location?
                if (ObjMove_GetX(shot) < -16 || ObjMove_GetX(shot) > GetStgFrameWidth() + 16 || ObjMove_GetY(shot) < -16 || ObjMove_GetY(shot) > GetStgFrameHeight() + 16) {
                    continue; //no items spawn off screen
                } else if (radius == 600) { //assign shot score bonus, only runs on final loop
                    Obj_SetValueI(shot, SHOT_SCORE, score);
                    scoreTotal += score;
                    score += scoreBonus;
                    scoreBonus += 10;
                    score = clamp(score, 0, 12800);
                }
                if (numBullets < 35 && Obj_GetType(shot) == OBJ_SHOT && rand_int(1, 4) == 1) { //random <= 35 bullets drop point items
                    Obj_SetValueI(shot, SHOT_DROP_ITEM, true);
                    numBullets++;
                }
            }
            radius += 100;
        }
    } else if (!isCapture && isSpell) { //if capture is failed on any type of spell
        scoreTotal = -1;
    } //scoreTotal remains 0 otherwise

    if (isSpell) NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_CANCEL_BONUS, scoreTotal); //Shot cancel bonus text
    
    DeleteShotAll(TYPE_ALL, TYPE_ITEM); //Delete to item for score text

    async { //120 frames
        wait(64); //explosion time
        StopSlow(TARGET_ALL); //if slow is active
        wait(56); //grace period

        //Setup boss init position for next single
        xPos = ObjMove_GetX(obj_);
        yPos = ObjMove_GetY(obj_);
        Boss_SetInitPosition(obj_, xPos, yPos);
        Obj_Delete(obj_);

        //Close script
        SetAutoDeleteObject(true);
        CloseScript(GetOwnScriptID());
    }
}