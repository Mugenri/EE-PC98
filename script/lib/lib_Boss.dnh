//Boss common functions library, includes all libraries in /bosslib
#include "./lib_Common.dnh"
#include "./lib_Effect.dnh"
#include "./lib_Item.dnh"
#include "./lib_Shot.dnh"
#include "./lib_Spell.dnh"

#include "./bosslib/lib_Animation.dnh"
#include "./bosslib/lib_BossUtil.dnh"
#include "./bosslib/lib_Character.dnh"

int _spellID = -1; // currently running spell

bool _isSpellVulnerable = true; //is current spell vulnerable to bomb damage
bool _isSurvival = false; //survival spell

//Default intersection radii
float _intersectionShot = 28;
float _intersectionPlayer = 20;

//Initialize a boss scene
function<void> Boss_Init(bool isVulnerable_) {
    SetAreaCommonData(AREA_STAGE, "SCRIPT_SINGLE", GetOwnScriptID());
    Spell_SetCurrent(_spellID);
    Common_Init();
    Particle_Init();

    _isSpellVulnerable = isVulnerable_;

    _isSurvival = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_DURABLE_SPELL);

    if (_isSurvival) _isSpellVulnerable = false; //just in case

    Shot_Init();
}
//Initialize a boss object
function<int> Boss_Create(string bossID_) {
    int objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    Boss_SetID(objBoss, bossID_);
    Animation_DrawBoss(objBoss);
    Boss_GetInitPosition(objBoss);
    Boss_SetVulnerable(objBoss, false); //Must set damage rate manually after transition effects
    Boss_SetIndicator(objBoss);
    ObjEnemy_Regist(objBoss);
    return objBoss;
}
//Initialize a boss object at a given coordinate
function<int> Boss_Create(string bossID_, float x_, float y_) {
    Boss_SetInitPosition(bossID_, x_, y_);
    return Boss_Create(bossID_);
}
//update function to be run in mainloop of single TODO test double bosses with two health pools
function<void> Boss_Update(int objBoss_) {
    //set object values
    Obj_SetValueI(objBoss_, BOSS_X, ObjMove_GetX(objBoss_));
    Obj_SetValueI(objBoss_, BOSS_Y, ObjMove_GetY(objBoss_));
    Obj_SetValueI(objBoss_, BOSS_LIFE, ObjEnemy_GetInfo(objBoss_, INFO_LIFE));
    Obj_SetValueI(objBoss_, BOSS_DAMAGED, false);

    //get object values
    float bossLife = Boss_Life(objBoss_); //current life
    float previousLife = Obj_GetValueDI(objBoss_, BOSS_LIFE_PREV, bossLife); //previous frame life
    float previousDamage = Obj_GetValueDI(objBoss_, BOSS_DMG_PREV, 0); //leftover decimal damage from last frame (for score calculation)

    if (bossLife <= 0) {
        Obj_SetValueI(objBoss_, BOSS_ALIVE, false); //health check
        return;
    }

    if (bossLife < previousLife) { //damage check
        if (previousLife - bossLife > 0.01 && !_isSurvival) { //if the boss has lost more than a hundredth of a point of health from the last frame
            if (bossLife > 400) CallSFX(SND_DAMAGE);
            else CallSFX(SND_DAMAGE_LOW);
            Obj_SetValueI(objBoss_, BOSS_DAMAGED, true);
            previousDamage += previousLife - bossLife;
            AddScore(10 * trunc(previousDamage)); //10 points per whole point of damage taken
        } else {
            CallSFX(SND_INVINCIBLE);
            ObjEnemy_SetLife(objBoss_, ceil(bossLife)); //accounts for how invincibility is handled
        }
    }

    if (!_isSpellVulnerable && !_isSurvival && Boss_IsBombBarrier(objBoss_) == false && IsPlayerSpellActive() && Boss_Alive(_objBoss)) TSpellBarrier(objBoss_); //bomb invulnerability check

    Obj_SetValueI(objBoss_, BOSS_LIFE_PREV, bossLife);
    Obj_SetValueI(objBoss_, BOSS_DMG_PREV, previousDamage - trunc(previousDamage)); //remaining decimal of previous damage

    task TSpellBarrier(int objBoss_) {
        Obj_SetValueI(objBoss_, BOSS_BOMB_BARRIER, true);
        while (IsPlayerSpellActive() && Boss_Alive(objBoss_)) { //Boss_Alive() just in case
            Boss_SetVulnerable(objBoss_, false);
            yield;
        }
        wait(15);
        Obj_SetValueI(objBoss_, BOSS_BOMB_BARRIER, false);
        Boss_SetVulnerable(objBoss_, true);
    }
}

//Call at the end of a single
function<void> Boss_Finalize(int obj_) {
    float xPos = ObjMove_GetX(obj_);
    float yPos = ObjMove_GetY(obj_);
    SetAreaCommonData(AREA_STAGE, "Pos_Bonus", [xPos, yPos]); //Spell bonus yellow ascii text position

    int gameMode = GetGameMode();
    bool isSpell = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_SPELL);
    bool isFinal = ObjEnemyBossScene_GetInfo(_objScene, INFO_IS_LAST_STEP);
    bool isCapture = Boss_IsSpellCaptured();
    int timer = ObjEnemyBossScene_GetInfo(_objScene, INFO_TIMERF);

    int currentStage = GetStageIndex();
    int currentSpell = Spell_GetCurrent();
    if (isCapture) Spell_Captured(currentStage, currentSpell);

    if (isFinal && gameMode == GAME_MAIN) {
        ObjMove_CancelMovement(obj_); //stop movement if final spell/spell practice
        SetPlayerInvincibilityFrame(60);
        Particle_RandomExplosionBig(xPos, yPos); //this function is blocking
        Obj_SetVisible(obj_, false);
        StartSlow(TARGET_ALL, 30);
    } else {
        Particle_RandomExplosionSmall(xPos, yPos);
        if (gameMode == GAME_SPELL) ObjMove_SetDestAtFrame(obj_, -64, -64, 60, LERP_ACCELERATE);
    }

    //Boss drops 5 point items regardless
    loop (5) CreateItem(xPos + rand(-32, 32), yPos + rand(-32, 32), ITEM_SCORE);

    //Items and Bullet Cancel score values (only for spell cards)
    int scoreTotal = 0;
    int score = isSpell ? 1000 : 500; //starting score for scaling
    if (isCapture && isSpell) { //spell capture
        int scoreBonus = 100; //adiitonal score per bullet on top of starting score
        int numBullets = 0; //bullets to become items
        float radius = 200;
        loop (5) {
            for each (shot in GetShotIdInCircleA2(GetPlayerX(), GetPlayerY(), radius, TARGET_ENEMY)) {
                if (ObjMove_GetX(shot) < MIN_X || ObjMove_GetX(shot) > MAX_X || ObjMove_GetY(shot) < MIN_Y || ObjMove_GetY(shot) > MAX_Y) continue; //no items spawn off screen
                else if (radius == 600 && Obj_GetType(shot) == OBJ_SHOT) { //assign shot score bonus, only runs on final loop
                    Obj_SetValueI(shot, SHOT_SCORE, score);
                    Obj_SetValueI(shot, SHOT_SCORE_TEXT, true);
                    scoreTotal += score;
                    score += scoreBonus;
                    score = clamp(score, 0, 12800);

                    //assign item to bullets if below cap
                    if (numBullets < 35 && !Obj_GetValueDI(shot, SHOT_DROP_ITEM, false)) {
                        Obj_SetValueI(shot, SHOT_DROP_ITEM, true);
                        numBullets++;
                    }
                }
                if (numBullets < 35 && Obj_GetType(shot) == OBJ_SHOT && rand_int(1, 4) == 1 && !Obj_GetValueDI(shot, SHOT_DROP_ITEM, false)) { //random 35 bullets drop point items
                    Obj_SetValueI(shot, SHOT_DROP_ITEM, true);
                    numBullets++;
                }
            }
            radius += 100;
        }
    } else if ((!isCapture || !isSpell) && (timer > 0 || _isSurvival)) { //spell capture fail or nonspell
        for each (shot in GetShotIdInCircleA2(MID_X, MID_Y, 600, TARGET_ENEMY)) {
            if (ObjMove_GetX(shot) < MIN_X || ObjMove_GetX(shot) > MAX_X || ObjMove_GetY(shot) < MIN_Y || ObjMove_GetY(shot) > MAX_Y) continue; //no score for bullets offscreen
            else if (Obj_GetType(shot) == OBJ_SHOT) Obj_SetValueI(shot, SHOT_SCORE, score);
        }
        scoreTotal = -1;
    } else { //timeout non-survival spell
        scoreTotal = -1;
    }

    if (isSpell) NotifyEvent(GetAreaCommonData(AREA_SYSTEM, "SCRIPT_SYSTEM", 0), EV_CANCEL_BONUS, scoreTotal); //Shot cancel bonus text
    
    DeleteShotAll(TYPE_ALL, TYPE_ITEM); //Delete to item for score text

    async { //120 frames
        wait(64); //explosion time
        StopSlow(TARGET_ALL); //if slow is active
        wait(56); //grace period

        //Setup boss init position for next single
        xPos = ObjMove_GetX(obj_);
        yPos = ObjMove_GetY(obj_);
        Boss_SetInitPosition(obj_, xPos, yPos);
        Obj_Delete(obj_);

        //Close script
        SetAutoDeleteObject(true);
        CloseScript(GetOwnScriptID());
    }
}