//Highscore functions library
//format is mode, player, stageIndex, difficulty
//spell format is mode, player, stageIndex, spellID, difficulty
//stored like eg. MAIN_0_1_4

function<int> HS_GetHighScore(int default_) { //get a highscore from the current field
    return GetAreaCommonData(AREA_HIGHSCORE, HS_GetHighScoreField(), default_);
}

function<int> HS_GetHighScore(string field_, int default_) { //get a highscore from the specified field
    return GetAreaCommonData(AREA_HIGHSCORE, field_, default_);
}

function<string> HS_GetHighScoreField() { //current mode, player, stageIndex, difficulty or mode, player, stage/spell
    string fieldName;
    
    int mode = GetGameMode();
    string player = IntToString(GetPlayerType());
    string stageIndex = IntToString(GetStageIndex());

    alternative (mode)
    case (GAME_NONE) assert(false, "Tried to get a high score without a selected game mode.");
    case (GAME_MAIN) { //normal game
        string difficulty = IntToString(GetDifficulty());
        fieldName = "MAIN_" ~ player ~ "_" ~ stageIndex ~ "_" ~ difficulty;
    }
    case (GAME_SPELL) { //spell practice
        string spellID = IntToString(GetSpellPracticeID());
        fieldName = "SPELL_" ~ player ~ "_" ~ stageIndex ~ "_" ~ spellID;
    }

    return fieldName;
}

function<bool> HS_SetHighScore(int score_, int default_) {
    if (HS_GetHighScore(default_) >= score_) return false;
    SetAreaCommonData(AREA_HIGHSCORE, HS_GetHighScoreField(), score_);
    return true;
}

function<int> HS_GetDefaultScore(int gameMode_) {
    alternative (gameMode_)
    case (GAME_MAIN)    { return 001_000_000; }
    case (GAME_SPELL)   { return 0; }
    others { assert(false, gameMode_ ~ " is an invalid game mode."); }
}