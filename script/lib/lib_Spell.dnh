//spell name & history library
//Formatted SpellSeen/Captured_GAMEMODE_STAGE_SPELL

//Spell history
function<void> Spell_Seen(int stageIndex_, int spellID_) {
    if (IsReplay()) return;
    int gameMode = GetGameMode();
    int[] history = Spell_GetHistory(gameMode, stageIndex_, spellID_);
    SetAreaCommonData(AREA_SAVE, "SpellSeen_" ~ IntToString(gameMode) ~ "_" ~ IntToString(stageIndex_) ~ "_" ~ IntToString(spellID_), history[0] + 1);
}
function<void> Spell_Captured(int stageIndex_, int spellID_) {
    if (IsReplay()) return;
    int gameMode = GetGameMode();
    int[] history = Spell_GetHistory(gameMode, stageIndex_, spellID_);
    SetAreaCommonData(AREA_SAVE, "SpellCaptured_" ~ IntToString(gameMode) ~ "_" ~ IntToString(stageIndex_) ~ "_" ~ IntToString(spellID_), history[1] + 1);
}
function<int[]> Spell_GetHistory(int gameMode_, int stageIndex_, int spellID_) {
    assert(spellID_ != 0, "Invalid Spell ID");
    int[] history = [];
    history = history ~ [GetAreaCommonData(AREA_SAVE, "SpellSeen_" ~ IntToString(gameMode_) ~ "_" ~ IntToString(stageIndex_) ~ "_" ~ IntToString(spellID_), 0)];
    history = history ~ [GetAreaCommonData(AREA_SAVE, "SpellCaptured_" ~ IntToString(gameMode_) ~ "_" ~ IntToString(stageIndex_) ~ "_" ~ IntToString(spellID_), 0)];
    return history;
}

//Stage functions (stage index handeled by system script)
function<void> Spell_SetCurrent(int spellID_, bool startSpell_) {
    SetAreaCommonData(AREA_STAGE, "Current_SpellID", spellID_);
    if (startSpell_) ObjEnemyBossScene_StartSpell(_objScene);
}
function<int> Spell_GetCurrent() {
    return GetAreaCommonData(AREA_STAGE, "Current_SpellID", 0);
}

//get non/spell name based on ID
function<string> Spell_GetName(int stageIndex_, int spellID_) {
    alternative (stageIndex_)
    case (0) { //Tsurubami
        alternative (spellID_)
        case (0, 1, 2)      { return "Nonspell 1"; }
        case (3, 4, 5)      { return "Drizzle Card \"Inkshower Downpour\""; }
        case (6, 7, 8)      { return "Nonspell 2"; }
        case (9, 10, 11)    { return "Snare Card \"Talisman Skewer\""; }
        case (12, 13, 14)   { return "Nonspell 3"; }
        case (15, 16, 17)   { return "Reflection Card \"Moonlight Lattice\""; }
        case (18, 19, 20)   { return "Nonspell 4"; }
        case (21, 22, 23)   { return "Senri Technique \"Donation Overflow\""; }
        case (24, 25, 26)   { return "Nonspell 5"; }
        case (27, 28, 29)   { return "Senri Technique \"Ink Projection Youkai Seal\""; }
        case (30, 31, 32)   { return "Nonspell 6"; }
        case (33, 34, 35)   { return "Severing Card \"Burial Under Cloudy Skies\""; }
        others { assert(false, "Invalid Spell ID."); }
    }
    others { assert(false, "Invalid Stage Index."); }
}