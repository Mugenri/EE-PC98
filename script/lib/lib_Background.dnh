//Background functions library
int _bIndex = -1; //Used by event in stage script
int _priority = RP_STG_BG2; //switches to BG1 on first call
int _transitionTime = 0; //used for timing removal of background transition shaders and exiting of background tasks
int _objShader; //background transition shader

function<void> InitBackground(int index_) {
    TUpdateRenderTargets();
    //Initialize shader object.
    _objShader = ObjShader_Create();
    ObjShader_SetShaderF(_objShader, HLSL_TRANSITION); //texture mask shader
    ObjShader_SetTexture(_objShader, "textureMask_", RT_TRANSITION); //set texture to the transition render target
    ObjShader_SetTechnique(_objShader, "TecMask");
    //Required function by including library. Cuts to index_ background on startup
    UpdateBackground(index_, 0);
}

function<void> UpdateBackground(int index_, int time_) {
    _transitionTime = time_; //also serves as transition time for closing running background task
    _priority = _priority == RP_STG_BG1 ? RP_STG_BG2 : RP_STG_BG1; //switch to unused background render priority ranges
    assert(index_ != _bIndex, "Attempted to transition to the same index background.");

    ChangeIndex(index_, _priority); //MUST be defined by including library

    //bakcground draw object
    int canvas = GetCanvas(time_ != 0);

    async {
        wait(time_); //time that transition graphic is on screen (for shader)
        ObjShader_ResetShader(canvas); //remove shader from canvas object
        while (index_ == _bIndex) yield;
        wait(_transitionTime); //hold old canvas object while new transition is playing
        Obj_Delete(canvas);
    }
}

task TUpdateRenderTargets() { //assigns render priority ranges to render targets
    loop {
        RenderToTextureA1(RT_BG1, RP_STG_BG1, RP_STG_EFF_BG1, true);
        RenderToTextureA1(RT_BG2, RP_STG_BG2, RP_STG_EFF_BG2, true);
        RenderToTextureA1(RT_TRANSITION, RP_STG_TRANSITION1, RP_STG_TRANSITION1, true);
        yield;
    }
}

function<int> GetCanvas(bool useShader_) { //return a canvas with the correct render target as its texture
    int canvas = ObjPrim_Create(OBJ_SPRITE_2D);
    if (useShader_) ObjShader_SetShaderO(canvas, _objShader); //apply shader if not cut transition
    ObjPrim_SetTexture(canvas, _priority == RP_STG_BG1 ? RT_BG1 : RT_BG2); //set texture to current priority range render target
    Obj_SetRenderPriorityI(canvas, RP_STG_BG); //render to background draw layer
    ObjSprite2D_SetSourceRect(canvas, 32, 16, 416, 384);
    ObjSprite2D_SetDestRect(canvas, 0, 0, MAX_X, MAX_Y);
    return canvas;
}