//Custom laser behavior library

int _laserParticle = InitParticleList(IMG_EFFECT_PARTICLE, RP_STG_LASER1, [0, 48, 16, 64]); //curvy laser particle list

function<int> CreateLooseLaserUA1(float x_, float y_, float speed_, float angle_, float maxLength_, int color_, int delay_) {
    //Object Creation
    //Hitbox and position/angle
    int time = 550 / speed_ + maxLength_ / speed_; //rough amount of frames it will take the laser to leave the screen (550px is hypotenuse of stg window)
    int hitbox = CreateStraightLaserA1(x_, y_, angle_, 0, 16, time + delay_, 1, 0);
    ObjShot_SetIntersectionEnable(hitbox, false);
    Obj_SetValueI(hitbox, SHOT_CANCEL, true);
    ObjLaser_SetInvalidLength(hitbox, 0, 0);
    Obj_SetVisible(hitbox, false);
    //colored
    int circle1 = CreateCircle(true);
    int line1 = CreateLine(true);
    //white
    int circle2 = CreateCircle(false);
    int line2 = CreateLine(false);

    //Update loop 
    async {
        wait(delay_);
        Obj_SetVisible(circle1, true);
        Obj_SetVisible(line1, true);
        Obj_SetVisible(circle2, true);
        Obj_SetVisible(line2, true);

        float laserLength = 0;
        float x = ObjMove_GetX(hitbox);
        float y = ObjMove_GetY(hitbox);
        float angle = ObjStLaser_GetAngle(hitbox);
        bool full = false;

        ObjShot_SetIntersectionEnable(hitbox, true);

        while (!Obj_IsDeleted(hitbox)) {
            x = ObjMove_GetX(hitbox);
            y = ObjMove_GetY(hitbox);
            angle = ObjStLaser_GetAngle(hitbox);
            if (laserLength < maxLength_) {
                laserLength = min(laserLength + speed_, maxLength_);
                ObjLaser_SetLength(hitbox, laserLength);
                UpdateCircle(x, y);
            } else if (!full) {
                full = true;
                Obj_Delete(circle1);
                Obj_Delete(circle2);
            }
            
            if (full) {
                x += speed_ * cos(angle);
                y += speed_ * sin(angle);
                ObjMove_SetX(hitbox, x);
                ObjMove_SetY(hitbox, y);
            }

            UpdateLine(x, y, angle, laserLength);
            yield;
        }

        if (!Obj_IsDeleted(circle1)) Obj_Delete(circle1);
        if (!Obj_IsDeleted(circle2)) Obj_Delete(circle2);
        Obj_Delete(line1);
        Obj_Delete(line2);

        function<void> UpdateCircle(float x_, float y_) {
            //all circles' positions are casted as integers so their shape is the same regardless of location on screen
            int xInt = as_int(x_);
            int yInt = as_int(y_);
            ObjPrim_SetVertexPosition(circle1, 0, xInt, yInt, 1); //colored
            ObjPrim_SetVertexPosition(circle2, 0, xInt, yInt, 1); //white
            for (int i = 1; i < 14; i++) {
                float angleT = 360 / 12 * i;
                float thetaX = cos(angleT);
                float thetaY = sin(angleT);
                ObjPrim_SetVertexPosition(circle1, i, xInt + 6 * thetaX, yInt + 6 * thetaY, 1);
                ObjPrim_SetVertexPosition(circle2, i, xInt + 4 * thetaX, yInt + 4 * thetaY, 1);
            }
        }

        function<void> UpdateLine(float x_, float y_, float angle_, float length_) {
            float thetaX = cos(angle_);
            float thetaY = sin(angle_);
            //colored
            ObjPrim_SetVertexPosition(line1, 0, x_ + 4 * -thetaY, y_ + 4 * thetaX, 1);
            ObjPrim_SetVertexPosition(line1, 1, x_ + 4 * thetaY, y_ + 4 * -thetaX, 1);
            ObjPrim_SetVertexPosition(line1, 2, x_ + 4 * -thetaY + length_ * thetaX, y_ + 4 * thetaX + length_ * thetaY, 1);
            ObjPrim_SetVertexPosition(line1, 3, x_ + 4 * thetaY + length_ * thetaX, y_ + 4 * -thetaX + length_ * thetaY, 1);
            //white
            ObjPrim_SetVertexPosition(line2, 0, x_ + 2 * -thetaY, y_ + 2 * thetaX, 1);
            ObjPrim_SetVertexPosition(line2, 1, x_ + 2 * thetaY, y_ + 2 * -thetaX, 1);
            ObjPrim_SetVertexPosition(line2, 2, x_ + 2 * -thetaY + length_ * thetaX, y_ + 2 * thetaX + length_ * thetaY, 1);
            ObjPrim_SetVertexPosition(line2, 3, x_ + 2 * thetaY + length_ * thetaX, y_ + 2 * -thetaX + length_ * thetaY, 1);
        }
    }

    return hitbox;

    function<int> CreateCircle(bool colored_) {
        int obj = InitPrim2D(PRIMITIVE_TRIANGLEFAN, 14, RP_STG_LASER1);
        Obj_SetVisible(obj, false);
        //set color
        int color = colored_ ? color_ : COLOR_WHITE;
        ObjRender_SetColor(obj, color);
        return obj;
    }

    function<int> CreateLine(bool colored_) {
        int obj = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 4, RP_STG_LASER1);
        Obj_SetVisible(obj, false);
        //set color
        int color = colored_ ? color_ : COLOR_WHITE;
        ObjRender_SetColor(obj, color);
        return obj;
    }
}

function<int> CreateStraightLaserUA1(float x_, float y_, float angle_, float length_, float sustain_, int color_, int delay_) {
    //Object Creation
    //Hitbox and position/angle
    int hitbox = CreateStraightLaserA1(x_, y_, angle_, length_, 24, sustain_ + delay_, 1, 0);
    ObjShot_SetIntersectionEnable(hitbox, false);
    Obj_SetValueI(hitbox, SHOT_CANCEL, false);
    ObjLaser_SetInvalidLength(hitbox, 0, 0);
    Obj_SetVisible(hitbox, false);
    //colored
    int circle1 = CreateCircle(true);
    int line1 = CreateLine(true);
    //white
    int circle2 = CreateCircle(false);
    int line2 = CreateLine(false);
    //delay laser
    int guide1 = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_STG_LASER1);
    //delay laser origin
    int guide2 = InitSprite2D(16, 0, 32, 16, IMG_EFFECT_PARTICLE, RP_STG_LASER1);
    ObjSprite2D_SetDestCenter(guide2);

    //Update loop 
    async {
        float radius = 0; //radius of white part
        //declared in this scope so they can be stored if the hitbox is deleted before the laser animation is complete
        float angle = ObjStLaser_GetAngle(hitbox);
        float len = ObjLaser_GetLength(hitbox);
        bool doRetract = true; //do retraction animation
        loop (max(0, delay_ - 9)) {
            if (Obj_IsDeleted(hitbox)) {
                doRetract = false;
                break;
            }
            UpdatePosition(0);
            yield;
        }
        Obj_SetVisible(circle1, true);
        Obj_SetVisible(line1, true);
        Obj_SetVisible(circle2, true);
        Obj_SetVisible(line2, true);
        while (radius <= 2) { //expand laser
            loop (3) {
                if (Obj_IsDeleted(hitbox)) break;
                UpdatePosition(radius);
                yield;
            }
            radius++;
        }
        ObjShot_SetIntersectionEnable(hitbox, true);
        loop (sustain_) {
            if (Obj_IsDeleted(hitbox)) break;
            UpdatePosition(3);
            yield;
        }
        if (radius > 2) radius = 2;
        while (radius >= 0 && doRetract) { //contract laser
            loop (3) {
                UpdatePosition(radius);
                yield;
            }
            radius--;
        }

        Obj_Delete(guide1);
        Obj_Delete(guide2);
        Obj_Delete(circle1);
        Obj_Delete(line1);
        Obj_Delete(circle2);
        Obj_Delete(line2);

        function<void> UpdatePosition(int radius_) {
            float scale = radius_ / 3;
            if (!Obj_IsDeleted(hitbox)) {
                x_ = ObjMove_GetX(hitbox);
                y_ = ObjMove_GetY(hitbox);
                angle = ObjStLaser_GetAngle(hitbox);
                len = ObjLaser_GetLength(hitbox);
            }
            float thetaX = cos(angle);
            float thetaY = sin(angle);
            //delay laser
            if (!Obj_IsDeleted(guide1)) {
                ObjPrim_SetVertexPosition(guide1, 0, x_, y_, 1);
                ObjPrim_SetVertexPosition(guide1, 1, x_ + len * thetaX, y_ + len * thetaY, 1);
            }
            //all circles' positions are casted as integers so their shape is the same regardless of location on screen
            ObjRender_SetPosition(guide2, x_, y_, 1);
            ObjRender_SetPosition(circle1, x_, y_, 1); //colored
            ObjRender_SetPosition(circle2, x_, y_, 1); //white
            ObjRender_SetScaleXYZ(circle1, scale, scale, 1);
            ObjRender_SetScaleXYZ(circle2, scale, scale, 1);
            //line angles
            // float cos(angle + 90) = -thetaY;
            // float cos(angle - 90) = thetaY;
            // float sin(angle + 90) = thetaX;
            // float sin(angle - 90) = -thetaX;
            //colored
            ObjPrim_SetVertexPosition(line1, 0, x_ + (radius_ + 2) * -thetaY, y_ + (radius_ + 2) * thetaX, 1);
            ObjPrim_SetVertexPosition(line1, 1, x_ + (radius_ + 2) * thetaY, y_ + (radius_ + 2) * -thetaX, 1);
            ObjPrim_SetVertexPosition(line1, 2, x_ + (radius_ + 2) * -thetaY + len * thetaX, y_ + (radius_ + 2) * thetaX + len * thetaY, 1);
            ObjPrim_SetVertexPosition(line1, 3, x_ + (radius_ + 2) * thetaY + len * thetaX, y_ + (radius_ + 2) * -thetaX + len * thetaY, 1);
            //white
            ObjPrim_SetVertexPosition(line2, 0, x_ + radius_ * -thetaY, y_ + radius_ * thetaX, 1);
            ObjPrim_SetVertexPosition(line2, 1, x_ + radius_ * thetaY, y_ + radius_ * -thetaX, 1);
            ObjPrim_SetVertexPosition(line2, 2, x_ + radius_ * -thetaY + len * thetaX, y_ + radius_ * thetaX + len * thetaY, 1);
            ObjPrim_SetVertexPosition(line2, 3, x_ + radius_ * thetaY + len * thetaX, y_ + radius_ * -thetaX + len * thetaY, 1);
        }
    }

    return hitbox;

    function<int> CreateCircle(bool colored_) {
        int obj = InitSprite2D(32 - 32 * colored_, 128, 64 - 32 * colored_, 160, IMG_EFFECT_PARTICLE, colored_ ? RP_STG_LASER1 : RP_STG_LASER2);
        Obj_SetVisible(obj, false);
        ObjRender_SetColor(obj, colored_ ? color_ : COLOR_WHITE);
        ObjSprite2D_SetDestCenter(obj);
        return obj;
    }

    function<int> CreateLine(bool colored_) {
        int obj = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 4, colored_ ? RP_STG_LASER1 : RP_STG_LASER2);
        Obj_SetVisible(obj, false);
        ObjRender_SetColor(obj, colored_ ? color_ : COLOR_WHITE);
        return obj;
    }
}

function<int> CreateCurveLaserUA1(float x_, float y_, float speed_, float angle_, int length_, int color_, int delay_) {
    int hitbox = CreateCurveLaserA1(x_, y_, speed_, angle_, length_, 32, 1, delay_);
    Obj_SetValueI(hitbox, SHOT_CANCEL, false);
    ObjLaser_SetInvalidLength(hitbox, 0, 0);
    Obj_SetVisible(hitbox, false);

    async {
        wait(delay_);
        while (!Obj_IsDeleted(hitbox)) {
            int[] nodes = ObjCrLaser_GetNodePointerList(hitbox);
            for each (node in nodes) {
                float[] pos = ObjCrLaser_GetNodePosition(hitbox, node);
                ObjParticleList_SetPosition(_laserParticle, pos[0], pos[1], 1);
                ObjParticleList_SetColor(_laserParticle, color_);
                ObjParticleList_AddInstance(_laserParticle);
            }
            yield;
        }
    }
    return hitbox;
}

function<int> CreateMasterSpark(float x_, float y_, float angle_, float length_, float maxWidth_, float sustain_, int colorOut_, int colorIn_, int delay_) {
    //This will fuck up the hitbox if it isn't true.
    if (maxWidth_ > length_) length_ = maxWidth_;
    //Object Creation
    //Hitbox and position/angle
    int controller = CreateStraightLaserA1(x_, y_, angle_, length_, 0, sustain_ + 50, 1, delay_);

    ObjShot_SetSpellResist(controller, true);
    Obj_SetValueI(controller, SHOT_CANCEL, false);
    Obj_SetVisible(controller, false);
    //colorOut
    int circle1 = CreateCircle(colorOut_);
    int line1 = CreateLine(colorOut_);
    //colorIn
    int circle2 = CreateCircle(colorIn_);
    int line2 = CreateLine(colorIn_);
    //white
    int circle3 = CreateCircle(COLOR_WHITE);
    int line3 = CreateLine(COLOR_WHITE);

    //delay laser
    int guide1 = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_STG_LASER1);

    //Update loop 
    async {
        int frames = 30; //laser expansion time
        float width = 0;
        loop (delay_) {
            if (Obj_IsDeleted(controller)) break;
            UpdatePosition(0);
            yield;
        }
        Obj_SetVisible(guide1, false);
        Obj_SetVisible(circle1, true);
        Obj_SetVisible(line1, true);
        Obj_SetVisible(circle2, true);
        Obj_SetVisible(line2, true);
        Obj_SetVisible(circle3, true);
        Obj_SetVisible(line3, true);
        //declared in this scope so they can be stored if the controller is deleted before the laser animation is completed
        float angle = ObjStLaser_GetAngle(controller);
        float len = ObjLaser_GetLength(controller);
        //expand laser
        while (width < maxWidth_) {
            if (Obj_IsDeleted(controller)) break;
            UpdatePosition(width / 2); //radius
            width += maxWidth_ / frames;
            yield;
        }
        loop (sustain_) { //hold
            if (Obj_IsDeleted(controller)) break;
            UpdatePosition(width / 2);
            yield;
        }
        //contract laser
        while (width > 0) {
            UpdatePosition(width / 2);
            width -= maxWidth_ / frames;
            yield;
        }
        Obj_Delete(guide1);
        Obj_Delete(circle1);
        Obj_Delete(line1);
        Obj_Delete(circle2);
        Obj_Delete(line2);
        Obj_Delete(circle3);
        Obj_Delete(line3);

        function<void> UpdatePosition(int radius_) {
            float radiusOut = min(radius_ * 1.32, radius_ + 16);
            float radiusIn = min(radius_ * 1.16, radius_ + 8);
            if (!Obj_IsDeleted(controller)) { //update laser position/angle/length if the controller still exists
                x_ = ObjMove_GetX(controller);
                y_ = ObjMove_GetY(controller);
                angle = ObjStLaser_GetAngle(controller);
                len = ObjLaser_GetLength(controller) - radius_; //length of laser after the center of the circular part
            }
            float thetaX = cos(angle);
            float thetaY = sin(angle);
            //center of circular part, base of line part
            float x = x_ + radiusOut * thetaX;
            float y = y_ + radiusOut * thetaY;
            
            //delay laser
            if (!Obj_IsDeleted(guide1)) {
                ObjPrim_SetVertexPosition(guide1, 0, x, y, 1);
                ObjPrim_SetVertexPosition(guide1, 1, x + len * thetaX, y + len * thetaY, 1);
            }
            if (radius_ > 0) {
                SetShotIntersectionCircle(x, y, radius_);
                SetShotIntersectionLine(x, y, x + len * thetaX, y + len * thetaY, radius_ * 2);
            }
            //uses half circles to save on vertices but still look smooth at large sizes
            //circles
            ObjPrim_SetVertexPosition(circle1, 0, x, y, 1); //colorOut
            ObjPrim_SetVertexPosition(circle2, 0, x, y, 1); //colorIn
            ObjPrim_SetVertexPosition(circle3, 0, x, y, 1); //white
            for (int i = 1; i < 34; i++) {
                float angleT = 360 / 64 * (i - 1) + angle + 90;
                float tX = cos(angleT);
                float tY = sin(angleT);
                ObjPrim_SetVertexPosition(circle1, i, x + (radiusOut) * tX, y + (radiusOut) * tY, 1);
                ObjPrim_SetVertexPosition(circle2, i, x + (radiusIn) * tX, y + (radiusIn) * tY, 1);
                ObjPrim_SetVertexPosition(circle3, i, x + (radius_) * tX, y + (radius_) * tY, 1);
            }
            //lines
            //colorOut
            ObjPrim_SetVertexPosition(line1, 0, x + (radiusOut) * -thetaY, y + (radiusOut) * thetaX, 1);
            ObjPrim_SetVertexPosition(line1, 1, x + (radiusOut) * thetaY, y + (radiusOut) * -thetaX, 1);
            ObjPrim_SetVertexPosition(line1, 2, x + (radiusOut) * -thetaY + len * thetaX, y + (radiusOut) * thetaX + len * thetaY, 1);
            ObjPrim_SetVertexPosition(line1, 3, x + (radiusOut) * thetaY + len * thetaX, y + (radiusOut) * -thetaX + len * thetaY, 1);
            //colorIn
            ObjPrim_SetVertexPosition(line2, 0, x + (radiusIn) * -thetaY, y + (radiusIn) * thetaX, 1);
            ObjPrim_SetVertexPosition(line2, 1, x + (radiusIn) * thetaY, y + (radiusIn) * -thetaX, 1);
            ObjPrim_SetVertexPosition(line2, 2, x + (radiusIn) * -thetaY + len * thetaX, y + (radiusIn) * thetaX + len * thetaY, 1);
            ObjPrim_SetVertexPosition(line2, 3, x + (radiusIn) * thetaY + len * thetaX, y + (radiusIn) * -thetaX + len * thetaY, 1);
            //white
            ObjPrim_SetVertexPosition(line3, 0, x + radius_ * -thetaY, y + radius_ * thetaX, 1);
            ObjPrim_SetVertexPosition(line3, 1, x + radius_ * thetaY, y + radius_ * -thetaX, 1);
            ObjPrim_SetVertexPosition(line3, 2, x + radius_ * -thetaY + len * thetaX, y + radius_ * thetaX + len * thetaY, 1);
            ObjPrim_SetVertexPosition(line3, 3, x + radius_ * thetaY + len * thetaX, y + radius_ * -thetaX + len * thetaY, 1);
        }
    }

    return controller;

    function<int> CreateCircle(int color_) {
        int obj = InitPrim2D(PRIMITIVE_TRIANGLEFAN, 34, RP_STG_LASER1);
        Obj_SetVisible(obj, false);
        //set color
        ObjRender_SetColor(obj, color_);
        return obj;
    }

    function<int> CreateLine(int color_) {
        int obj = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 4, RP_STG_LASER1);
        Obj_SetVisible(obj, false);
        //set color
        ObjRender_SetColor(obj, color_);
        return obj;
    }
}
//laser with built in movement
function<int> CreateFireLaser(float x_, float y_, float angle_, int sustain_, float maxLength_, int color_, int priority_) {
    //Object Creation
    //Hitbox and position/angle
    if (color_ == SHOT_BLACK) color_ = 9;
    int controller = CreateStraightLaserA1(x_, y_, angle_, 0, 64, sustain_, 1, 0);

    ObjShot_SetSpellResist(controller, true);
    ObjShot_SetAutoDelete(controller, false);
    Obj_SetValueI(controller, SHOT_CANCEL, true);
    Obj_SetVisible(controller, false);

    int laser = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 6, IMG_SYSTEM_SHOT, priority_);

    int yOff = 16 * color_;
    ObjPrim_SetVertexUVT(laser, 0, 1008, 0 + yOff);
    ObjPrim_SetVertexUVT(laser, 1, 1008, 16 + yOff);
    ObjPrim_SetVertexUVT(laser, 2, 1009, 0 + yOff);
    ObjPrim_SetVertexUVT(laser, 3, 1009, 16 + yOff);
    ObjPrim_SetVertexUVT(laser, 4, 1024, 0 + yOff);
    ObjPrim_SetVertexUVT(laser, 5, 1024, 16 + yOff);

    async {
        for (int i = 1; i <= sustain_; i++) {
            if (Obj_IsDeleted(controller)) break;
            ObjLaser_SetLength(controller, Interpolate_Decelerate(0, maxLength_, i / as_float(sustain_ / 2)));
            UpdatePosition();
            yield;
        }

        Obj_Delete(laser);

        function<void> UpdatePosition() {
            float x_ = ObjMove_GetX(controller);
            float y_ = ObjMove_GetY(controller);
            float angle_ = ObjStLaser_GetAngle(controller);
            float len = ObjLaser_GetLength(controller);
            float thetaX = cos(angle_);
            float thetaY = sin(angle_);

            ObjPrim_SetVertexPosition(laser, 0, x_ + 8 * thetaY, y_ + 8 * -thetaX, 1);
            ObjPrim_SetVertexPosition(laser, 1, x_ + 8 * -thetaY, y_ + 8 * thetaX, 1);
            ObjPrim_SetVertexPosition(laser, 2, x_ + 8 * thetaY + (len - 7) * thetaX, y_ + 8 * -thetaX + (len - 7) * thetaY, 1);
            ObjPrim_SetVertexPosition(laser, 3, x_ + 8 * -thetaY + (len - 7) * thetaX, y_ + 8 * thetaX + (len - 7) * thetaY, 1);
            ObjPrim_SetVertexPosition(laser, 4, x_ + 8 * thetaY + (len + 8) * thetaX, y_ + 8 * -thetaX + (len + 8) * thetaY, 1);
            ObjPrim_SetVertexPosition(laser, 5, x_ + 8 * -thetaY + (len + 8) * thetaX, y_ + 8 * thetaX + (len + 8) * thetaY, 1);
        }
    }

    return controller;
}
//laser without movement
function<int> CreateFireLaser(float x_, float y_, float angle_, int sustain_, int color_, int priority_) {
    //Object Creation
    //Hitbox and position/angle
    if (color_ == SHOT_BLACK) color_ = 9;
    int controller = CreateStraightLaserA1(x_, y_, angle_, 0, 64, sustain_, 1, 0);

    ObjShot_SetSpellResist(controller, true);
    ObjShot_SetAutoDelete(controller, false);
    Obj_SetValueI(controller, SHOT_CANCEL, true);
    Obj_SetVisible(controller, false);

    int laser = InitPrim2D(PRIMITIVE_TRIANGLESTRIP, 6, IMG_SYSTEM_SHOT, priority_);

    int yOff = 16 * color_;
    ObjPrim_SetVertexUVT(laser, 0, 1008, 0 + yOff);
    ObjPrim_SetVertexUVT(laser, 1, 1008, 16 + yOff);
    ObjPrim_SetVertexUVT(laser, 2, 1009, 0 + yOff);
    ObjPrim_SetVertexUVT(laser, 3, 1009, 16 + yOff);
    ObjPrim_SetVertexUVT(laser, 4, 1024, 0 + yOff);
    ObjPrim_SetVertexUVT(laser, 5, 1024, 16 + yOff);

    async {
        while (!Obj_IsDeleted(controller)) {
            UpdatePosition();
            yield;
        }

        Obj_Delete(laser);

        function<void> UpdatePosition() {
            float x_ = ObjMove_GetX(controller);
            float y_ = ObjMove_GetY(controller);
            float angle_ = ObjStLaser_GetAngle(controller);
            float len = ObjLaser_GetLength(controller);
            float thetaX = cos(angle_);
            float thetaY = sin(angle_);

            ObjPrim_SetVertexPosition(laser, 0, x_ + 8 * thetaY, y_ + 8 * -thetaX, 1);
            ObjPrim_SetVertexPosition(laser, 1, x_ + 8 * -thetaY, y_ + 8 * thetaX, 1);
            ObjPrim_SetVertexPosition(laser, 2, x_ + 8 * thetaY + (len - 7) * thetaX, y_ + 8 * -thetaX + (len - 7) * thetaY, 1);
            ObjPrim_SetVertexPosition(laser, 3, x_ + 8 * -thetaY + (len - 7) * thetaX, y_ + 8 * thetaX + (len - 7) * thetaY, 1);
            ObjPrim_SetVertexPosition(laser, 4, x_ + 8 * thetaY + (len + 8) * thetaX, y_ + 8 * -thetaX + (len + 8) * thetaY, 1);
            ObjPrim_SetVertexPosition(laser, 5, x_ + 8 * -thetaY + (len + 8) * thetaX, y_ + 8 * thetaX + (len + 8) * thetaY, 1);
        }
    }

    return controller;
}

function<int> Laser_WarningLine(float x_, float y_, float angle_, int length_, int time_) {
    int line = InitPrim2D(PRIMITIVE_LINESTRIP, 2, RP_STG_LASER1);
    ObjPrim_SetVertexPosition(line, 0, x_, y_, 1);
    ObjPrim_SetVertexPosition(line, 1, x_ + length_ * cos(angle_), y_ + length_ * sin(angle_), 1);
    async {
        wait(time_);
        if (!Obj_IsDeleted(line)) Obj_Delete(line);
    }
    return line;
}