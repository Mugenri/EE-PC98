#include "./shotlib/lib_Laser.dnh"

#include "./shotlib/lib_ShotConstant.dnh"

//File paths
const string pathShotData = GetModuleDirectory() ~ "script/lib/shotlib/dat_Shot.dnh";
const string pathShotAnim = GetModuleDirectory() ~ "script/lib/shotlib/dat_ShotAnim.dnh";
const string pathShotSpawn = GetModuleDirectory() ~ "script/lib/shotlib/dat_ShotSpawn.dnh";

function<void> Shot_Init() {
    LoadEnemyShotData(pathShotData);
    LoadEnemyShotData(pathShotAnim);
    LoadEnemyShotData(pathShotSpawn);
}

//CreateShot functions with post-spawn bullet animations
//Keep in mind that the shots do not like having 2 addpatterns run on the same frame
function<int> CreateShotUA1(float x_, float y_, float speed_, float angle_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID;
    if (animGraphic_ == 0) { //no animation
        shotID = CreateShotA1(x_, y_, speed_, angle_, graphic_, delay_);
    } else { //animation
        shotID = CreateShotA1(x_, y_, speed_ / 2, angle_, animGraphic_, delay_);
        ObjMove_AddPatternA3(shotID, 20, speed_, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, graphic_);
    }
    ObjShot_SetAngleRounding(shotID, 22.5);
    Obj_SetValueI(shotID, SHOT_EFFECT, cancelGraphic_);
    return shotID;
}
function<int> CreateShotUA1(float x_, float y_, float speed_, float angle_, int graphic_, int delay_, int cancelGraphic_) {
    return CreateShotUA1(x_, y_, speed_, angle_, graphic_, delay_, 0, cancelGraphic_);
}

function<int> CreateShotUA2(float x_, float y_, float speed_, float angle_, float accel_, float maxSpeed_, float wVel_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID;
    if (animGraphic_ == 0) { //no animation
        shotID = CreateShotA2(x_, y_, speed_, angle_, accel_, maxSpeed_, wVel_, graphic_, delay_);
    } else { //animation
        shotID = CreateShotA2(x_, y_, speed_ / 2, angle_, 0, 0, wVel_ / 2, animGraphic_, delay_); //unaffected by accel for spawn animation
        ObjMove_AddPatternA3(shotID, 20, speed_, NO_CHANGE, accel_, maxSpeed_, wVel_, graphic_);
    }
    ObjShot_SetAngleRounding(shotID, 22.5);
    Obj_SetValueI(shotID, SHOT_EFFECT, cancelGraphic_);
    return shotID;
}
function<int> CreateShotUA2(float x_, float y_, float speed_, float angle_, float accel_, float maxSpeed_, float wVel_, int graphic_, int delay_, int cancelGraphic_) {
    return CreateShotUA2(x_, y_, speed_, angle_, accel_, maxSpeed_, wVel_, graphic_, delay_, 0, cancelGraphic_);
}

function<int> CreateShotUB1(float x_, float y_, float xSpeed_, float ySpeed_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID;
    if (animGraphic_ == 0) { //no animation
        shotID = CreateShotB1(x_, y_, xSpeed_, ySpeed_, graphic_, delay_);
    } else { //animation
        shotID = CreateShotB1(x_, y_, xSpeed_ / 2, ySpeed_ / 2, animGraphic_, delay_);
        ObjMove_AddPatternB3(shotID, 20, xSpeed_, ySpeed_, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, graphic_);
    }
    ObjShot_SetAngleRounding(shotID, 22.5);
    Obj_SetValueI(shotID, SHOT_EFFECT, cancelGraphic_);
    return shotID;
}
function<int> CreateShotUB1(float x_, float y_, float xSpeed_, float ySpeed_, int graphic_, int delay_, int cancelGraphic_) {
    return CreateShotUB1(x_, y_, xSpeed_, ySpeed_, graphic_, delay_, 0, cancelGraphic_);
}

function<int> CreateShotUB2(float x_, float y_, float xSpeed_, float ySpeed_, float xAccel_, float yAccel_, float maxSpeedX_, float maxSpeedY_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID;
    if (animGraphic_ == 0) { //no animation
        shotID = CreateShotB2(x_, y_, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, graphic_, delay_);
    } else { //animation
        shotID = CreateShotB2(x_, y_, xSpeed_ / 2, ySpeed_ / 2, 0, 0, 0, 0, animGraphic_, delay_); //unaffected by accel for spawn animation
        ObjMove_AddPatternB3(shotID, 20, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, graphic_);
    }
    ObjShot_SetAngleRounding(shotID, 22.5);
    Obj_SetValueI(shotID, SHOT_EFFECT, cancelGraphic_);
    return shotID;
}
function<int> CreateShotUB2(float x_, float y_, float xSpeed_, float ySpeed_, float xAccel_, float yAccel_, float maxSpeedX_, float maxSpeedY_, int graphic_, int delay_, int cancelGraphic_) {
    return CreateShotUB2(x_, y_, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, graphic_, delay_, 0, cancelGraphic_);
}

function<int> CreateShotUC1(float x_, float y_, float xSpeed_, float ySpeed_, float wOffset_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID;
    if (animGraphic_ == 0) { //no animation
        shotID = CreateShotC1(x_, y_, xSpeed_, ySpeed_, wOffset_, graphic_, delay_);
    } else { //animation
        shotID = CreateShotC1(x_, y_, xSpeed_ / 2, ySpeed_ / 2, wOffset_, animGraphic_, delay_);
        ObjMove_AddPatternC3(shotID, 20, xSpeed_, ySpeed_, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, graphic_);
    }
    ObjShot_SetAngleRounding(shotID, 22.5);
    Obj_SetValueI(shotID, SHOT_EFFECT, cancelGraphic_);
    return shotID;
}
function<int> CreateShotUC1(float x_, float y_, float xSpeed_, float ySpeed_, float wOffset_, int graphic_, int delay_, int cancelGraphic_) {
    return CreateShotUC1(x_, y_, xSpeed_, ySpeed_, wOffset_, graphic_, delay_, 0, cancelGraphic_);
}

function<int> CreateShotUC2(float x_, float y_, float xSpeed_, float ySpeed_, float xAccel_, float yAccel_, float maxSpeedX_, float maxSpeedY_, wOffset_, wVel_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID;
    if (animGraphic_ == 0) { //no animation
        shotID = CreateShotC2(x_, y_, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, wOffset_, wVel_, graphic_, delay_);
    } else { //animation
        shotID = CreateShotC2(x_, y_, xSpeed_ / 2, ySpeed_ / 2, 0, 0, 0, 0, wOffset_, wVel_ / 2, animGraphic_, delay_); //unaffected by accel for spawn animation
        ObjMove_AddPatternC3(shotID, 20, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, NO_CHANGE, wVel_, graphic_);
    }
    ObjShot_SetAngleRounding(shotID, 22.5);
    Obj_SetValueI(shotID, SHOT_EFFECT, cancelGraphic_);
    return shotID;
}
function<int> CreateShotUC2(float x_, float y_, float xSpeed_, float ySpeed_, float xAccel_, float yAccel_, float maxSpeedX_, float maxSpeedY_, wOffset_, wVel_, int graphic_, int delay_, int cancelGraphic_) {
    return CreateShotUC2(x_, y_, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, wOffset_, wVel_, graphic_, delay_, 0, cancelGraphic_);
}

//----------------------------------------------------
//PatternShot Functions
//----------------------------------------------------
//with parent
function<int> Shot_CreatePattern(int parent_, int type_, int way_, int stack_, float sBase_, float sArg_, float aBase_, float aArg_, float rad_, int graphic_, int delay_) {
    int obj = ObjPatternShot_Create();
    ObjPatternShot_SetShotType(obj, OBJ_SHOT);
    ObjPatternShot_SetParentObject(obj, parent_);
    ObjPatternShot_SetPatternType(obj, type_);
    ObjPatternShot_SetShotCount(obj, way_, stack_);
    ObjPatternShot_SetSpeed(obj, sBase_, sArg_);
    ObjPatternShot_SetAngle(obj, aBase_, aArg_);
    ObjPatternShot_SetShootRadius(obj, rad_);
    ObjPatternShot_SetGraphic(obj, graphic_);
    ObjPatternShot_SetDelay(obj, delay_);
    return obj;
}
//with basepoint
function<int> Shot_CreatePattern(float baseX_, float baseY_, int type_, int way_, int stack_, float sBase_, float sArg_, float aBase_, float aArg_, float rad_, int graphic_, int delay_) {
    int obj = ObjPatternShot_Create();
    ObjPatternShot_SetShotType(obj, OBJ_SHOT);
    ObjPatternShot_SetBasePoint(obj, baseX_, baseY_);
    ObjPatternShot_SetPatternType(obj, type_);
    ObjPatternShot_SetShotCount(obj, way_, stack_);
    ObjPatternShot_SetSpeed(obj, sBase_, sArg_);
    ObjPatternShot_SetAngle(obj, aBase_, aArg_);
    ObjPatternShot_SetShootRadius(obj, rad_);
    ObjPatternShot_SetGraphic(obj, graphic_);
    ObjPatternShot_SetDelay(obj, delay_);
    return obj;
}
//without spawn animation
function<int[]> Shot_FirePattern(int obj_, int cancelGraphic_) {
    int[] shots = ObjPatternShot_FireReturn(obj_);
    for each (shot in shots) {
        ObjShot_SetAngleRounding(shot, 22.5);
        Obj_SetValueI(shot, SHOT_EFFECT, cancelGraphic_);
    }
    return shots;
}
//A type movement
function<int[]> Shot_FirePatternA(int obj_, int graphic_, int animGraphic_, int cancelGraphic_) {
    int[] shots = ObjPatternShot_FireReturn(obj_);
    for each (shot in shots) {
        float speed = ObjMove_GetSpeed(shot);
        ObjMove_SetSpeed(shot, speed / 2);
        ObjShot_SetGraphic(shot, animGraphic_);
        ObjMove_AddPatternA3(shot, 20, speed, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, graphic_);
        ObjShot_SetAngleRounding(shot, 22.5);
        Obj_SetValueI(shot, SHOT_EFFECT, cancelGraphic_);
    }
    return shots;
}
//B type movement
function<int[]> Shot_FirePatternB() {
    //TODO
}