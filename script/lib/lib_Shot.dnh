#include "./shot/lib_Laser.dnh"

#include "./shot/lib_ShotConstant.dnh"

//File paths
const string pathShotData = GetCurrentScriptDirectory() ~ "shot/dat_Shot.dnh";
const string pathShotAnim = GetCurrentScriptDirectory() ~ "shot/dat_ShotAnim.dnh";
const string pathShotSpawn = GetCurrentScriptDirectory() ~ "shot/dat_ShotSpawn.dnh";

function<void> LoadShotData() {
    LoadEnemyShotData(pathShotData);
    LoadEnemyShotData(pathShotAnim);
    LoadEnemyShotData(pathShotSpawn);
}

//CreateShot functions with post-spawn bullet animations
function<int> CreateShotUA1(real x_, real y_, real speed_, real angle_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID = CreateShotA1(x_, y_, speed_ / 2, angle_, graphic_, delay_);
    Obj_SetValueI(shotID, CANCEL_EFFECT, cancelGraphic_);
    ObjShot_SetPositionRounding(shotID, true);
    if (animGraphic_ == 0) return shotID;
    async {
        wait(delay_ + 20); //20 frames for animation to play
        if(!Obj_IsDeleted(shotID)) { //set to normal graphic/speed
            ObjShot_SetGraphic(shotID, graphic_);
            ObjMove_SetSpeed(shotID, speed_);
        }
    }
    return shotID;
}
function<int> CreateShotUA1(real x_, real y_, real speed_, real angle_, int graphic_, int delay_, int cancelGraphic_) {
    CreateShotUA1(x_, y_, speed_, angle_, graphic_, delay_, 0, cancelGraphic_);
}

function<int> CreateShotUA2(real x_, real y_, real speed_, real angle_, real accel_, real maxSpeed_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID = CreateShotA2(x_, y_, speed_ / 2, angle_, accel_ / 2, maxSpeed_ / 2, animGraphic_, delay_);
    ObjShot_SetPositionRounding(shotID, true);
    if (animGraphic_ == 0) return shotID;
    async {
        wait(delay_);
        real frame = 0;
        while(!Obj_IsDeleted(shotID) && frame < 4) { //shot animations are 4 sprites lasting for 5 frames each
            ObjShot_SetGraphic(shotID, animGraphic_ + trunc(frame));
            frame += 1/5;
            yield;
        }
        if(!Obj_IsDeleted(shotID)) { //set to normal graphic/speed/acceleration
            ObjMove_AddPatternA3(shotID, 0, speed_, NO_CHANGE, accel_, NO_CHANGE, maxSpeed_, graphic_);
        }
    }
    return shotID;
}

function<int> CreateShotUB1(real x_, real y_, real xSpeed_, real ySpeed_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID = CreateShotB1(x_, y_, xSpeed_ / 2, ySpeed_ / 2, animGraphic_, delay_);
    ObjShot_SetPositionRounding(shotID, true);
    if (animGraphic_ == 0) return shotID;
    async {
        wait(delay_);
        real frame = 0;
        while(!Obj_IsDeleted(shotID) && frame < 4) { //shot animations are 4 sprites lasting for 5 frames each
            ObjShot_SetGraphic(shotID, animGraphic_ + trunc(frame));
            frame += 1/5;
            yield;
        }
        if(!Obj_IsDeleted(shotID)) { //set to normal graphic/speed
            ObjMove_AddPatternB3(shotID, 0, xSpeed_, ySpeed_, NO_CHANGE, NO_CHANGE, NO_CHANGE, NO_CHANGE, graphic_);
        }
    }
    return shotID;
}

function<int> CreateShotUB2(real x_, real y_, real xSpeed_, real ySpeed_, real xAccel_, real yAccel_, real maxSpeedX_, real maxSpeedY_, int graphic_, int delay_, int animGraphic_, int cancelGraphic_) {
    int shotID = CreateShotB2(x_, y_, xSpeed_ / 2, ySpeed_ / 2, xAccel_ / 2, yAccel_ / 2 , maxSpeedX_ / 2, maxSpeedY_ / 2, animGraphic_, delay_);
    ObjShot_SetPositionRounding(shotID, true);
    if (animGraphic_ == 0) return shotID;
    async {
        wait(delay_);
        real frame = 0;
        while(!Obj_IsDeleted(shotID) && frame < 4) { //shot animations are 4 sprites lasting for 5 frames each
            ObjShot_SetGraphic(shotID, animGraphic_ + trunc(frame));
            frame += 1/5;
            yield;
        }
        if(!Obj_IsDeleted(shotID)) { //set to normal graphic/speed/acceleration
            ObjMove_AddPatternB3(shotID, 0, xSpeed_, ySpeed_, xAccel_, yAccel_, maxSpeedX_, maxSpeedY_, graphic_);
        }
    }
    return shotID;
}